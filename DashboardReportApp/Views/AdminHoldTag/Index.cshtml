@model List<DashboardReportApp.Models.AdminHoldTagModel>

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Admin Panel - Edit Hold Records</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <!-- Filters: Search and Date Range with Clear Filters Button -->
    <div class="row mb-3 justify-content-center">
        <div class="col-auto">
            <input type="text" id="searchInput" class="form-control" placeholder="Search..." style="max-width: 200px;" />
        </div>
        <div class="col-auto d-flex">
            <input type="date" id="startDateFilter" class="form-control me-2" style="max-width: 150px;" />
            <input type="date" id="endDateFilter" class="form-control" style="max-width: 150px;" />
        </div>
        <div class="col-auto">
            <button id="clearFilters" class="btn btn-secondary">Clear Filters</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="custom-table" style="width:100%; border-collapse:collapse;">
            <thead class="table-dark">
                <tr>
                    <th class="sortable" data-label="ID" style="width: 3%;">ID</th>
                    <th class="sortable" data-label="Part" style="width: 7%;">Part</th>
                    <th class="sortable" data-label="Discrepancy" style="width: 10%;">Discrepancy</th>
                    <th class="sortable" data-label="Date" style="width: 7%;">Date</th>
                    <th class="sortable" data-label="Issued By" style="width: 7%;">Issued By</th>
                    <th class="sortable" data-label="Disposition" style="width: 10%;">Disposition</th>
                    <th class="sortable" data-label="Disposition By" style="width: 6%;">Disposition By</th>
                    <th class="sortable" data-label="Rework Instructions" style="width: 10%;">Rework Instructions</th>
                    <th class="sortable" data-label="Rework Instr By" style="width: 7%;">Rework Instr By</th>
                    <th class="sortable" data-label="Quantity" style="width: 4%;">Quantity</th>
                    <th class="sortable" data-label="Unit" style="width: 7%;">Unit</th>
                    <th class="sortable" data-label="Pcs Scrapped" style="width: 4%;">Pcs Scrapped</th>
                    <th class="sortable" data-label="Date Completed" style="width: 7%;">Date Completed</th>
                    <th class="sortable" data-label="File1" style="width: 5%;">File 1</th>
                    <th class="sortable" data-label="File2" style="width: 5%;">File 2</th>
                    <th style="width: 4%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in Model)
                {
                    <tr>
                        <td>@record.Id</td>
                        <td>@record.Part</td>
                        <td>@record.Discrepancy</td>
                        <td>@(record.Date?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@record.IssuedBy</td>
                        <td>@record.Disposition</td>
                        <td>@record.DispositionBy</td>
                        <td>@record.ReworkInstr</td>
                        <td>@record.ReworkInstrBy</td>
                        <td>@record.Quantity</td>
                        <td>@record.Unit</td>
                        <td>@record.PcsScrapped</td>
                        <td>@(record.DateCompleted?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(record.FileAddress1))
                            {
                                <button type="button"
                                        class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-name="@record.FileAddress1">
                                    Preview 1
                                </button>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(record.FileAddress2))
                            {
                                <button type="button"
                                        class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-name="@record.FileAddress2">
                                    Preview 2
                                </button>
                            }
                        </td>

                        <td>
                            <button type="button"
                                    class="btn btn-primary btn-sm edit-btn"
                                    data-id="@record.Id"
                                    data-part="@record.Part"
                                    data-discrepancy="@record.Discrepancy"
                                    data-date="@(record.Date?.ToString("yyyy-MM-dd") ?? "")"
                                    data-issuedby="@record.IssuedBy"
                                    data-disposition="@record.Disposition"
                                    data-dispositionby="@record.DispositionBy"
                                    data-reworkinstr="@record.ReworkInstr"
                                    data-reworkinstrby="@record.ReworkInstrBy"
                                    data-quantity="@record.Quantity"
                                    data-unit="@record.Unit"
                                    data-pcsscrapped="@(record.PcsScrapped?.ToString() ?? "")"
                                    data-datecompleted="@(record.DateCompleted?.ToString("yyyy-MM-dd") ?? "")"
                                    data-fileaddress1="@record.FileAddress1"
                                    data-fileaddress2="@record.FileAddress2">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Record Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Record</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="AdminHoldTag" asp-action="UpdateRequest" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" name="Id" id="edit-id" />
                    <div class="mb-3">
                        <label for="edit-part" class="form-label">Part</label>
                        <input type="text" name="Part" id="edit-part" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-discrepancy" class="form-label">Discrepancy</label>
                        <textarea name="Discrepancy" id="edit-discrepancy" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="edit-date" class="form-label">Date</label>
                        <input type="date" name="Date" id="edit-date" class="form-control" />
                    </div>
                    <!-- Issued By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-issuedby" class="form-label">Issued By</label>
                        <select name="IssuedBy" id="edit-issuedby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.IssuedByOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.IssuedByOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-disposition" class="form-label">Disposition</label>
                        <textarea name="Disposition" id="edit-disposition" class="form-control"></textarea>
                    </div>
                    <!-- Disposition By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-dispositionby" class="form-label">Disposition By</label>
                        <select name="DispositionBy" id="edit-dispositionby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.DispositionOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.DispositionOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-reworkinstr" class="form-label">Rework Instructions</label>
                        <textarea name="ReworkInstr" id="edit-reworkinstr" class="form-control"></textarea>
                    </div>
                    <!-- Rework Instr By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-reworkinstrby" class="form-label">Rework Instr By</label>
                        <select name="ReworkInstrBy" id="edit-reworkinstrby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.ReworkOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.ReworkOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-quantity" class="form-label">Quantity</label>
                        <input type="number" name="Quantity" id="edit-quantity" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-unit" class="form-label">Unit</label>
                        <input type="text" name="Unit" id="edit-unit" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-pcsscrapped" class="form-label">Pcs Scrapped</label>
                        <input type="number" name="PcsScrapped" id="edit-pcsscrapped" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-datecompleted" class="form-label">Date Completed</label>
                        <input type="date" name="DateCompleted" id="edit-datecompleted" class="form-control" />
                    </div>
                    <!-- File 1 -->
                    <div class="mb-3">
                        <label class="form-label">File 1</label>
                        <input type="hidden" name="FileAddress1" id="edit-fileaddress1" />
                        <input type="file" name="FileUpload1" id="edit-file1" class="form-control" accept="image/*,.pdf" />
                        <div id="current-file1" class="mt-2 text-break"></div>
                    </div>
                    <!-- File 2 -->
                    <div class="mb-3">
                        <label class="form-label">File 2</label>
                        <input type="hidden" name="FileAddress2" id="edit-fileaddress2" />
                        <input type="file" name="FileUpload2" id="edit-file2" class="form-control" accept="image/*,.pdf" />
                        <div id="current-file2" class="mt-2 text-break"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-save"></i> Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Hidden Form for Direct File Upload (replaces modal for file updates) -->
<form id="hiddenUpdateFileForm" asp-action="UpdateFile" method="post" enctype="multipart/form-data" style="display:none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" id="hiddenRecordId" value="" />
    <input type="file" name="file" id="hiddenFileInput" />
</form>

<!-- Bootstrap Modal for File Preview -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <iframe id="modalFile" class="w-100" style="height:500px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // (Optional) Copy selected part from dropdown into text input for modal
        document.addEventListener('DOMContentLoaded', function () {
            const partDropdown = document.getElementById('PartDropdown');
            const customPartInput = document.getElementById('ModalCustomPartInput');
            if (partDropdown && customPartInput) {
                partDropdown.addEventListener('change', () => {
                    customPartInput.value = partDropdown.value;
                });
            }
        });
    </script>

    <!-- QR Code Generation for Both QR Codes -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var currentUrl = window.location.href;
            QRCode.toCanvas(document.getElementById('current-page-qr'), currentUrl, { width: 128 }, function (error) {
                if (error) console.error(error);
                else console.log("Current page QR code generated!");
            });
            var wifiData = `WIFI:T:WPA;S:Sintergy-WiFi;P:5intergyW1F1;;`;
            QRCode.toCanvas(document.getElementById('wifi-qr'), wifiData, { width: 128 }, function (error) {
                if (error) console.error(error);
                else console.log("Wi‑Fi QR code generated!");
            });
        });
    </script>

    <!-- Table Filtering & Sorting with Clear Filters -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const startDateInput = document.getElementById("startDateFilter");
            const endDateInput = document.getElementById("endDateFilter");
            const clearBtn = document.getElementById("clearFilters");
            const tbody = document.querySelector(".custom-table tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            const headers = document.querySelectorAll(".sortable");

            // Search and date range event listeners
            searchInput.addEventListener("input", updateTable);
            startDateInput.addEventListener("change", updateTable);
            endDateInput.addEventListener("change", updateTable);

            // Clear Filters Button
            clearBtn.addEventListener("click", function () {
                searchInput.value = "";
                startDateInput.value = "";
                endDateInput.value = "";
                rows.forEach(row => row.style.display = "");
            });

            // Sorting function for headers
            headers.forEach((header, index) => {
                header.addEventListener("click", function () {
                    const order = header.dataset.order = -(header.dataset.order || -1);
                    const type = header.dataset.label;
                    rows.sort((a, b) => {
                        const cellA = a.children[index].textContent.trim();
                        const cellB = b.children[index].textContent.trim();
                        if (type === "Date") {
                            return order * (new Date(cellA) - new Date(cellB));
                        } else if (!isNaN(cellA) && !isNaN(cellB)) {
                            return order * (Number(cellA) - Number(cellB));
                        } else {
                            return order * cellA.localeCompare(cellB);
                        }
                    });
                    tbody.innerHTML = "";
                    rows.forEach(row => tbody.appendChild(row));
                });
            });

            function updateTable() {
                const searchTerm = searchInput.value.toLowerCase();
                const startDateValue = startDateInput.value;
                const endDateValue = endDateInput.value;
                rows.forEach(row => {
                    let show = true;
                    // Search filter: Check entire row text
                    if (searchTerm && !row.textContent.toLowerCase().includes(searchTerm)) {
                        show = false;
                    }
                    // Date range filter (assuming Date is in column index 3)
                    const dateCell = row.children[3];
                    if (dateCell && dateCell.textContent.trim()) {
                        const rowDate = new Date(dateCell.textContent.trim());
                        if (startDateValue) {
                            const startDate = new Date(startDateValue);
                            if (rowDate < startDate) show = false;
                        }
                        if (endDateValue) {
                            const endDate = new Date(endDateValue);
                            if (rowDate > endDate) show = false;
                        }
                    }
                    row.style.display = show ? "" : "none";
                });
            }
        });
    </script>

    <!-- Direct File Upload Script for "Add / Update File1" -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const addFileButtons = document.querySelectorAll(".add-file-btn");
            const hiddenFileInput = document.getElementById("hiddenFileInput");
            const hiddenRecordId = document.getElementById("hiddenRecordId");
            const hiddenUpdateFileForm = document.getElementById("hiddenUpdateFileForm");

            addFileButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const recordId = button.getAttribute("data-id");
                    hiddenRecordId.value = recordId;
                    hiddenFileInput.click();
                });
            });

            hiddenFileInput.addEventListener("change", function () {
                if (hiddenFileInput.files.length > 0) {
                    hiddenUpdateFileForm.submit();
                }
            });
        });
    </script>

    <!-- Event Delegation for Edit Buttons -->
    <script>
        // Use event delegation so that newly sorted/filtered rows still respond
        document.querySelector(".custom-table tbody").addEventListener("click", function(e) {
            const btn = e.target.closest(".edit-btn");
            if (!btn) return;
            // Gather data from button's dataset
            const id = btn.dataset.id;
            const part = btn.dataset.part;
            const discrepancy = btn.dataset.discrepancy;
            const date = btn.dataset.date;
            const issuedBy = btn.dataset.issuedby;
            const disposition = btn.dataset.disposition;
            const dispositionBy = btn.dataset.dispositionby;
            const reworkInstr = btn.dataset.reworkinstr;
            const reworkInstrBy = btn.dataset.reworkinstrby;
            const quantity = btn.dataset.quantity;
            const unit = btn.dataset.unit;
            const pcsScrapped = btn.dataset.pcsscrapped;
            const dateCompleted = btn.dataset.datecompleted;
            const fileAddress1 = btn.dataset.fileaddress1;
            const fileAddress2 = btn.dataset.fileaddress2;

            // Populate modal fields
            document.getElementById("edit-id").value = id;
            document.getElementById("edit-part").value = part;
            document.getElementById("edit-discrepancy").value = discrepancy;
            document.getElementById("edit-date").value = date;
            document.getElementById("edit-issuedby").value = issuedBy;
            document.getElementById("edit-disposition").value = disposition;
            document.getElementById("edit-dispositionby").value = dispositionBy;
            document.getElementById("edit-reworkinstr").value = reworkInstr;
            document.getElementById("edit-reworkinstrby").value = reworkInstrBy;
            document.getElementById("edit-quantity").value = quantity;
            document.getElementById("edit-unit").value = unit;
            document.getElementById("edit-pcsscrapped").value = pcsScrapped;
            document.getElementById("edit-datecompleted").value = dateCompleted;

            
                  // inside your edit modal population
        document.getElementById("edit-fileaddress1").value = fileAddress1 || "";
        document.getElementById("current-file1").innerHTML = fileAddress1
          ? `<a href="/AdminHoldTag/StreamFile?name=${encodeURIComponent(fileAddress1)}" target="_blank">Current File 1</a>`
          : "No file uploaded for File 1";

        document.getElementById("edit-fileaddress2").value = fileAddress2 || "";
        document.getElementById("current-file2").innerHTML = fileAddress2
          ? `<a href="/AdminHoldTag/StreamFile?name=${encodeURIComponent(fileAddress2)}" target="_blank">Current File 2</a>`
          : "No file uploaded for File 2";


            // Show edit modal
            new bootstrap.Modal(document.getElementById("editModal")).show();
        });
    </script>

    <!-- File Preview Script -->
    <script>
             document.addEventListener("DOMContentLoaded", function () {
          const previewButtons = document.querySelectorAll(".fetch-image-btn");
          const modal = new bootstrap.Modal(document.getElementById("imageModal"));
          const modalImage = document.getElementById("modalImage");
          const modalFile = document.getElementById("modalFile");

          previewButtons.forEach(button => {
            button.addEventListener("click", function () {
              const fileName = button.getAttribute("data-file-name");
              if (!fileName) { alert("File not found."); return; }

              fetch(`/AdminHoldTag/FetchFile?name=${encodeURIComponent(fileName)}`)
                .then(r => { if (!r.ok) throw new Error("Failed to fetch URL"); return r.json(); })
                .then(data => {
                  if (!data.success) { alert(`Error: ${data.message}`); return; }

                  const url = data.url;
                  modalImage.style.display = "none";
                  modalFile.style.display = "none";

                  if (url.match(/\.(jpg|jpeg|png|gif|bmp|webp)(\?|$)/i)) {
                    modalImage.src = url;
                    modalImage.style.display = "block";
                  } else if (url.match(/\.pdf(\?|$)/i)) {
                    modalFile.src = url;
                    modalFile.style.display = "block";
                  } else {
                    alert("Unsupported file type.");
                    return;
                  }
                  modal.show();
                })
                .catch(err => {
                  console.error(err);
                  alert("An error occurred while fetching the file.");
                });
            });
          });

          document.getElementById("imageModal").addEventListener("hidden.bs.modal", function () {
            modalImage.src = "";
            modalFile.src = "";
          });
        });

    </script>
}
