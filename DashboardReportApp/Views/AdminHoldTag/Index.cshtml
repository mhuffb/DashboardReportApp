@model List<DashboardReportApp.Models.AdminHoldTagModel>

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Admin Panel - Edit Hold Records</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger fade show" role="alert">
            @TempData["ErrorMessage"]
        </div>
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["SuccessMessage"]
        </div>
    }

    <!-- Filters: Search and Date -->
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" id="searchInput" class="form-control" placeholder="Search..." />
        </div>
        <div class="col-md-6">
            <input type="date" id="dateFilter" class="form-control" />
        </div>
    </div>

    <div class="table-responsive">
        <table class="custom-table" style="width:100%; border-collapse:collapse;">
            <thead class="table-dark">
                <tr>
                    <th class="sortable" data-label="ID" style="width: 3%;">ID</th>
                    <th class="sortable" data-label="Part" style="width: 7%;">Part</th>
                    <th class="sortable" data-label="Discrepancy" style="width: 10%;">Discrepancy</th>
                    <th class="sortable" data-label="Date" style="width: 7%;">Date</th>
                    <th class="sortable" data-label="Issued By" style="width: 7%;">Issued By</th>
                    <th class="sortable" data-label="Disposition" style="width: 10%;">Disposition</th>
                    <th class="sortable" data-label="Disposition By" style="width: 6%;">Disposition By</th>
                    <th class="sortable" data-label="Rework Instructions" style="width: 10%;">Rework Instructions</th>
                    <th class="sortable" data-label="Rework Instr By" style="width: 7%;">Rework Instr By</th>
                    <th class="sortable" data-label="Quantity" style="width: 4%;">Quantity</th>
                    <th class="sortable" data-label="Unit" style="width: 7%;">Unit</th>
                    <th class="sortable" data-label="Pcs Scrapped" style="width: 4%;">Pcs Scrapped</th>
                    <th class="sortable" data-label="Date Completed" style="width: 7%;">Date Completed</th>
                    <!-- Show both FileAddress1 and FileAddress2 in separate columns -->
                    <th style="width: 5%;">File 1</th>
                    <th style="width: 5%;">File 2</th>
                    <th style="width: 4%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in Model)
                {
                    <tr>
                        <td>@record.Id</td>
                        <td>@record.Part</td>
                        <td>@record.Discrepancy</td>
                        <td>@(record.Date?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@record.IssuedBy</td>
                        <td>@record.Disposition</td>
                        <td>@record.DispositionBy</td>
                        <td>@record.ReworkInstr</td>
                        <td>@record.ReworkInstrBy</td>
                        <td>@record.Quantity</td>
                        <td>@record.Unit</td>
                        <td>@record.PcsScrapped</td>
                        <td>@(record.DateCompleted?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>
                            <!-- Preview button for FileAddress1 if present -->
                            @if (!string.IsNullOrEmpty(record.FileAddress1))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-path="@record.FileAddress1">
                                    Preview 1
                                </button>
                            }
                        </td>
                        <td>
                            <!-- Preview button for FileAddress2 if present -->
                            @if (!string.IsNullOrEmpty(record.FileAddress2))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-path="@record.FileAddress2">
                                    Preview 2
                                </button>
                            }
                        </td>
                        <td>
                            <button type="button"
                                    class="btn btn-primary btn-sm edit-btn"
                                    data-id="@record.Id"
                                    data-part="@record.Part"
                                    data-discrepancy="@record.Discrepancy"
                                    data-date="@(record.Date?.ToString("yyyy-MM-dd") ?? "")"
                                    data-issuedby="@record.IssuedBy"
                                    data-disposition="@record.Disposition"
                                    data-dispositionby="@record.DispositionBy"
                                    data-reworkinstr="@record.ReworkInstr"
                                    data-reworkinstrby="@record.ReworkInstrBy"
                                    data-quantity="@record.Quantity"
                                    data-unit="@record.Unit"
                                    data-pcsscrapped="@(record.PcsScrapped?.ToString() ?? "")"
                                    data-datecompleted="@(record.DateCompleted?.ToString("yyyy-MM-dd") ?? "")"
                                    data-fileaddress1="@record.FileAddress1"
                                    data-fileaddress2="@record.FileAddress2">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Record Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Record</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Make sure your POST method can handle the two file uploads (FileUpload1, FileUpload2) -->
            <form asp-controller="AdminHoldTag" asp-action="UpdateRequest" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" name="Id" id="edit-id" />

                    <div class="mb-3">
                        <label for="edit-part" class="form-label">Part</label>
                        <input type="text" name="Part" id="edit-part" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-discrepancy" class="form-label">Discrepancy</label>
                        <textarea name="Discrepancy" id="edit-discrepancy" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="edit-date" class="form-label">Date</label>
                        <input type="date" name="Date" id="edit-date" class="form-control" />
                    </div>

                    <!-- Issued By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-issuedby" class="form-label">Issued By</label>
                        <select name="IssuedBy" id="edit-issuedby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.IssuedByOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.IssuedByOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="edit-disposition" class="form-label">Disposition</label>
                        <textarea name="Disposition" id="edit-disposition" class="form-control"></textarea>
                    </div>
                    <!-- Disposition By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-dispositionby" class="form-label">Disposition By</label>
                        <select name="DispositionBy" id="edit-dispositionby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.DispositionOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.DispositionOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>

                    <!-- Rework Instructions -->
                    <div class="mb-3">
                        <label for="edit-reworkinstr" class="form-label">Rework Instructions</label>
                        <textarea name="ReworkInstr" id="edit-reworkinstr" class="form-control"></textarea>
                    </div>
                    <!-- Rework Instr By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-reworkinstrby" class="form-label">Rework Instr By</label>
                        <select name="ReworkInstrBy" id="edit-reworkinstrby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.ReworkOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.ReworkOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="edit-quantity" class="form-label">Quantity</label>
                        <input type="number" name="Quantity" id="edit-quantity" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-unit" class="form-label">Unit</label>
                        <input type="text" name="Unit" id="edit-unit" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-pcsscrapped" class="form-label">Pcs Scrapped</label>
                        <input type="number" name="PcsScrapped" id="edit-pcsscrapped" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-datecompleted" class="form-label">Date Completed</label>
                        <input type="date" name="DateCompleted" id="edit-datecompleted" class="form-control" />
                    </div>

                    <!-- FileAddress1 / File 1 -->
                    <div class="mb-3">
                        <label class="form-label">File 1</label>
                        <!-- Hidden input to store existing path -->
                        <input type="hidden" name="FileAddress1" id="edit-fileaddress1" />
                        <!-- File upload for new or updated file -->
                        <input type="file" name="FileUpload1" id="edit-file1" class="form-control" accept="image/*,.pdf" />
                        <div id="current-file1" class="mt-2 text-break"></div>
                    </div>

                    <!-- FileAddress2 / File 2 -->
                    <div class="mb-3">
                        <label class="form-label">File 2</label>
                        <!-- Hidden input to store existing path -->
                        <input type="hidden" name="FileAddress2" id="edit-fileaddress2" />
                        <!-- File upload for new or updated file -->
                        <input type="file" name="FileUpload2" id="edit-file2" class="form-control" accept="image/*,.pdf" />
                        <div id="current-file2" class="mt-2 text-break"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-save"></i> Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bootstrap Modal for File Preview -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <iframe id="modalFile" class="w-100" style="height:500px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            //---------------------------------------------------------
            // 1) File Preview Logic
            const imageModalElement = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            const modalFile = document.getElementById('modalFile');

            document.querySelectorAll('.fetch-image-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const filePath = this.dataset.filePath;
                    if (!filePath) {
                        alert("No file path provided.");
                        return;
                    }
                    // Adjust this route as needed. You might have:
                    // /AdminHoldTag/FetchFile?filePath=...
                    fetch(`/MaintenanceRequest/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                        .then(response => {
                            if (!response.ok) throw new Error("Failed to fetch file.");
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                // Check extension
                                if (data.url.toLowerCase().endsWith(".pdf")) {
                                    modalFile.src = data.url;
                                    modalFile.style.display = 'block';
                                    modalImage.style.display = 'none';
                                    modalImage.src = '';
                                } else {
                                    modalImage.src = data.url;
                                    modalImage.style.display = 'block';
                                    modalFile.style.display = 'none';
                                    modalFile.src = '';
                                }
                                new bootstrap.Modal(imageModalElement).show();
                            } else {
                                alert(`Error: ${data.message}`);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching file:', error);
                            alert("An error occurred while fetching the file.");
                        });
                });
            });

            imageModalElement.addEventListener('hidden.bs.modal', function () {
                // Reset
                modalImage.src = '';
                modalImage.style.display = 'none';
                modalFile.src = '';
                modalFile.style.display = 'none';
            });

            //---------------------------------------------------------
            // 2) Edit Record Modal Setup
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', function () {
                    // Gather data from button attributes
                    const id            = this.dataset.id;
                    const part          = this.dataset.part;
                    const discrepancy   = this.dataset.discrepancy;
                    const date          = this.dataset.date;
                    const issuedBy      = this.dataset.issuedby;
                    const disposition   = this.dataset.disposition;
                    const dispositionBy = this.dataset.dispositionby;
                    const reworkInstr   = this.dataset.reworkinstr;
                    const reworkInstrBy = this.dataset.reworkinstrby;
                    const quantity      = this.dataset.quantity;
                    const unit          = this.dataset.unit;
                    const pcsScrapped   = this.dataset.pcsscrapped;
                    const dateCompleted = this.dataset.datecompleted;
                    const fileAddress1  = this.dataset.fileaddress1;
                    const fileAddress2  = this.dataset.fileaddress2;

                    // Populate modal fields
                    document.getElementById('edit-id').value = id;
                    document.getElementById('edit-part').value = part;
                    document.getElementById('edit-discrepancy').value = discrepancy;
                    document.getElementById('edit-date').value = date;
                    document.getElementById('edit-issuedby').value = issuedBy;
                    document.getElementById('edit-disposition').value = disposition;
                    document.getElementById('edit-dispositionby').value = dispositionBy;
                    document.getElementById('edit-reworkinstr').value = reworkInstr;
                    document.getElementById('edit-reworkinstrby').value = reworkInstrBy;
                    document.getElementById('edit-quantity').value = quantity;
                    document.getElementById('edit-unit').value = unit;
                    document.getElementById('edit-pcsscrapped').value = pcsScrapped;
                    document.getElementById('edit-datecompleted').value = dateCompleted;

                    // File 1
                    document.getElementById('edit-fileaddress1').value = fileAddress1 || '';
                    const currentFile1Div = document.getElementById('current-file1');
                    if (fileAddress1) {
                        currentFile1Div.innerHTML = `<a href="${fileAddress1}" target="_blank">Current File 1</a>`;
                    } else {
                        currentFile1Div.innerHTML = 'No file uploaded for File 1';
                    }

                    // File 2
                    document.getElementById('edit-fileaddress2').value = fileAddress2 || '';
                    const currentFile2Div = document.getElementById('current-file2');
                    if (fileAddress2) {
                        currentFile2Div.innerHTML = `<a href="${fileAddress2}" target="_blank">Current File 2</a>`;
                    } else {
                        currentFile2Div.innerHTML = 'No file uploaded for File 2';
                    }

                    // Show modal
                    new bootstrap.Modal(document.getElementById('editModal')).show();
                });
            });

            //---------------------------------------------------------
            // 3) Filtering & Sorting Logic
            let currentSortColumn = null;
            let currentSortDir = 'asc';

            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            // Click event for sortable headers
            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if (!th.dataset.label) {
                    th.dataset.label = th.innerText.trim();
                }
                th.addEventListener('click', () => {
                    if (currentSortColumn === index) {
                        currentSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSortColumn = index;
                        currentSortDir = 'asc';
                    }
                    updateTable();
                    updateSortIndicators();
                });
            });

            function updateTable() {
                const searchQuery = document.getElementById('searchInput').value.trim().toLowerCase();
                const selectedDate = document.getElementById('dateFilter').value;
                let rows = Array.from(tbody.querySelectorAll('tr'));

                // Sorting
                if (currentSortColumn !== null) {
                    rows.sort((a, b) => {
                        const aCells = a.querySelectorAll('td');
                        const bCells = b.querySelectorAll('td');
                        const aText = aCells[currentSortColumn]?.innerText.trim() || '';
                        const bText = bCells[currentSortColumn]?.innerText.trim() || '';
                        const aNum = parseFloat(aText);
                        const bNum = parseFloat(bText);

                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return currentSortDir === 'asc' ? aNum - bNum : bNum - aNum;
                        } else {
                            return currentSortDir === 'asc'
                                ? aText.localeCompare(bText)
                                : bText.localeCompare(aText);
                        }
                    });
                }
                rows.forEach(row => tbody.appendChild(row));

                // Filtering
                rows.forEach(row => {
                    let show = true;
                    const cells = row.querySelectorAll('td');
                    if (searchQuery) {
                        let found = false;
                        for (let i = 0; i < cells.length; i++) {
                            if (cells[i].innerText.toLowerCase().includes(searchQuery)) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) show = false;
                    }
                    if (selectedDate) {
                        // Assuming Date is at column index 3
                        const dateCell = cells[3];
                        if (dateCell && dateCell.innerText.trim() !== selectedDate) {
                            show = false;
                        }
                    }
                    row.style.display = show ? '' : 'none';
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label;
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }

            document.getElementById('searchInput').addEventListener('input', updateTable);
            document.getElementById('dateFilter').addEventListener('change', updateTable);

            // Initial table load
            updateTable();
        });
    </script>
}
