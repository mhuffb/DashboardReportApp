@model List<DashboardReportApp.Models.ToolItemModel>
@using DashboardReportApp.Models
@{
    ViewData["Title"] = "Tooling Inventory";
}

<div class="container-fluid px-3">
    <h2 class="text-center mb-3">Tooling Inventory</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

   
    <!-- ====================== In Progress Tools (from Tooling History) ====================== -->
    @if (ViewBag.ToolingInProgress != null)
    {
        <div class="table-responsive mb-4">
            <h3 class="mb-2">In Progress Tools</h3>
            <table class="table table-striped table-bordered shadow-sm w-100" id="tblInProgress">
                <thead class="table-dark">
                    <tr>
                        <th style="width:48px;"></th>  <!-- expand -->
                        <th>Group</th>
                        <th>Assembly #</th>
                        <th>Reason</th>
                        <th>Vendor</th>
                        <th>Initiated</th>
                        <th>Due</th>
                        <th>Cost</th>
                        <th style="min-width:260px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (DashboardReportApp.Models.ToolingHistoryModel item in ViewBag.ToolingInProgress)
                    {
                        var rowId = $"row-items-{item.GroupID}";
                        var reason = (item.Reason ?? string.Empty).Trim();
                        var showPackingSlip = !reason.Equals("New Customer Purchase (5030)", StringComparison.OrdinalIgnoreCase);

                        <tr data-group="@item.GroupID">
                            <td>
                                <button type="button"
                                        class="btn btn-sm btn-outline-secondary"
                                        data-action="toggle-items"
                                        data-group="@item.GroupID"
                                        aria-expanded="false"
                                        aria-controls="@rowId"
                                        title="Show tool items">
                                    <i class="bi bi-caret-right-fill"></i>
                                </button>
                            </td>
                            <td>@item.GroupID</td>
                            <td>@item.Part</td>
                            <td>@item.Reason</td>
                            <td>@item.ToolVendor</td>
                            <td>@item.DateInitiated.ToShortDateString()</td>
                            <td>@item.DateDue?.ToShortDateString()</td>
                            <td>@(item.Cost?.ToString("0.00"))</td>
                            <td class="d-flex flex-wrap gap-2">
                                <div class="btn-group btn-group-sm">

                                    <a class="btn btn-primary btn-sm"
                                       href="@Url.Action("EditToolingHistoryModalByGroup", "ToolingHistory", new { groupID = item.GroupID })"
                                       data-bs-toggle="modal" data-bs-target="#toolingHistoryModal">
                                        Edit Tool History
                                    </a>

                                    <a class="btn btn-secondary btn-sm"
                                       href="@Url.Action("ToolItemsModalByGroup", "ToolingHistory", new { groupID = item.GroupID })"
                                       data-bs-toggle="modal" data-bs-target="#toolingHistoryModal">
                                        Add/Edit Tool Items
                                    </a>

                                </div>

                                <form asp-action="RequestPoNumber" asp-controller="ToolingHistory" method="post" class="request-po-form d-inline-block">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.Id" />
                                    @{
                                        bool hasPo = !string.IsNullOrWhiteSpace(item.PO);
                                        bool wasRequested = item.PoRequestedAt.HasValue;
                                        var btnText = hasPo ? $"PO sent: {item.PO}" : (wasRequested ? "PO was requested" : "Request PO #");
                                        var btnClass = hasPo ? "btn btn-success btn-sm" : (wasRequested ? "btn btn-secondary btn-sm" : "btn btn-warning btn-sm");
                                        var disabledAttr = hasPo ? "disabled" : "";
                                    }
                                    <button type="submit" class="@btnClass" @disabledAttr>@btnText</button>
                                </form>

                                @if (showPackingSlip)
                                {
                                    <a class="btn btn-outline-primary btn-sm"
                                       href="@Url.Action("GeneratePackingSlip", "ToolingHistory", new { groupID = item.GroupID, email = true })"
                                       target="_blank" rel="noopener">
                                        Create Packing Slip
                                    </a>
                                }
                            </td>
                        </tr>
                        <!-- Collapsible items row -->
                        <tr id="@rowId" class="d-none">
                            <td></td>
                            <td colspan="8">
                                <div class="p-2 border rounded bg-light" data-items-container="@item.GroupID">
                                    <div class="text-muted">Loading...</div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    <!-- ONLY: Add for Assembly -->
    <div class="d-flex gap-2 mb-3 align-items-center">
        <div class="input-group" style="max-width:420px">
            <span class="input-group-text">Assembly #</span>
            <input id="quickAssembly" type="text" class="form-control" placeholder="e.g., ASM-1001" />
            <button id="btnAddForAssembly" class="btn btn-primary" type="button">
                Add for Assembly
            </button>
        </div>
    </div>
    <div class="d-flex flex-wrap gap-2 align-items-center mb-2">
        <div class="input-group" style="max-width:420px">
            <span class="input-group-text">Search</span>
            <input id="invSearch" type="text" class="form-control" placeholder="Type to search any field..." />
        </div>

        <div class="ms-auto d-flex align-items-center gap-2">
            <label class="form-label mb-0" for="invPageSize">Rows per page</label>
            <select id="invPageSize" class="form-select form-select-sm" style="width: auto;">
                <option>10</option>
                <option selected>25</option>
                <option>50</option>
                <option>100</option>
            </select>
        </div>
    </div>

    <div class="table-responsive">
        <h3 class="mb-2">Tooling Inventory</h3>
        <table id="tblInventory" class="table table-striped table-bordered shadow-sm align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Id</th>
                    <th>Assembly #</th>
                    <th>Tool #</th>
                    <th>Tool Item</th>
                    <th>Condition</th>
                    <th>Status</th>
                    <th>Location</th>
                    <th>Unavailable Info</th>
                    <th style="width:90px;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in Model)
                {
                    <tr>
                        <td>@t.Id</td>
                        <td>@t.AssemblyNumber</td>
                        <td>@t.ToolNumber</td>
                        <td>@t.ToolItem</td>
                        <td>@t.Condition</td>
                        <td>@t.Status</td>
                        <td>@t.Location</td>
                        <td>
                            @if (t.Status == ToolStatus.Unavailable)
                            {
                                <div>
                                    <div><strong>Reason:</strong> @t.UnavailableReason</div>
                                    <div><strong>Since:</strong> @(t.DateUnavailable?.ToShortDateString() ?? "-")</div>
                                    <div><strong>ETA:</strong> @(t.EstimatedAvailableDate?.ToShortDateString() ?? "-")</div>
                                </div>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary js-edit" data-id="@t.Id">Edit</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex flex-wrap align-items-center justify-content-between gap-2 mt-2">
        <div id="invPageInfo" class="text-muted small"></div>
        <nav>
            <ul id="invPager" class="pagination pagination-sm mb-0"></ul>
        </nav>
    </div>


<!-- Reusable modal -->
<div class="modal fade" id="toolModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="toolModalTitle">Tool Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="toolModalBody"></div>
        </div>
    </div>
</div>


    <div class="modal fade" id="toolingHistoryModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xxl modal-dialog-scrollable">
            <div class="modal-content"></div>
        </div>
    </div>

@section Scripts {
    <script>
        (function () {
          const modalEl = document.getElementById('toolModal');
          const modal = new bootstrap.Modal(modalEl, { backdrop: 'static', keyboard: false });
          const body = document.getElementById('toolModalBody');
          const title = document.getElementById('toolModalTitle');
          const mainAsmInput = document.getElementById('quickAssembly');

          // Open CREATE (prefilled if main input has value)
          document.getElementById('btnAddForAssembly').addEventListener('click', async () => {
            const asm = (mainAsmInput?.value || '').trim();
            title.textContent = asm ? ('Add Tool — ' + asm) : 'Add Tool';
            const url = asm
              ? '@Url.Action("Create", "ToolingInventory")?assembly=' + encodeURIComponent(asm)
              : '@Url.Action("Create", "ToolingInventory")';
            await loadPartial(url);
            modal.show();
            body.querySelector('input[name="ToolNumber"]')?.focus();
          });

          // Open EDIT
          document.querySelectorAll('.js-edit').forEach(btn => {
            btn.addEventListener('click', async () => {
              const id = btn.dataset.id;
              title.textContent = 'Edit Tool';
              await loadPartial('@Url.Action("Edit", "ToolingInventory")?id=' + encodeURIComponent(id));
              modal.show();
            });
          });

          async function loadPartial(url) {
                        const r = await fetch(url, {
              credentials: 'same-origin',
              headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });

            if (!r.ok) { console.error('loadPartial failed', r.status); return; }
            body.innerHTML = await r.text();
            initDynamicBits();
          }

          // Delegated submit for Create + Edit
          body.addEventListener('submit', async (e) => {
            const form = e.target.closest('#toolItemForm');
            if (!form) return;
            e.preventDefault();

            // capture which button was clicked (mode)
            const submitter = e.submitter || document.activeElement;

            const fd = new FormData(form);
            if (submitter && submitter.name) {
              fd.append(submitter.name, submitter.value); // mode=add_more | add_clear
            }

            const r = await fetch(form.action, {
              method: 'POST',
              headers: { 'X-Requested-With': 'XMLHttpRequest' },
              body: fd
            });

            let data = null, isJson = false;
            try { data = await r.clone().json(); isJson = true; } catch {}

            if (isJson && data && data.ok) {
              // clear main page Assembly only when not add_more
              if (data.mode !== 'add_more' && mainAsmInput) mainAsmInput.value = '';

              if (data.mode === 'add_clear') {
                return swalOK(data.message, () => {
                  modal.hide();
                  location.reload();
                });
              }

              if (data.mode === 'add_more') {
                swalOK(data.message);
                const asm = (data.assembly || '').toString();
                const url = '@Url.Action("Create", "ToolingInventory")' + (asm ? ('?assembly=' + encodeURIComponent(asm)) : '');
                await loadPartial(url);
                title.textContent = asm ? ('Add Tool — ' + asm) : 'Add Tool';
                modal.show();
                const toolInput = body.querySelector('input[name="ToolNumber"]');
                toolInput?.focus(); toolInput?.select?.();
                return;
              }

              // EDIT path (no mode)
              return swalOK('Saved changes.', () => {
                modal.hide();
                location.reload();
              });
            }

            // Not JSON -> validation HTML
            const html = await r.text();
            body.innerHTML = html;
            initDynamicBits();
          });

          // Unavailable toggle
          body.addEventListener('change', (e) => {
            const select = e.target.closest('select[name="Status"]');
            if (!select) return;
            const form = select.closest('#toolItemForm');
            const box = form?.querySelector('[data-box="unavail"]');
            if (!box) return;
            const v = parseInt(select.value || '1', 10);
            box.style.display = (v === 2) ? '' : 'none'; // assumes Unavailable === 2
          });

          function initDynamicBits() {
            const form = body.querySelector('#toolItemForm');
            if (!form) return;
            const status = form.querySelector('[name="Status"]');
            const box = form.querySelector('[data-box="unavail"]');
            if (status && box) {
              const v = parseInt(status.value || '1', 10);
              box.style.display = (v === 2) ? '' : 'none';
            }
            // prevent submit buttons from dismissing the modal
            form.querySelectorAll('button[type="submit"]').forEach(b => b.removeAttribute('data-bs-dismiss'));
          }

          function swalOK(message, onClose) {
            if (window.Swal) {
              Swal.fire({ icon: 'success', title: 'Success', text: message, confirmButtonText: 'OK' })
                .then(() => { if (typeof onClose === 'function') onClose(); });
            } else {
              alert(message);
              if (typeof onClose === 'function') onClose();
            }
          }
        })();
    </script>
    <script>
                   document.addEventListener('click', async (e) => {
              const a = e.target.closest('a[data-bs-target="#toolingHistoryModal"]');
              if (!a) return;
              e.preventDefault();
              const url = a.getAttribute('href');

              const r = await fetch(url, {
                credentials: 'same-origin',
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
              });
              const html = await r.text();

              const modalEl = document.getElementById('toolingHistoryModal');
              modalEl.querySelector('.modal-content').innerHTML = html;   // inject fragment
              bootstrap.Modal.getOrCreateInstance(modalEl).show();
            });



        // Expand/collapse + lazy-load tool items
        document.addEventListener('click', async (e) => {
          const btn = e.target.closest('button[data-action="toggle-items"]');
          if (!btn) return;
          const group = btn.dataset.group;
          const row = document.getElementById(`row-items-${group}`);
          const icon = btn.querySelector('i');

          const expanded = btn.getAttribute('aria-expanded') === 'true';
          if (expanded) {
            btn.setAttribute('aria-expanded', 'false');
            row?.classList.add('d-none');
            icon?.classList.remove('rotate-90');
            return;
          }

          btn.setAttribute('aria-expanded', 'true');
          row?.classList.remove('d-none');
          icon?.classList.add('rotate-90');

          const container = row?.querySelector(`[data-items-container="${group}"]`);
          if (!container) return;
          if (container.dataset.loaded === '1') return;

          try {
            const url = '@Url.Action("ItemsTable", "ToolingHistory")' + '?groupID=' + encodeURIComponent(group);
            const res = await fetch(url, { credentials: 'same-origin' });
            const html = await res.text();
            container.innerHTML = html;
            container.dataset.loaded = '1';
          } catch (err) {
            container.innerHTML = `<div class="text-danger">Failed to load items: ${err?.message || 'Unknown error'}</div>`;
          }
        });

        // Optional: simple PO request handler (no SweetAlert here; reuse if you have it globally)
        document.addEventListener('submit', async (e) => {
          const form = e.target.closest('.request-po-form');
          if (!form) return;
          e.preventDefault();
          const btn = form.querySelector('button[type="submit"]');
          const prevDisabled = btn?.disabled;
          if (btn) btn.disabled = true;

          try {
            const res = await fetch(form.action, {
              method: 'POST',
              body: new FormData(form),
              credentials: 'same-origin'
            });
            const payload = await res.json().catch(() => ({}));
            if (!res.ok || !payload.ok) {
              alert(payload.error || 'PO request failed.');
              return;
            }
            alert('PO request sent.');
            location.reload();
          } catch (err) {
            alert('PO request failed: ' + (err?.message || 'Unknown error'));
          } finally {
            if (btn) btn.disabled = prevDisabled ?? false;
          }
        });
    </script>
        <script>
            (function () {
              const table = document.getElementById('tblInventory');
              if (!table) return;

              const tbody = table.querySelector('tbody');
              const rows = Array.from(tbody.querySelectorAll('tr'));
              const searchInput = document.getElementById('invSearch');
              const pageSizeSel = document.getElementById('invPageSize');
              const pager = document.getElementById('invPager');
              const pageInfo = document.getElementById('invPageInfo');

              let currentPage = 1;
              let pageSize = parseInt(pageSizeSel?.value || '25', 10);
              let filtered = rows;

              function normalize(s) { return (s || '').toString().toLowerCase(); }

              function applyFilter() {
                const q = normalize(searchInput?.value || '');
                if (!q) {
                  filtered = rows;
                } else {
                  filtered = rows.filter(tr => normalize(tr.innerText).includes(q));
                }
                currentPage = 1;
                render();
              }

              function getPageCount() {
                return Math.max(1, Math.ceil(filtered.length / pageSize));
              }

              function render() {
                // hide all rows first
                rows.forEach(tr => tr.style.display = 'none');

                // compute slice for current page
                const totalPages = getPageCount();
                if (currentPage > totalPages) currentPage = totalPages;

                const startIdx = (currentPage - 1) * pageSize;
                const endIdx = startIdx + pageSize;

                const pageRows = filtered.slice(startIdx, endIdx);
                pageRows.forEach(tr => tr.style.display = '');

                // page info
                const from = filtered.length ? startIdx + 1 : 0;
                const to = Math.min(endIdx, filtered.length);
                pageInfo.textContent = `Showing ${from}-${to} of ${filtered.length} record(s)`;

                // pager UI
                renderPager(totalPages);
              }

              function renderPager(totalPages) {
                pager.innerHTML = '';
                const ul = pager;

                function addItem(label, page, disabled = false, active = false) {
                  const li = document.createElement('li');
                  li.className = 'page-item' + (disabled ? ' disabled' : '') + (active ? ' active' : '');
                  const a = document.createElement('a');
                  a.className = 'page-link';
                  a.href = '#';
                  a.textContent = label;
                  if (!disabled && !active) {
                    a.addEventListener('click', (e) => { e.preventDefault(); currentPage = page; render(); });
                  }
                  li.appendChild(a);
                  ul.appendChild(li);
                }

                // Prev
                addItem('‹', Math.max(1, currentPage - 1), currentPage === 1, false);

                // Page numbers (compact: show first, last, and window around current)
                const windowSize = 2;
                const pages = [];
                for (let p = 1; p <= totalPages; p++) {
                  if (p === 1 || p === totalPages || (p >= currentPage - windowSize && p <= currentPage + windowSize)) {
                    pages.push(p);
                  }
                }
                // fill gaps with ellipses
                let prev = 0;
                pages.forEach(p => {
                  if (p - prev > 1) {
                    const li = document.createElement('li');
                    li.className = 'page-item disabled';
                    li.innerHTML = '<span class="page-link">…</span>';
                    ul.appendChild(li);
                  }
                  addItem(String(p), p, false, p === currentPage);
                  prev = p;
                });

                // Next
                addItem('›', Math.min(totalPages, currentPage + 1), currentPage === totalPages, false);
              }

              // debounce search
              let t = null;
              searchInput?.addEventListener('input', () => {
                clearTimeout(t);
                t = setTimeout(applyFilter, 150);
              });

              pageSizeSel?.addEventListener('change', () => {
                pageSize = parseInt(pageSizeSel.value, 10) || 25;
                currentPage = 1;
                render();
              });

              // initial render
              render();

              // If rows are added dynamically in the future, call applyFilter() again.
            })();
        </script>

    <style>
        .rotate-90 {
            transform: rotate(90deg);
            transition: transform .15s ease;
        }
    </style>
        <style>
            #toolingHistoryModal .modal-dialog {
                max-width: 95vw;
                width: 95vw;
            }

            #toolingHistoryModal .modal-body {
                max-height: 80vh;
                overflow: auto;
            }
        </style>

}
