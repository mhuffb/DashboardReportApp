@model DashboardReportApp.Models.DeviationIndexViewModel
@using System.Text.Json
<script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>

<div class="container-fluid px-3 mt-4">
    <h2 class="text-center mb-4">Deviations</h2>

    <!-- NEW: Add Request Button -->
    <div class="text-center mb-4">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRequestModal">
            Add Request
        </button>
    </div>

    <!-- Combined QR Codes -->
    <div class="row justify-content-center">
        <h8 class="text-center mb-4">
            You can upload pictures from your phone by connecting to wifi then viewing this page on your phone.
        </h8>
    </div>
    <div class="d-flex justify-content-evenly align-items-center mb-4">
        <!-- Wi‑Fi QR Code -->
        <div class="text-center">
            <canvas id="wifi-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">Connect to Wifi</div>
        </div>
        <!-- Current Page QR Code -->
        <div class="text-center">
            <canvas id="current-page-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">View on your device</div>
        </div>
    </div>

    <!-- (Existing Deviation Creation Form Removed) -->
</div>

<!-- Modal: Add Request -->
<div class="modal fade" id="addRequestModal" tabindex="-1" aria-labelledby="addRequestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRequestModalLabel">Add Deviation Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="Create" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="NewPart" class="form-label">Part</label>
                        <input type="text" class="form-control" id="NewPart" name="Part" required />
                    </div>
                    <div class="mb-3">
                        <label for="NewDiscrepancy" class="form-label">Discrepancy</label>
                        <textarea class="form-control" id="NewDiscrepancy" name="Discrepancy" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="NewOperator" class="form-label">Operator</label>
                        <select class="form-select" id="NewOperator" name="Operator" required>
                            <option value="">-- Select an Operator --</option>
                            @if (ViewData["Operators"] != null)
                            {
                                foreach (var operatorName in (List<string>)ViewData["Operators"])
                                {
                                    <option value="@operatorName">@operatorName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="NewCommMethod" class="form-label">Communication Method</label>
                        <select class="form-select" id="NewCommMethod" name="CommMethod" required>
                            <option value="">-- Select --</option>
                            <option value="Phone Call">Phone Call</option>
                            <option value="Text Message">Text Message</option>
                            <option value="Email">Email</option>
                            <option value="In Person">In Person</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="NewFile" class="form-label">Attach File (Optional)</label>
                        <input type="file" class="form-control" id="NewFile" name="file" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit Request</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Read-Only Table of Deviation Records -->
<div class="container-fluid px-3 mt-4">
    <h3 class="text-center mb-4">Deviation Records</h3>

    <!-- Filters for the records table: Search and Date Range with Clear Filters Button -->
    <div class="row mb-3 justify-content-center">
        <div class="col-auto">
            <input type="text" id="deviationSearchInput" class="form-control" placeholder="Search records..." style="max-width: 200px;" />
        </div>
        <div class="col-auto d-flex">
            <input type="date" id="deviationStartDate" class="form-control me-2" style="max-width: 150px;" />
            <input type="date" id="deviationEndDate" class="form-control" style="max-width: 150px;" />
        </div>
        <div class="col-auto">
            <button id="clearDeviationFilters" class="btn btn-secondary">Clear Filters</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="custom-table" style="width:100%; border-collapse:collapse;">
            <thead class="table-dark">
                <tr>
                    <th class="sortable" data-label="ID" style="width: 5%;">ID</th>
                    <th class="sortable" data-label="Part" style="width: 10%;">Part</th>
                    <th class="sortable" data-label="Sent Date" style="width: 10%;">Sent Date</th>
                    <th class="sortable" data-label="Discrepancy" style="width: 20%;">Discrepancy</th>
                    <th class="sortable" data-label="Operator" style="width: 10%;">Operator</th>
                    <th class="sortable" data-label="Comm Method" style="width: 10%;">Comm Method</th>
                    <th class="sortable" data-label="Disposition" style="width: 10%;">Disposition</th>
                    <th class="sortable" data-label="Approved By" style="width: 10%;">Approved By</th>
                    <th class="sortable" data-label="CAST Review" style="width: 10%;">CAST Review</th>
                    <th class="sortable" data-label="File 1" style="width: 10%;">File 1</th>
                    <th class="sortable" data-label="File 2" style="width: 10%;">File 2</th>
                    <th style="width: 8%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in Model.Records)
                {
                    <tr>
                        <td>@record.Id</td>
                        <td>@record.Part</td>
                        <td>@(record.SentDateTime?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@record.Discrepancy</td>
                        <td>@record.Operator</td>
                        <td>@record.CommMethod</td>
                        <td>@record.Disposition</td>
                        <td>@record.ApprovedBy</td>
                        <td>@(record.DateTimeCASTReview?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(record.FileAddress1))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-name="@record.FileAddress1">
                                    Preview 1
                                </button>

                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(record.FileAddress2))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-name="@record.FileAddress2">
                                    Preview 2
                                </button>
                            }
                        </td>
                        <td>
                            <!-- UPDATED: Clicking this button opens the file browser directly -->
                            <button type="button" class="btn btn-secondary btn-sm add-file-btn" data-id="@record.Id">
                                Add/Update File 1
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Hidden Form for Direct File Upload (replaces modal for file updates) -->
<form id="hiddenUpdateFileForm" asp-action="UpdateFile" method="post" enctype="multipart/form-data" style="display:none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" id="hiddenRecordId" value="" />
    <input type="file" name="file" id="hiddenFileInput" />
</form>

<!-- Bootstrap Modal for File Preview -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <iframe id="modalFile" class="w-100" style="height:500px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // QR Code Generation for Both QR Codes
        document.addEventListener('DOMContentLoaded', function () {
            var currentUrl = window.location.href;
            QRCode.toCanvas(document.getElementById('current-page-qr'), currentUrl, { width: 128 }, function (error) {
                if (error) console.error(error);
                else console.log("Current page QR code generated!");
            });
            var wifiData = `WIFI:T:WPA;S:Sintergy-WiFi;P:5intergyW1F1;;`;
            QRCode.toCanvas(document.getElementById('wifi-qr'), wifiData, { width: 128 }, function (error) {
                if (error) console.error(error);
                else console.log("Wi‑Fi QR code generated!");
            });
        });
    </script>

    <script>
        // Direct File Upload: Open file browser directly
        document.addEventListener("DOMContentLoaded", function () {
            const addFileButtons = document.querySelectorAll(".add-file-btn");
            const hiddenFileInput = document.getElementById("hiddenFileInput");
            const hiddenRecordId = document.getElementById("hiddenRecordId");
            const hiddenUpdateFileForm = document.getElementById("hiddenUpdateFileForm");

            addFileButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const recordId = button.getAttribute("data-id");
                    hiddenRecordId.value = recordId;
                    hiddenFileInput.click();
                });
            });

            hiddenFileInput.addEventListener("change", function () {
                if (hiddenFileInput.files.length > 0) {
                    hiddenUpdateFileForm.submit();
                }
            });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
          const modalEl = document.getElementById("imageModal");
          const modalImage = document.getElementById("modalImage");
          const modalFile  = document.getElementById("modalFile");
          const bsModal    = new bootstrap.Modal(modalEl);

          document.querySelectorAll(".fetch-image-btn").forEach(btn => {
            btn.addEventListener("click", () => {
              const name = btn.getAttribute("data-file-name");
              if (!name) { alert("No file name provided."); return; }

              fetch(`/Deviation/FetchFile?name=${encodeURIComponent(name)}`)
                .then(r => { if (!r.ok) throw new Error(); return r.json(); })
                .then(data => {
                  if (!data.success) { alert(`Error: ${data.message}`); return; }

                  const url = data.url;
                  modalImage.style.display = "none";
                  modalFile.style.display  = "none";

                  if (url.match(/\.(jpg|jpeg|png|gif|bmp|webp)(\?|$)/i)) {
                    modalImage.src = url;
                    modalImage.style.display = "block";
                  } else if (url.match(/\.pdf(\?|$)/i)) {
                    modalFile.src = url;
                    modalFile.style.display = "block";
                  } else {
                    alert("Unsupported file type.");
                    return;
                  }

                  bsModal.show();
                })
                .catch(() => alert("An error occurred while fetching the file."));
            });
          });

          modalEl.addEventListener("hidden.bs.modal", function () {
            modalImage.src = "";
            modalFile.src  = "";
          });
        });
    </script>

    <script>
        // Filtering & Sorting Logic for Deviation Records Table with Date Range Filtering and Clear Filters
        document.addEventListener("DOMContentLoaded", function () {
            let currentSortColumn = null;
            let currentSortDir = 'asc';
            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if (!th.dataset.label) {
                    th.dataset.label = th.innerText.trim();
                }
                th.addEventListener('click', () => {
                    if (currentSortColumn === index) {
                        currentSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSortColumn = index;
                        currentSortDir = 'asc';
                    }
                    updateTable();
                    updateSortIndicators();
                });
            });

            const searchInput = document.getElementById('deviationSearchInput');
            const startDateInput = document.getElementById('deviationStartDate');
            const endDateInput = document.getElementById('deviationEndDate');
            const clearBtn = document.getElementById('clearDeviationFilters');

            searchInput.addEventListener('input', updateTable);
            startDateInput.addEventListener('change', updateTable);
            endDateInput.addEventListener('change', updateTable);

            clearBtn.addEventListener('click', function () {
                searchInput.value = "";
                startDateInput.value = "";
                endDateInput.value = "";
                Array.from(tbody.querySelectorAll("tr")).forEach(row => row.style.display = "");
            });

            function updateTable() {
                const searchTerm = searchInput.value.toLowerCase();
                const startDateValue = startDateInput.value;
                const endDateValue = endDateInput.value;
                Array.from(tbody.querySelectorAll("tr")).forEach(row => {
                    let show = true;
                    // Search filter: Check entire row text
                    if (searchTerm && !row.textContent.toLowerCase().includes(searchTerm)) {
                        show = false;
                    }
                    // Date range filter (assuming Sent Date is in column index 2)
                    const dateCell = row.children[2];
                    if (dateCell && dateCell.textContent.trim()) {
                        const rowDate = new Date(dateCell.textContent.trim());
                        if (startDateValue) {
                            const startDate = new Date(startDateValue);
                            if (rowDate < startDate) show = false;
                        }
                        if (endDateValue) {
                            const endDate = new Date(endDateValue);
                            if (rowDate > endDate) show = false;
                        }
                    }
                    row.style.display = show ? "" : "none";
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label;
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }

            updateTable();
        });
    </script>
}
