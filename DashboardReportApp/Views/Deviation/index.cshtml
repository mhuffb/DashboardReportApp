@model DashboardReportApp.Models.DeviationIndexViewModel
@using System.Text.Json

<div class="container-fluid px-3 mt-4">
    <h2 class="text-center mb-4">Deviations</h2>

    <!-- Deviation Creation Form -->
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-body">
                    <h4 class="text-center mb-3">Create a New Deviation</h4>

                    <form asp-action="Create" method="post">
                        @Html.AntiForgeryToken()

                        <div class="mb-3">
                            <label for="Part" class="form-label">Part</label>
                            <input type="text" class="form-control" id="Part" name="Part" asp-for="FormModel.Part" required />
                            <span asp-validation-for="FormModel.Part" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label for="Discrepancy" class="form-label">Discrepancy</label>
                            <textarea class="form-control text-area-large" id="Discrepancy" name="Discrepancy" asp-for="FormModel.Discrepancy" required></textarea>
                            <span asp-validation-for="FormModel.Discrepancy" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label for="Operator" class="form-label">Operator</label>
                            <select class="form-select" id="Operator" name="Operator" asp-for="FormModel.Operator" required>
                                <option value="">-- Select an Operator --</option>
                                @if (ViewData["Operators"] != null)
                                {
                                    foreach (var operatorName in (List<string>)ViewData["Operators"])
                                    {
                                        <option value="@operatorName">@operatorName</option>
                                    }
                                }
                            </select>
                            <span asp-validation-for="FormModel.Operator" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label for="CommMethod" class="form-label">Communication Method</label>
                            <select class="form-select" id="CommMethod" name="CommMethod" asp-for="FormModel.CommMethod" required>
                                <option value="">-- Select --</option>
                                <option value="Phone Call">Phone Call</option>
                                <option value="Text Message">Text Message</option>
                                <option value="Email">Email</option>
                                <option value="In Person">In Person</option>
                            </select>
                            <span asp-validation-for="FormModel.CommMethod" class="text-danger"></span>
                        </div>

                        <button type="submit" class="btn btn-primary w-100"><i class="bi bi-send"></i> Submit Deviation</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Feedback Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mt-3 text-center" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3 text-center" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
</div>

<!-- Read-Only Table of Deviation Records -->
<div class="container-fluid px-3 mt-4">
    <h3 class="text-center mb-4">Deviation Records</h3>

    <!-- Filters for the records table -->
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" id="deviationSearchInput" class="form-control" placeholder="Search records..." />
        </div>
        <div class="col-md-6">
            <input type="date" id="deviationDateFilter" class="form-control" />
        </div>
    </div>

    <div class="table-responsive">
        <table class="custom-table" style="width:100%; border-collapse:collapse;">
            <thead class="table-dark">
                <tr>
                    <th class="sortable" data-label="ID" style="width: 5%;">ID</th>
                    <th class="sortable" data-label="Part" style="width: 10%;">Part</th>
                    <th class="sortable" data-label="Sent Date" style="width: 10%;">Sent Date</th>
                    <th class="sortable" data-label="Discrepancy" style="width: 20%;">Discrepancy</th>
                    <th class="sortable" data-label="Operator" style="width: 10%;">Operator</th>
                    <th class="sortable" data-label="Comm Method" style="width: 10%;">Comm Method</th>
                    <th class="sortable" data-label="Disposition" style="width: 10%;">Disposition</th>
                    <th class="sortable" data-label="Approved By" style="width: 10%;">Approved By</th>
                    <th class="sortable" data-label="CAST Review" style="width: 10%;">CAST Review</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in Model.Records)
                {
                    <tr>
                        <td>@record.Id</td>
                        <td>@record.Part</td>
                        <td>@(record.SentDateTime?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@record.Discrepancy</td>
                        <td>@record.Operator</td>
                        <td>@record.CommMethod</td>
                        <td>@record.Disposition</td>
                        <td>@record.ApprovedBy</td>
                        <td>@(record.DateTimeCASTReview?.ToString("yyyy-MM-dd") ?? "")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Optional: Bootstrap Modal for File Preview if needed -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" />
                <iframe id="modalFile" class="w-100" style="height:500px; display:none;"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // ----------------------------
            // File Preview Logic (if any deviation record includes a file)
            const imageModalElement = document.getElementById('imageModal');
            document.querySelectorAll('.fetch-image-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const filePath = this.dataset.filePath;
                    if (!filePath) {
                        console.error("File path is missing.");
                        alert("No file path provided.");
                        return;
                    }
                    fetch(`/MaintenanceRequest/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                        .then(response => {
                            if (!response.ok) throw new Error("Failed to fetch the image.");
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                const modalImage = document.getElementById('modalImage');
                                const modalFile = document.getElementById('modalFile');
                                if (data.url.match(/\.(jpg|jpeg|png|gif)$/i)) {
                                    modalImage.src = data.url;
                                    modalImage.style.display = "block";
                                    modalFile.style.display = "none";
                                } else {
                                    modalFile.src = data.url;
                                    modalFile.style.display = "block";
                                    modalImage.style.display = "none";
                                }
                                new bootstrap.Modal(imageModalElement).show();
                            } else {
                                alert(`Error: ${data.message}`);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching file:', error);
                            alert('An error occurred while fetching the file.');
                        });
                });
            });

            imageModalElement.addEventListener('hidden.bs.modal', function () {
                document.getElementById('modalImage').src = '';
                document.getElementById('modalFile').src = '';
            });

            // ----------------------------
            // Filtering and Sorting Logic for the Deviations Table

            let currentSortColumn = null;
            let currentSortDir = 'asc';
            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            // Attach click events to sortable headers
            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if (!th.dataset.label) {
                    th.dataset.label = th.innerText.trim();
                }
                th.addEventListener('click', () => {
                    if (currentSortColumn === index) {
                        currentSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSortColumn = index;
                        currentSortDir = 'asc';
                    }
                    updateTable();
                    updateSortIndicators();
                });
            });

            function updateTable() {
                const searchQuery = document.getElementById('deviationSearchInput').value.trim().toLowerCase();
                const selectedDate = document.getElementById('deviationDateFilter').value;
                let rows = Array.from(tbody.querySelectorAll('tr'));

                // Sorting
                if (currentSortColumn !== null) {
                    rows.sort((a, b) => {
                        const aCells = a.querySelectorAll('td');
                        const bCells = b.querySelectorAll('td');
                        const aText = aCells[currentSortColumn] ? aCells[currentSortColumn].innerText.trim() : '';
                        const bText = bCells[currentSortColumn] ? bCells[currentSortColumn].innerText.trim() : '';
                        const aNum = parseFloat(aText);
                        const bNum = parseFloat(bText);
                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return currentSortDir === 'asc' ? aNum - bNum : bNum - aNum;
                        } else {
                            return currentSortDir === 'asc' ? aText.localeCompare(bText) : bText.localeCompare(aText);
                        }
                    });
                }

                // Re-append sorted rows
                rows.forEach(row => tbody.appendChild(row));

                // Filtering: search and date
                rows.forEach(row => {
                    let show = true;
                    const cells = row.querySelectorAll('td');

                    // Search filter: check all cells
                    if (searchQuery) {
                        let found = false;
                        for (let i = 0; i < cells.length; i++) {
                            if (cells[i].innerText.toLowerCase().includes(searchQuery)) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) { show = false; }
                    }

                    // Date filter: assuming Sent Date is in column index 2 (ID:0, Part:1, Sent Date:2)
                    if (selectedDate) {
                        const dateCell = cells[2];
                        if (dateCell && dateCell.innerText.trim() !== selectedDate) {
                            show = false;
                        }
                    }

                    row.style.display = show ? '' : 'none';
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label;
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }

            document.getElementById('deviationSearchInput').addEventListener('input', updateTable);
            document.getElementById('deviationDateFilter').addEventListener('change', updateTable);
            updateTable();
        });
    </script>
}
