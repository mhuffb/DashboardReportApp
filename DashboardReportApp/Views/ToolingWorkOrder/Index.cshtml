@model DashboardReportApp.Models.ToolingHistoryModel
@inject IConfiguration Config

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Tooling Work Orders</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <!-- Global hidden anti-forgery token so JS can read it even if no visible form -->
    <form id="__afForm" class="d-none">@Html.AntiForgeryToken()</form>

    <!-- Centered Add button -->
    <div class="d-flex justify-content-center mb-3">
        <button id="btnAddToolWorkOrder" class="btn btn-success">
            <i class="bi bi-plus"></i> Add New Tool WorkOrder
        </button>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <!-- ====================== In Progress Tools ====================== -->
    <div class="table-responsive mb-4">
        <h3 class="mb-2">In Progress Tools</h3>
        <table class="table table-striped table-bordered shadow-sm w-100" id="tblInProgress">
            <thead class="table-dark">
                <tr>
                    <th style="width:48px;"></th>  <!-- expand -->
                    <th>Group</th>
                    <th>Assembly #</th>
                    <th>Reason</th>
                    <th>Vendor</th>
                    <th>Initiated</th>
                    <th>Due</th>
                    <th>Cost</th>
                    <th style="min-width:260px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.ToolingInProgress != null)
                {
                    foreach (DashboardReportApp.Models.ToolingHistoryModel item in ViewBag.ToolingInProgress)
                    {
                        var rowId = $"row-items-{item.GroupID}";
                        <tr data-group="@item.GroupID">
                            <td>
                                <button type="button"
                                        class="btn btn-sm btn-outline-secondary"
                                        data-action="toggle-items"
                                        data-group="@item.GroupID"
                                        aria-expanded="false"
                                        aria-controls="@rowId"
                                        title="Show tool items">
                                    <i class="bi bi-caret-right-fill"></i>
                                </button>
                            </td>
                            <td>@item.GroupID</td>
                            <td>@item.Part</td>
                            <td>@item.Reason</td>
                            <td>@item.ToolVendor</td>
                            <td>@item.DateInitiated.ToShortDateString()</td>
                            <td>@item.DateDue?.ToShortDateString()</td>
                            <td>@(item.Cost?.ToString("0.00"))</td>
                            <td class="d-flex flex-wrap gap-2">
                                <button class="btn btn-primary btn-sm" data-action="edit-workorder" data-id="@item.Id">Edit Tool Work Order</button>
                                <button class="btn btn-secondary btn-sm" data-action="tool-items" data-group="@item.GroupID">Add/Edit Tool Items</button>

                                @{
                                    bool hasPo = !string.IsNullOrWhiteSpace(item.PO);
                                    bool wasRequested = item.PoRequestedAt.HasValue;
                                    bool isInternal = string.Equals(item.ToolVendor, "Internal Toolroom", StringComparison.OrdinalIgnoreCase);
                                }

                                @if (isInternal)
                                {
                                    <form asp-action="RequestWorkOrder" method="post" class="request-wo-form d-inline-block">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@item.Id" />
                                        @{
                                            var btnText = wasRequested ? "WO was requested" : "Request Work Order";
                                            var btnClass = wasRequested ? "btn btn-secondary btn-sm" : "btn btn-info btn-sm";
                                            var disabledAttr = hasPo ? "disabled" : ""; // usually N/A for internal, but safe
                                        }
                                        <button type="submit" class="@btnClass" @disabledAttr>@btnText</button>
                                    </form>
                                }
                                else
                                {
                                    <form asp-action="RequestPoNumber" method="post" class="request-po-form d-inline-block">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@item.Id" />
                                        @{
                                            var btnText = hasPo ? $"PO sent: {item.PO}" : (wasRequested ? "PO was requested" : "Request PO #");
                                            var btnClass = hasPo ? "btn btn-success btn-sm" : (wasRequested ? "btn btn-secondary btn-sm" : "btn btn-warning btn-sm");
                                            var disabledAttr = hasPo ? "disabled" : "";
                                        }
                                        <button type="submit" class="@btnClass" @disabledAttr>@btnText</button>
                                    </form>
                                }


                                @{
                                    var reason = (item.Reason ?? string.Empty).Trim();
                                    var showPackingSlip = !reason.Equals("New Customer Purchase (5030)", StringComparison.OrdinalIgnoreCase);
                                }
                                @if (showPackingSlip)
                                {
                                    <a class="btn btn-outline-primary btn-sm"
                                       href="@Url.Action("GeneratePackingSlip", "ToolingWorkOrder", new { groupID = item.GroupID, email = true })"
                                       target="_blank" rel="noopener">
                                        Create Packing Slip
                                    </a>
                                }
                            </td>
                        </tr>
                        <tr id="@rowId" class="d-none">
                            <td></td>
                            <td colspan="8">
                                <div class="p-2 border rounded bg-light" data-items-container="@item.GroupID">
                                    <div class="text-muted">Loading...</div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- ====================== All Tooling Transactions ====================== -->
    <div class="table-responsive">
        <h3 class="mb-2">All Tooling Transactions</h3>
        <table class="table table-striped table-bordered shadow-sm w-100" id="tblAll">
            <thead class="table-dark">
                <tr>
                    <th>Group</th>
                    <th>Assembly #</th>
                    <th>Reason</th>
                    <th>Vendor</th>
                    <th>Initiated</th>
                    <th>Due</th>
                    <th>Received</th>
                    <th>Cost</th>
                    <th style="min-width:220px;">Actions</th>
                </tr>
                <!-- Per-column filter inputs -->
                <tr class="bg-light">
                    <th><input class="form-control form-control-sm" placeholder="Search group" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Search assembly" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Search reason" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Search vendor" /></th>
                    <th><input class="form-control form-control-sm" placeholder="yyyy-mm-dd" /></th>
                    <th><input class="form-control form-control-sm" placeholder="yyyy-mm-dd" /></th>
                    <th><input class="form-control form-control-sm" placeholder="yyyy-mm-dd" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Cost" /></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.ToolingAll != null)
                {
                    foreach (DashboardReportApp.Models.ToolingHistoryModel item in ViewBag.ToolingAll)
                    {
                        var reason = (item.Reason ?? string.Empty).Trim();
                        var showPackingSlip = !reason.Equals("New Customer Purchase (5030)", StringComparison.OrdinalIgnoreCase);

                        <tr>
                            <td>@item.GroupID</td>
                            <td>@item.Part</td>
                            <td>@item.Reason</td>
                            <td>@item.ToolVendor</td>
                            <td>@item.DateInitiated.ToShortDateString()</td>
                            <td>@item.DateDue?.ToShortDateString()</td>
                            <td>@item.DateReceived?.ToShortDateString()</td>
                            <td>@(item.Cost?.ToString("0.00"))</td>
                            <td class="d-flex flex-wrap gap-2">
                                <button class="btn btn-primary btn-sm" data-action="edit-workorder" data-id="@item.Id">Edit</button>
                                <button class="btn btn-secondary btn-sm" data-action="tool-items" data-group="@item.GroupID">Items</button>

                                @{
                                    bool hasPo = !string.IsNullOrWhiteSpace(item.PO);
                                    bool wasRequested = item.PoRequestedAt.HasValue;
                                    bool isInternal = string.Equals(item.ToolVendor, "Internal Toolroom", StringComparison.OrdinalIgnoreCase);
                                }

                                @if (isInternal)
                                {
                                    <form asp-action="RequestWorkOrder" method="post" class="request-wo-form d-inline-block">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@item.Id" />
                                        @{
                                            var btnText = wasRequested ? "WO was requested" : "Request Work Order";
                                            var btnClass = wasRequested ? "btn btn-secondary btn-sm" : "btn btn-info btn-sm";
                                            var disabledAttr = hasPo ? "disabled" : ""; // usually N/A for internal, but safe
                                        }
                                        <button type="submit" class="@btnClass" @disabledAttr>@btnText</button>
                                    </form>
                                }
                                else
                                {
                                    <form asp-action="RequestPoNumber" method="post" class="request-po-form d-inline-block">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@item.Id" />
                                        @{
                                            var btnText = hasPo ? $"PO sent: {item.PO}" : (wasRequested ? "PO was requested" : "Request PO #");
                                            var btnClass = hasPo ? "btn btn-success btn-sm" : (wasRequested ? "btn btn-secondary btn-sm" : "btn btn-warning btn-sm");
                                            var disabledAttr = hasPo ? "disabled" : "";
                                        }
                                        <button type="submit" class="@btnClass" @disabledAttr>@btnText</button>
                                    </form>
                                }


                                @if (showPackingSlip)
                                {
                                    <a class="btn btn-outline-primary btn-sm"
                                       href="@Url.Action("GeneratePackingSlip", "ToolingWorkOrder", new { groupID = item.GroupID, email = true })"
                                       target="_blank" rel="noopener">
                                        Packing Slip
                                    </a>
                                }
                                else
                                {
                                    <span class="btn btn-outline-primary btn-sm disabled" style="visibility:hidden;">Packing Slip</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

</div>

<!-- EXTRA-WIDE modal -->
<style>
    #appModal .modal-dialog {
        max-width: 95vw;
    }
</style>
<div class="modal fade" id="appModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xxl modal-dialog-scrollable">
        <div class="modal-content"></div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // --- SweetAlert helpers (no auto-dismiss) ---
        async function alertOK(title, text, icon) {
          return Swal.fire({
            title, text, icon,
            allowOutsideClick: false,
            allowEscapeKey: true,
            showConfirmButton: true,
            confirmButtonText: 'OK'
          });
        }
        async function alertErr(title, text) { return alertOK(title, text, 'error'); }
        async function alertWarn(title, text) { return alertOK(title, text, 'warning'); }
        async function alertSuc(title, text) { return alertOK(title, text, 'success'); }

        // --- antiforgery token helper ---
        function getPageAntiforgeryToken() {
          const input = document.querySelector('#__afForm input[name="__RequestVerificationToken"]');
          return input ? input.value : '';
        }

        // --- modal plumbing ---
        const modalEl = document.getElementById('appModal');
        const modal   = new bootstrap.Modal(modalEl);

                        async function loadModal(url) {
          try {
            const res = await fetch(url, {
              credentials: 'same-origin',
              headers: { 'X-Requested-With': 'XMLHttpRequest' }   // tell server it's AJAX
            });
            const html = await res.text();                         // read ONCE
            if (!res.ok) {
              await alertErr('Failed to load', html.slice(0, 600) || res.statusText);
              return;
            }
            modalEl.querySelector('.modal-content').innerHTML = html;
            modal.show();
          } catch (err) {
            await alertErr('Network error', err?.message || 'Unexpected error');
          }
        }



        // --- open modals ---
        document.getElementById('btnAddToolWorkOrder')?.addEventListener('click', () => {
          loadModal('@Url.Action("EditToolingWorkOrderModal", "ToolingWorkOrder")');
        });

        document.addEventListener('click', (e) => {
          const btn = e.target.closest('button');
          if (!btn) return;

          if (btn.dataset.action === 'edit-workorder') {
            const id = btn.dataset.id;
            loadModal('@Url.Action("EditToolingWorkOrderModal", "ToolingWorkOrder")' + '?id=' + id);
          }

          if (btn.dataset.action === 'tool-items') {
            const groupId = btn.dataset.group;
            loadModal('@Url.Action("ToolItemsModal", "ToolingWorkOrder")' + '?groupID=' + groupId);
          }
        });



        // --- SINGLE handler for all modal form posts ---
              if (!window._appModalSubmitWired) {
          document.getElementById('appModal')?.addEventListener('submit', async (e) => {
            const form = e.target;
            if (!form || !['toolWorkOrderForm','addItemForm','saveAllForm'].includes(form.id)) return;

            e.preventDefault();

            const btn = form.querySelector('[type="submit"]');
            const prevHtml = btn?.innerHTML;
            if (btn) { btn.disabled = true; btn.innerHTML = 'Saving...'; }

            try {
              const res = await fetch(form.action, {
                method: 'POST',
                credentials: 'same-origin',
                headers: { 'X-Requested-With': 'XMLHttpRequest' },  // key for server branching
                body: new FormData(form)                             // includes the hidden __RequestVerificationToken
              });

              const ct = res.headers.get('content-type') || '';

              // Work-order save: JSON on success, HTML partial on validation
              if (form.id === 'toolWorkOrderForm') {
                if (ct.includes('application/json')) {
                  const data = await res.json();
                  if (data.ok) {
                    await alertSuc('Saved', data.message || 'Work order saved.');
                    bootstrap.Modal.getOrCreateInstance(document.getElementById('appModal')).hide();
                    location.reload();
                    return;
                  }
                  await alertErr('Save failed', data.error || 'Could not save.');
                  return;
                }
                const html = await res.text();
                document.querySelector('#appModal .modal-content').innerHTML = html;
                await alertWarn('Validation', 'Please fix the highlighted errors.');
                return;
              }

              // Tool items (add / save-all): always return HTML partial to rehydrate modal on success/validation
              if (ct.includes('text/html')) {
                const html = await res.text();
                document.querySelector('#appModal .modal-content').innerHTML = html;
                if (res.ok) {
                  if (form.id === 'addItemForm') await alertSuc('Added', 'Tool item added.');
                  if (form.id === 'saveAllForm') await alertSuc('Saved', 'All tool items saved.');
                }
                return;
              }

              // Fallbacks
              if (!res.ok) {
                const t = await res.text().catch(()=>res.statusText);
                await alertErr('Action failed', (t || res.statusText).slice(0,600));
                return;
              }
              const html = await res.text();
              document.querySelector('#appModal .modal-content').innerHTML = html;

            } catch (err) {
              await alertErr('Error', err?.message || 'Unexpected error.');
            } finally {
              if (btn) { btn.disabled = false; btn.innerHTML = prevHtml; }
            }
          });
          window._appModalSubmitWired = true;
        }


        // --- PO request handler (SweetAlert only; exactly one handler) ---
                   document.addEventListener('submit', async (e) => {
          const form = e.target;

          // ----- PO -----
          if (form.classList.contains('request-po-form')) {
            e.preventDefault();
            const btn = form.querySelector('button[type="submit"]');
            const prevDisabled = btn?.disabled; if (btn) btn.disabled = true;

            try {
                      const res = await fetch(form.action, {
          method: 'POST',
          headers: {
            'X-Requested-With': 'XMLHttpRequest',              // <-- add
            'RequestVerificationToken': getPageAntiforgeryToken()
          },
          body: new FormData(form),
          credentials: 'same-origin'
        });
              const payload = await res.json();

              if (payload.ok) {
                await alertSuc('Sent', 'PO request email sent.');
                // OPTIONAL: close modal if open
                // bootstrap.Modal.getInstance(document.getElementById('appModal'))?.hide();
                location.reload();   // <-- put it here
                return;
              }
              await alertErr('PO request failed', payload.error || 'Unknown error');
            } finally {
              if (btn) btn.disabled = prevDisabled ?? false;
            }
            return;
          }

          // ----- WORK ORDER (Internal Toolroom) -----
          if (form.classList.contains('request-wo-form')) {
            e.preventDefault();
            const btn = form.querySelector('button[type="submit"]');
            const prevDisabled = btn?.disabled; if (btn) btn.disabled = true;

            try {
                      const res = await fetch(form.action, {
          method: 'POST',
          headers: {
            'X-Requested-With': 'XMLHttpRequest',              // <-- add
            'RequestVerificationToken': getPageAntiforgeryToken()
          },
          body: new FormData(form),
          credentials: 'same-origin'
        });
              const payload = await res.json();

              if (payload.ok) {
                await alertSuc('Sent', 'Work order request email sent.');
                // OPTIONAL: close modal if open
                // bootstrap.Modal.getInstance(document.getElementById('appModal'))?.hide();
                location.reload();   // <-- and here
                return;
              }
              await alertErr('Work order request failed', payload.error || 'Unknown error');
            } finally {
              if (btn) btn.disabled = prevDisabled ?? false;
            }
          }
        });

    </script>
    <style>
        /* optional: rotate chevron on expand */
        .rotate-90 {
            transform: rotate(90deg);
            transition: transform .15s ease;
        }
    </style>

    <script>
        // Expand/collapse + lazy-load per group
        document.addEventListener('click', async (e) => {
          const btn = e.target.closest('button[data-action="toggle-items"]');
          if (!btn) return;

          const group = btn.dataset.group;
          const row = document.getElementById(`row-items-${group}`);
          const icon = btn.querySelector('i');

          const expanded = btn.getAttribute('aria-expanded') === 'true';
          if (expanded) {
            // collapse
            btn.setAttribute('aria-expanded', 'false');
            row?.classList.add('d-none');
            icon?.classList.remove('rotate-90');
            return;
          }

          // expand (and load if needed)
          btn.setAttribute('aria-expanded', 'true');
          row?.classList.remove('d-none');
          icon?.classList.add('rotate-90');

          const container = row?.querySelector(`[data-items-container="${group}"]`);
          if (!container) return;

          // Load only once
          if (container.dataset.loaded === '1') return;

          try {
            const url = '@Url.Action("ItemsTable", "ToolingWorkOrder")' + '?groupID=' + encodeURIComponent(group);
            const res = await fetch(url, { credentials: 'same-origin' });
            const html = await res.text();
            container.innerHTML = html;
            container.dataset.loaded = '1';
          } catch (err) {
            container.innerHTML = `<div class="text-danger">Failed to load items: ${err?.message || 'Unknown error'}</div>`;
          }
        });
    </script>
    <!-- DataTables (Bootstrap 5 build) -->
    <link href="https://cdn.datatables.net/v/bs5/dt-2.0.8/datatables.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/v/bs5/dt-2.0.8/datatables.min.js"></script>

    <script>
        // Initialize the big "All Tooling Transactions" table
        $(function () {
          // Move the filter row into thead as DataTables expects (already there)
          const table = $('#tblAll').DataTable({
            pageLength: 25,
            lengthMenu: [10, 25, 50, 100],
            order: [[0, 'desc']], // default sort by Group desc
            stateSave: true,
            autoWidth: false
          });

          // Hook up per-column inputs (second header row)
          $('#tblAll thead tr:eq(1) th').each(function (i) {
            const $input = $('input', this);
            if (!$input.length) return;
            $input.on('keyup change', function () {
              table.column(i).search(this.value).draw();
            });
          });
        });
    </script>
    <script>
        // Reusable confirm dialog
        async function confirmDelete(title = 'Delete this tool item?', text = 'This cannot be undone.') {
          const res = await Swal.fire({
            title,
            text,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Delete',
            cancelButtonText: 'Cancel',
            reverseButtons: true,
            focusCancel: true
          });
          return res.isConfirmed;
        }

        // One-time delegated listener
        if (!window._toolItemsDeleteWired) {
          document.addEventListener('click', (e) => {
            const btn = e.target.closest('[data-action="delete-tool-item"]');
            if (btn) { e.preventDefault(); window.deleteToolItem(btn); }
          });
          window._toolItemsDeleteWired = true;
        }

        // Global delete handler with SweetAlert
        window.deleteToolItem = async function(buttonEl) {
          const row = buttonEl.closest('tr');

          // Prefer data attrs; fallback to hidden inputs in the modal form
          const id = row?.dataset?.itemId || row.querySelector('input[name$=".Id"]')?.value;
          const groupID = row?.dataset?.groupId
                       || row.querySelector('input[name$=".GroupID"]')?.value
                       || document.querySelector('#saveAllForm input[name="GroupID"]')?.value;

          if (!id || !groupID) {
            await Swal.fire({ icon: 'error', title: 'Missing info', text: 'Could not determine item/group to delete.' });
            return;
          }

          // SweetAlert confirm
          const ok = await confirmDelete();
          if (!ok) return;

          // Show loading while deleting
          Swal.fire({
            title: 'Deleting…',
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => Swal.showLoading()
          });

          const token =
            document.querySelector('#appModal input[name="__RequestVerificationToken"]')?.value ||
            document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';

          const form = new FormData();
          form.append('__RequestVerificationToken', token);
          form.append('id', id);
          form.append('groupID', groupID);

          const inModal = !!row.closest('#appModal');

          try {
            // 1) Delete
            const res = await fetch('/ToolingWorkOrder/DeleteToolItemAjax', {
              method: 'POST',
              headers: { 'RequestVerificationToken': token },
              body: form,
              credentials: 'same-origin'
            });

            const payload = await res.text();

            if (!res.ok) {
              Swal.fire({ icon: 'error', title: 'Delete failed', html: `<pre style="text-align:left;white-space:pre-wrap">${(payload || res.statusText).slice(0,600)}</pre>` });
              return;
            }

            // 2) Refresh UI
            if (inModal) {
              // Refresh the entire modal so all indices & validations stay correct
              const url = '/ToolingWorkOrder/ToolItemsModal?groupID=' + encodeURIComponent(groupID);
              const r2 = await fetch(url, { credentials: 'same-origin' });
              const html2 = await r2.text();
              const modalContent = document.querySelector('#appModal .modal-content');
              if (modalContent) modalContent.innerHTML = html2;
            } else {
              // Inline expando: payload is the updated _ToolItemsInlineTable
              const inlineContainer = row.closest('[data-items-container]')
                                   || document.querySelector(`[data-items-container="${groupID}"]`);
              if (inlineContainer) inlineContainer.innerHTML = payload;
            }

            // 3) Success toast
            Swal.fire({ icon: 'success', title: 'Deleted', timer: 1200, showConfirmButton: false });

          } catch (e) {
            Swal.fire({ icon: 'error', title: 'Network error', text: e?.message || 'Unexpected error' });
          }
        };
    </script>



}

