@model DashboardReportApp.Models.HoldTagIndexViewModel
@using System.Text.Json
<script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
<h1 class="text-center mb-4">Hold Tag</h1>

<!-- NEW: Add Request Button -->
<div class="text-center mb-4">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRequestModal">
        Add Request
    </button>
</div>

<div class="container-fluid px-3 mt-4">
    <!-- Instructional Message -->
    <div class="row justify-content-center">
        <h8 class="text-center mb-4">You can upload pictures from your phone by connecting to wifi then viewing this page on your phone.</h8>
    </div>

    <!-- QR Codes and Immediate Assistance Card in one row -->
    <div class="d-flex justify-content-evenly align-items-center mb-4 flex-wrap">
        <!-- Wi‑Fi QR Code -->
        <div class="text-center mb-3">
            <canvas id="wifi-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">Connect to Wifi</div>
        </div>

        <!-- Immediate Assistance Card -->
        <div class="card shadow mb-3" style="max-width: 300px;">
            <div class="card-body p-2">
                <p class="text-center mb-2" style="font-size: 0.9rem;">
                    For immediate assistance, call/text until you get an answer:
                </p>
                <ul class="list-group" style="font-size: 0.8rem;">
                    <li class="list-group-item p-1">Tom Grieneisen 814-591-2704</li>
                    <li class="list-group-item p-1">Chico Almendarez 814-541-1181</li>
                    <li class="list-group-item p-1">Roy Seltzer 814-335-7239</li>
                    <li class="list-group-item p-1">Roger Jones 814-939-9412</li>
                </ul>
            </div>
        </div>

        <!-- Current Page QR Code -->
        <div class="text-center mb-3">
            <canvas id="current-page-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">View on your device</div>
        </div>
    </div>
</div>

<!-- READ-ONLY TABLE OF HOLD TAG RECORDS -->
<div class="container-fluid px-3 mt-4">
    <h2 class="text-center mb-4">Hold Tag Records</h2>
    <!-- Filters for the table -->
    <div class="row mb-3 justify-content-center">
        <div class="col-auto">
            <input type="text" id="recordSearchInput" class="form-control" placeholder="Search records..." style="max-width: 200px;" />
        </div>
        <div class="col-auto d-flex">
            <input type="date" id="recordStartDate" class="form-control me-2" style="max-width: 150px;" />
            <input type="date" id="recordEndDate" class="form-control" style="max-width: 150px;" />
        </div>
        <div class="col-auto">
            <button id="clearFilters" class="btn btn-secondary">Clear Filters</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="custom-table" style="width:100%; border-collapse:collapse;">
            <thead class="table-dark">
                <tr>
                    <th class="sortable" data-label="ID" style="width: 3%;">ID</th>
                    <th class="sortable" data-label="Part" style="width: 7%;">Part</th>
                    <th class="sortable" data-label="Discrepancy" style="width: 10%;">Discrepancy</th>
                    <th class="sortable" data-label="Date" style="width: 7%;">Date</th>
                    <th class="sortable" data-label="Issued By" style="width: 7%;">Issued By</th>
                    <th class="sortable" data-label="Disposition" style="width: 10%;">Disposition</th>
                    <th class="sortable" data-label="Disposition By" style="width: 6%;">Disposition By</th>
                    <th class="sortable" data-label="Rework Instructions" style="width: 10%;">Rework Instructions</th>
                    <th class="sortable" data-label="Rework Instr By" style="width: 7%;">Rework Instr By</th>
                    <th class="sortable" data-label="Quantity" style="width: 4%;">Quantity</th>
                    <th class="sortable" data-label="Unit" style="width: 7%;">Unit</th>
                    <th class="sortable" data-label="Pcs Scrapped" style="width: 4%;">Pcs Scrapped</th>
                    <th class="sortable" data-label="Date Completed" style="width: 7%;">Date Completed</th>
                    <th class="sortable" data-label="File1" style="width: 5%;">File 1</th>
                    <th class="sortable" data-label="File2" style="width: 5%;">File 2</th>
                    <th style="width: 6%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in Model.Records)
                {
                    <tr>
                        <td>@record.Id</td>
                        <td>@record.Part</td>
                        <td>@record.Discrepancy</td>
                        <td>@(record.Date?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@record.IssuedBy</td>
                        <td>@record.Disposition</td>
                        <td>@record.DispositionBy</td>
                        <td>@record.ReworkInstr</td>
                        <td>@record.ReworkInstrBy</td>
                        <td>@record.Quantity</td>
                        <td>@record.Unit</td>
                        <td>@record.PcsScrapped</td>
                        <td>@(record.DateCompleted?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(record.FileAddress1))
                            {
                                <button type="button"
                                        class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-path="@record.FileAddress1">
                                    Preview 1
                                </button>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(record.FileAddress2))
                            {
                                <button type="button"
                                        class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-path="@record.FileAddress2">
                                    Preview 2
                                </button>
                            }
                        </td>
                        <td>
                            <!-- UPDATED: Instead of showing a modal, this button now triggers a hidden file input -->
                            <button type="button"
                                    class="btn btn-secondary btn-sm add-file-btn"
                                    data-id="@record.Id">
                                Add / Update File1
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal for "Add Request" -->
<!-- NEW: Modal for "Add Request" -->
<div class="modal fade" id="addRequestModal" tabindex="-1" aria-labelledby="addRequestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRequestModalLabel">Add Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="Submit" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <!-- PART -->
                    <div class="mb-3">
                        <label for="ModalPartDropdown" class="form-label">Part</label>
                        <select id="ModalPartDropdown" class="form-control">
                            <option value="">-- Select or Enter Part --</option>
                            @foreach (var part in (ViewData["Parts"] as List<string>) ?? new List<string>())
                            {
                                <option value="@part">@part</option>
                            }
                        </select>
                        <input type="text" id="ModalCustomPartInput" name="Part" class="form-control mt-2" placeholder="Type a custom part number if not listed" />
                        <span asp-validation-for="FormModel.Part" class="text-danger"></span>
                    </div>
                    <!-- OPERATOR -->
                    <div class="mb-3">
                        <label for="ModalIssuedBy" class="form-label">Issued By (Operator)</label>
                        <select id="ModalIssuedBy" name="IssuedBy" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewData["Operators"] is List<string> opList1)
                            {
                                foreach (var op in opList1)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                        <span asp-validation-for="FormModel.IssuedBy" class="text-danger"></span>
                    </div>
                    <!-- DISCREPANCY -->
                    <div class="mb-3">
                        <label for="ModalDiscrepancy" class="form-label">Discrepancy</label>
                        <textarea id="ModalDiscrepancy" name="Discrepancy" class="form-control text-area-large" required></textarea>
                        <span asp-validation-for="FormModel.Discrepancy" class="text-danger"></span>
                    </div>
                    <!-- QUANTITY -->
                    <div class="mb-3">
                        <label for="ModalQuantity" class="form-label">Quantity</label>
                        <input type="number" id="ModalQuantity" name="Quantity" class="form-control" required />
                        <span asp-validation-for="FormModel.Quantity" class="text-danger"></span>
                    </div>
                    <!-- UNIT -->
                    <div class="mb-3">
                        <label for="ModalUnit" class="form-label">Unit</label>
                        <select id="ModalUnit" name="Unit" class="form-control">
                            <option value="skid" data-singular="skid" data-plural="skids">Skid</option>
                            <option value="tray" data-singular="tray" data-plural="trays">Tray</option>
                            <option value="tote" data-singular="tote" data-plural="totes">Tote</option>
                            <option value="barrel" data-singular="barrel" data-plural="barrels">Barrel</option>
                            <option value="pc" data-singular="pc" data-plural="pcs">Pc</option>
                        </select>
                        <span asp-validation-for="FormModel.Unit" class="text-danger"></span>
                    </div>
                    <!-- File Upload -->
                    <div class="mb-3">
                        <label for="ModalFile" class="form-label">Attach File (Optional)</label>
                        <input type="file" name="file" id="ModalFile" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit Request</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- NEW: Hidden Form for Direct File Upload (replaces the modal for Add/Update File1) -->
<form id="hiddenUpdateFileForm" asp-action="UpdateFile" method="post" enctype="multipart/form-data" style="display:none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="id" id="hiddenRecordId" value="" />
    <input type="file" name="file" id="hiddenFileInput" />
</form>

<!-- Bootstrap Modal for File Preview -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <iframe id="modalFile" class="w-100" style="height:500px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Copy selected part from the dropdown into the text input for the main form
        document.addEventListener('DOMContentLoaded', function () {
            const partDropdown = document.getElementById('PartDropdown');
            const customPartInput = document.getElementById('CustomPartInput');
            partDropdown.addEventListener('change', () => {
                customPartInput.value = partDropdown.value;
            });
        });
    </script>

    <!-- QR Code Generation for Both QR Codes -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Generate QR code for the current page
            var currentUrl = window.location.href;
            QRCode.toCanvas(document.getElementById('current-page-qr'), currentUrl, {
                width: 128
            }, function (error) {
                if (error) {
                    console.error(error);
                } else {
                    console.log("Current page QR code generated!");
                }
            });

            // Generate QR code for Wi‑Fi connection
            var wifiData = `WIFI:T:WPA;S:Sintergy-WiFi;P:5intergyW1F1;;`;
            QRCode.toCanvas(document.getElementById('wifi-qr'), wifiData, {
                width: 128
            }, function (error) {
                if (error) {
                    console.error(error);
                } else {
                    console.log("Wi‑Fi QR code generated!");
                }
            });
        });
    </script>

    <!-- Table Filtering and Sorting Scripts -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("recordSearchInput");
            const startDateInput = document.getElementById("recordStartDate");
            const endDateInput = document.getElementById("recordEndDate");
            const clearBtn = document.getElementById("clearFilters");
            const table = document.querySelector(".custom-table tbody");
            const rows = Array.from(table.querySelectorAll("tr"));
            const headers = document.querySelectorAll(".sortable");

            // SEARCH FUNCTION
            searchInput.addEventListener("keyup", function () {
                const searchTerm = searchInput.value.toLowerCase();
                rows.forEach(row => {
                    const rowText = row.textContent.toLowerCase();
                    row.style.display = rowText.includes(searchTerm) ? "" : "none";
                });
            });

            // DATE FILTER FUNCTION: Filter rows between start and end dates
            function filterByDate() {
                const startDateValue = startDateInput.value;
                const endDateValue = endDateInput.value;
                rows.forEach(row => {
                    const dateCell = row.children[3]; // Assuming Date is in the 4th column (index 3)
                    const rowDateStr = dateCell.textContent.trim();
                    if (rowDateStr === "") {
                        row.style.display = "";
                        return;
                    }
                    const rowDate = new Date(rowDateStr);
                    let showRow = true;
                    if (startDateValue) {
                        const startDate = new Date(startDateValue);
                        if (rowDate < startDate) {
                            showRow = false;
                        }
                    }
                    if (endDateValue) {
                        const endDate = new Date(endDateValue);
                        if (rowDate > endDate) {
                            showRow = false;
                        }
                    }
                    row.style.display = showRow ? "" : "none";
                });
            }
            startDateInput.addEventListener("change", filterByDate);
            endDateInput.addEventListener("change", filterByDate);

            // Clear Filters Button
            clearBtn.addEventListener("click", function () {
                searchInput.value = "";
                startDateInput.value = "";
                endDateInput.value = "";
                rows.forEach(row => row.style.display = "");
            });

            // SORTING FUNCTION
            headers.forEach((header, index) => {
                header.addEventListener("click", function () {
                    const order = header.dataset.order = -(header.dataset.order || -1);
                    const type = header.dataset.label;

                    rows.sort((rowA, rowB) => {
                        const cellA = rowA.children[index].textContent.trim();
                        const cellB = rowB.children[index].textContent.trim();

                        if (type === "Date") {
                            return order * (new Date(cellA) - new Date(cellB));
                        } else if (!isNaN(cellA) && !isNaN(cellB)) {
                            return order * (Number(cellA) - Number(cellB));
                        } else {
                            return order * cellA.localeCompare(cellB);
                        }
                    });

                    table.innerHTML = "";
                    rows.forEach(row => table.appendChild(row));
                });
            });
        });
    </script>

    <!-- NEW: Direct file upload script for "Add / Update File1" -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const addFileButtons = document.querySelectorAll(".add-file-btn");
            const hiddenFileInput = document.getElementById("hiddenFileInput");
            const hiddenRecordId = document.getElementById("hiddenRecordId");
            const hiddenUpdateFileForm = document.getElementById("hiddenUpdateFileForm");

            addFileButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const recordId = button.getAttribute("data-id");
                    hiddenRecordId.value = recordId; // Set the record id in the hidden form
                    hiddenFileInput.click(); // Directly open the file browser
                });
            });

            hiddenFileInput.addEventListener("change", function () {
                if (hiddenFileInput.files.length > 0) {
                    hiddenUpdateFileForm.submit(); // Auto-submit the form once a file is selected
                }
            });
        });
    </script>

    <!-- Copy selected part for the Add Request modal -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const modalPartDropdown = document.getElementById('ModalPartDropdown');
            const modalCustomPartInput = document.getElementById('ModalCustomPartInput');
            modalPartDropdown.addEventListener('change', () => {
                modalCustomPartInput.value = modalPartDropdown.value;
            });
        });
    </script>

    <!-- File Preview Script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const previewButtons = document.querySelectorAll(".fetch-image-btn");
            const modal = new bootstrap.Modal(document.getElementById("imageModal"));
            const modalImage = document.getElementById("modalImage");
            const modalFile = document.getElementById("modalFile");

            previewButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const filePath = button.getAttribute("data-file-path");
                    if (!filePath) {
                        alert("File not found.");
                        return;
                    }

                    // Call the endpoint to fetch the image URL
                    fetch(`/HoldTag/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error("Failed to fetch the file.");
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (!data.success) {
                                alert(`Error: ${data.message}`);
                                return;
                            }

                            const previewUrl = data.url;
                            // Determine file type based on the original file path extension
                            const fileExtension = filePath.split('.').pop().toLowerCase();

                            // Hide both elements before showing the proper one
                            modalImage.style.display = "none";
                            modalFile.style.display = "none";

                            if (["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(fileExtension)) {
                                modalImage.src = previewUrl;
                                modalImage.style.display = "block";
                            } else if (fileExtension === "pdf") {
                                modalFile.src = previewUrl;
                                modalFile.style.display = "block";
                            } else {
                                alert("Unsupported file type.");
                                return;
                            }
                            modal.show();
                        })
                        .catch(error => {
                            console.error("Error fetching file:", error);
                            alert("An error occurred while fetching the file.");
                        });
                });
            });

            // Reset the modal content on close
            document.getElementById("imageModal").addEventListener("hidden.bs.modal", function () {
                modalImage.src = "";
                modalFile.src = "";
            });
        });
    </script>
    <script>
document.addEventListener("DOMContentLoaded", function() {
    const quantityInput = document.getElementById("ModalQuantity");
    const unitSelect = document.getElementById("ModalUnit");

    function updateUnitOptions() {
        const quantity = parseInt(quantityInput.value, 10);
        const isPlural = !isNaN(quantity) && quantity > 1;
        // Update each option's text based on its data attributes
        for (let option of unitSelect.options) {
            const singular = option.getAttribute("data-singular");
            const plural = option.getAttribute("data-plural");
            if (isPlural && plural) {
                option.text = plural.charAt(0).toUpperCase() + plural.slice(1);
            } else if (singular) {
                option.text = singular.charAt(0).toUpperCase() + singular.slice(1);
            }
        }
    }

    quantityInput.addEventListener("input", updateUnitOptions);
    updateUnitOptions(); // Run on page load to set the initial state
});
</script>

}
