@model DashboardReportApp.Models.ToolingHistoryModel
@inject IConfiguration Config

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Tooling History</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <form id="__afForm" class="d-none">@Html.AntiForgeryToken()</form>

    <div class="d-flex justify-content-center mb-3">
        <button id="btnAddToolHistory" class="btn btn-success" type="button">
            <i class="bi bi-plus"></i> Add New Tool History
        </button>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-bordered shadow-sm w-100">
            <thead class="table-dark">
                <tr>
                    <th>Group</th>
                    <th>Assembly #</th>
                    <th>Tool #</th>
                    <th>Rev</th>
                    <th>Reason</th>
                    <th>Vendor</th>
                    <th>Initiated</th>
                    <th>Due</th>
                    <th>Cost</th>
                    <th>Hours</th>
                    <th>Desc</th>
                    <th style="min-width:340px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.ToolingHistories != null)
                {
                    foreach (DashboardReportApp.Models.ToolingHistoryModel item in ViewBag.ToolingHistories)
                    {
                        <tr>
                            <td>@item.GroupID</td>
                            <td>@item.Part</td>
                            <td>@item.ToolNumber</td>
                            <td>@item.Revision</td>
                            <td>@item.Reason</td>
                            <td>@item.ToolVendor</td>
                            <td>@item.DateInitiated?.ToString("yyyy-MM-dd")</td>
                            <td>@item.DateDue?.ToString("yyyy-MM-dd")</td>
                            <td>@(item.Cost?.ToString("0.00"))</td>
                            <td>@item.ToolWorkHours</td>
                            <td class="text-truncate" style="max-width:220px;">@item.ToolDesc</td>
                            <td class="d-flex flex-wrap gap-2">
                                <button type="button"
                                        class="btn btn-secondary btn-sm w-100 js-open-history-modal"
                                        data-url="@Url.Action("EditToolingHistoryModal", "ToolingHistory", new { id = item.Id })">
                                    Edit Tool History
                                </button>

                                <button type="button" class="btn btn-secondary btn-sm"
                                        data-action="tool-items"
                                        data-group="@item.GroupID">
                                    Add/Edit Tool Items
                                </button>

                                <form asp-action="RequestPoNumber" method="post" class="request-po-form d-inline-block">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.Id" />
                                    <button type="submit" class="btn btn-warning btn-sm">
                                        Request PO #
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    #appModal .modal-dialog {
        max-width: 95vw;
    }
</style>
<div class="modal fade" id="appModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xxl modal-dialog-scrollable">
        <div class="modal-content"></div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function getPageAntiforgeryToken() {
            const input = document.querySelector('#__afForm input[name="__RequestVerificationToken"]');
            return input ? input.value : '';
        }

        function showFetchError(res, fallbackText) {
            Swal.fire({
                icon: 'error',
                title: 'Failed to load modal',
                html: `
                    <div class="text-start small">
                        <div><strong>Status:</strong> ${res.status} ${res.statusText}</div>
                    </div>
                `
            });
        }

        const modalEl = document.getElementById('appModal');
        const modal   = new bootstrap.Modal(modalEl);

        async function loadModal(url) {
            const res = await fetch(url, { credentials: 'same-origin' });
            if (!res.ok) { showFetchError(res); return; }
            modalEl.querySelector('.modal-content').innerHTML = await res.text();
            modal.show();
        }

        document.getElementById('btnAddToolHistory').addEventListener('click', () => {
            loadModal('@Url.Action("EditToolingHistoryModal", "ToolingHistory")');
        });

        document.addEventListener('click', (e) => {
            const btn = e.target.closest('button');
            if (!btn) return;

            if (btn.classList.contains('js-open-history-modal')) {
                loadModal(btn.dataset.url);
            }
            if (btn.dataset.action === 'tool-items') {
                const gid = btn.dataset.group;
                if (!gid) { Swal.fire('Error', 'Missing GroupID on row.', 'error'); return; }
                loadModal('@Url.Action("ToolItemsModal", "ToolingHistory")' + '?groupID=' + encodeURIComponent(gid));
            }
        });

        modalEl.addEventListener('click', (e) => {
            const btn = e.target.closest('button');
            if (!btn) return;
            const group = btn.dataset.group;

            if (btn.dataset.modalAction === 'open-receive-all') {
                loadModal('@Url.Action("ReceiveAllModal", "ToolingHistory")' + '?groupID=' + group);
            }
            if (btn.dataset.modalAction === 'open-fit-all') {
                loadModal('@Url.Action("FitAllModal", "ToolingHistory")' + '?groupID=' + group);
            }
        });

        modalEl.addEventListener('submit', async (e) => {
            const form = e.target;
            const ids = new Set(['toolHistoryForm','addItemForm','saveAllForm','receiveAllForm','fitAllForm']);
            if (!ids.has(form.id)) return;

            e.preventDefault();

            const tokenInForm = form.querySelector('input[name="__RequestVerificationToken"]')?.value;
            const token = tokenInForm || getPageAntiforgeryToken();

            const res = await fetch(form.action, {
                method: 'POST',
                headers: { 'RequestVerificationToken': token },
                body: new FormData(form),
                credentials: 'same-origin'
            });

            const ct = res.headers.get('content-type') || '';

            // Tooling history modal: expect JSON on success/validation error
            if (form.id === 'toolHistoryForm') {
                if (ct.includes('application/json')) {
                    const data = await res.json();
                    if (data.ok) {
                        modal.hide();
                        Swal.fire('Saved', 'Tooling history saved.', 'success').then(()=>location.reload());
                        return;
                    }
                    Swal.fire('Error', data.error || 'Save failed.', 'error');
                    return;
                }
                // If server re-rendered the partial with validation errors
                const html = await res.text();
                modalEl.querySelector('.modal-content').innerHTML = html;
                return;
            }

            // All other modal forms return HTML (partial) to refresh modal body
            if (!res.ok) {
                showFetchError(res);
                return;
            }
            const html = await res.text();
            modalEl.querySelector('.modal-content').innerHTML = html;

            if (form.id === 'addItemForm') {
                Swal.fire({ icon:'success', title:'Added', text:'New tool item added.', timer:1500, showConfirmButton:false });
            }
            if (form.id === 'saveAllForm') {
                Swal.fire({ icon:'success', title:'Saved', text:'All tool items saved.', timer:1500, showConfirmButton:false });
            }
            if (form.id === 'receiveAllForm') {
                const alsoFit = form.querySelector('input[name="__alsoFit"]')?.checked;
                Swal.fire({
                    icon:'success',
                    title:'Received',
                    text:'All items marked received' + (alsoFit ? ' and fitted.' : '.'),
                    timer:1700,
                    showConfirmButton:false
                });
            }
            if (form.id === 'fitAllForm') {
                Swal.fire({ icon:'success', title:'Fitted', text:'All items marked fitted.', timer:1500, showConfirmButton:false });
            }
        });

        // Request PO button -> JSON
        document.addEventListener('submit', async (e) => {
            const form = e.target;
            if (!form.classList.contains('request-po-form')) return;
            e.preventDefault();

            const res = await fetch(form.action, {
                method: 'POST',
                headers: { 'RequestVerificationToken': getPageAntiforgeryToken() },
                body: new FormData(form),
                credentials: 'same-origin'
            });

            let payload;
            try { payload = await res.json(); } catch { payload = null; }

            if (!res.ok || !payload || payload.ok !== true) {
                const msg = (payload && payload.error) ? payload.error : (res.status + ' ' + res.statusText);
                Swal.fire('Error', 'Failed to send PO request: ' + msg, 'error');
                return;
            }

            Swal.fire({ icon:'success', title:'Sent', text:'PO request email sent.' });
        });
    </script>
}
