@model DashboardReportApp.Models.ToolingHistoryModel
@inject IConfiguration Config

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Tooling History</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <!-- Global hidden anti-forgery token so JS can read it even if no visible form -->
    <form id="__afForm" class="d-none">@Html.AntiForgeryToken()</form>

    <!-- Centered Add button -->
    <div class="d-flex justify-content-center mb-3">
        <button id="btnAddToolHistory" class="btn btn-success">
            <i class="bi bi-plus"></i> Add New Tool History
        </button>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-bordered shadow-sm w-100">
            <thead class="table-dark">
                <tr>
                    <th>Group</th>
                    <th>Assembly #</th>
                    <th>Tool #</th>
                    <th>Rev</th>
                    <th>Reason</th>
                    <th>Vendor</th>
                    <th>Initiated</th>
                    <th>Due</th>
                    <th>Cost</th>
                    <th>Hours</th>
                    <th>Desc</th>
                    <th style="min-width:340px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.ToolingHistories != null)
                {
                    foreach (DashboardReportApp.Models.ToolingHistoryModel item in ViewBag.ToolingHistories)
                    {
                        <tr>
                            <td>@item.GroupID</td>
                            <td>@item.Part</td>
                            <td>@item.ToolNumber</td>
                            <td>@item.Revision</td>
                            <td>@item.Reason</td>
                            <td>@item.ToolVendor</td>
                            <td>@item.DateInitiated.ToString("yyyy-MM-dd")</td>
                            <td>@item.DateDue?.ToString("yyyy-MM-dd")</td>
                            <td>@(item.Cost?.ToString("0.00"))</td>
                            <td>@item.ToolWorkHours</td>
                            <td class="text-truncate" style="max-width:220px;">@item.ToolDesc</td>
                            <td class="d-flex flex-wrap gap-2">
                                <button class="btn btn-primary btn-sm"
                                        data-action="edit-history"
                                        data-id="@item.Id">
                                    Edit Tool History
                                </button>

                                <button class="btn btn-secondary btn-sm"
                                        data-action="tool-items"
                                        data-group="@item.GroupID">
                                    Add/Edit Tool Items
                                </button>

                                <form asp-action="RequestPoNumber" method="post" class="request-po-form d-inline-block">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.Id" />
                                    <button type="submit" class="btn btn-warning btn-sm">
                                        Request PO #
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- EXTRA-WIDE modal -->
<style>
    #appModal .modal-dialog {
        max-width: 95vw;
    }
</style>
<div class="modal fade" id="appModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xxl modal-dialog-scrollable">
        <div class="modal-content"></div>
    </div>
</div>

@section Scripts {
    <script>
        function getPageAntiforgeryToken() {
            const input = document.querySelector('#__afForm input[name="__RequestVerificationToken"]');
            return input ? input.value : '';
        }

        const modalEl = document.getElementById('appModal');
        const modal   = new bootstrap.Modal(modalEl);

        async function loadModal(url) {
            const res = await fetch(url, { credentials: 'same-origin' });
            if (!res.ok) { alert('Failed to load modal'); return; }
            modalEl.querySelector('.modal-content').innerHTML = await res.text();
            modal.show();
        }

        // Center button
        document.getElementById('btnAddToolHistory').addEventListener('click', () => {
            loadModal('@Url.Action("EditToolingHistoryModal", "ToolingHistory")');
        });

        // Row buttons
        document.addEventListener('click', (e) => {
            const btn = e.target.closest('button');
            if (!btn) return;

            if (btn.dataset.action === 'edit-history') {
                const id = btn.dataset.id;
                loadModal('@Url.Action("EditToolingHistoryModal", "ToolingHistory")' + '?id=' + id);
            }

            if (btn.dataset.action === 'tool-items') {
                const groupId = btn.dataset.group;
                loadModal('@Url.Action("ToolItemsModal", "ToolingHistory")' + '?groupID=' + groupId);
            }
        });

        // Intercept ALL modal form submits (Save, AddItem, SaveAll, ReceiveAll, FitAll)
        modalEl.addEventListener('submit', async (e) => {
            const form = e.target;
            const ids = new Set(['toolHistoryForm','addItemForm','saveAllForm','receiveAllForm','fitAllForm']);
            if (!ids.has(form.id)) return;

            e.preventDefault();

            const tokenInForm = form.querySelector('input[name="__RequestVerificationToken"]')?.value;
            const token = tokenInForm || getPageAntiforgeryToken();

            const res = await fetch(form.action, {
                method: 'POST',
                headers: { 'RequestVerificationToken': token },
                body: new FormData(form),
                credentials: 'same-origin'
            });

            const ct = res.headers.get('content-type') || '';

            if (form.id === 'toolHistoryForm') {
                if (ct.includes('application/json')) {
                    const data = await res.json();
                    if (data.ok) { modal.hide(); location.reload(); return; }
                    alert('Save failed.'); return;
                }
                const html = await res.text();
                modalEl.querySelector('.modal-content').innerHTML = html;
                return;
            }

            // For the rest we expect updated modal HTML
            const html = await res.text();
            modalEl.querySelector('.modal-content').innerHTML = html;
        });

        // Request PO (no email textbox)
        document.addEventListener('submit', async (e) => {
            const form = e.target;
            if (!form.classList.contains('request-po-form')) return;
            e.preventDefault();

            const res = await fetch(form.action, {
                method: 'POST',
                headers: { 'RequestVerificationToken': getPageAntiforgeryToken() },
                body: new FormData(form),
                credentials: 'same-origin'
            });

            if (!res.ok) {
                try { const err = await res.json(); alert('Failed to send PO request: ' + (err.error || res.statusText)); }
                catch { alert('Failed to send PO request.'); }
                return;
            }
            const payload = await res.json();
            alert(payload.ok ? 'PO request sent.' : ('Failed to send PO request: ' + (payload.error || 'unknown error')));
        });

        // Open Receive/Fit selector modals from inside Tool Items modal
        modalEl.addEventListener('click', (e) => {
            const btn = e.target.closest('button');
            if (!btn) return;
            const group = btn.dataset.group;
            if (btn.dataset.modalAction === 'open-receive-all') {
                loadModal('@Url.Action("ReceiveAllModal", "ToolingHistory")' + '?groupID=' + group);
            }
            if (btn.dataset.modalAction === 'open-fit-all') {
                loadModal('@Url.Action("FitAllModal", "ToolingHistory")' + '?groupID=' + group);
            }
        });
    </script>
}
