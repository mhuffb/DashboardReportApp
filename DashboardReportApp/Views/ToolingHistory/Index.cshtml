@model DashboardReportApp.Models.ToolingHistoryModel
@inject IConfiguration Config

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Tooling History</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <!-- Global hidden anti-forgery token so JS can read it even if no visible form -->
    <form id="__afForm" class="d-none">@Html.AntiForgeryToken()</form>

    <!-- Centered Add button -->
    <div class="d-flex justify-content-center mb-3">
        <button id="btnAddToolHistory" class="btn btn-success">
            <i class="bi bi-plus"></i> Add New Tool History
        </button>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <!-- ====================== In Progress Tools ====================== -->
    <div class="table-responsive mb-4">
        <h3 class="mb-2">In Progress Tools</h3>
        <table class="table table-striped table-bordered shadow-sm w-100" id="tblInProgress">
            <thead class="table-dark">
                <tr>
                    <th style="width:48px;"></th>  <!-- expand -->
                    <th>Group</th>
                    <th>Assembly #</th>
                    <th>Reason</th>
                    <th>Vendor</th>
                    <th>Initiated</th>
                    <th>Due</th>
                    <th>Cost</th>
                    <th style="min-width:260px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.ToolingInProgress != null)
                {
                    foreach (DashboardReportApp.Models.ToolingHistoryModel item in ViewBag.ToolingInProgress)
                    {
                        var rowId = $"row-items-{item.GroupID}";
                        <tr data-group="@item.GroupID">
                            <td>
                                <button type="button"
                                        class="btn btn-sm btn-outline-secondary"
                                        data-action="toggle-items"
                                        data-group="@item.GroupID"
                                        aria-expanded="false"
                                        aria-controls="@rowId"
                                        title="Show tool items">
                                    <i class="bi bi-caret-right-fill"></i>
                                </button>
                            </td>
                            <td>@item.GroupID</td>
                            <td>@item.Part</td>
                            <td>@item.Reason</td>
                            <td>@item.ToolVendor</td>
                            <td>@item.DateInitiated.ToString("yyyy-MM-dd")</td>
                            <td>@item.DateDue?.ToString("yyyy-MM-dd")</td>
                            <td>@(item.Cost?.ToString("0.00"))</td>
                            <td class="d-flex flex-wrap gap-2">
                                <button class="btn btn-primary btn-sm" data-action="edit-history" data-id="@item.Id">Edit Tool History</button>
                                <button class="btn btn-secondary btn-sm" data-action="tool-items" data-group="@item.GroupID">Add/Edit Tool Items</button>

                                <form asp-action="RequestPoNumber" method="post" class="request-po-form d-inline-block">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.Id" />
                                    @{
                                        bool hasPo = !string.IsNullOrWhiteSpace(item.PO);
                                        bool wasRequested = item.PoRequestedAt.HasValue;

                                        var btnText = hasPo ? $"PO sent: {item.PO}" : (wasRequested ? "PO was requested" : "Request PO #");
                                        var btnClass = hasPo ? "btn btn-success btn-sm" : (wasRequested ? "btn btn-secondary btn-sm" : "btn btn-warning btn-sm");
                                        var disabledAttr = hasPo ? "disabled" : "";
                                    }
                                    <button type="submit" class="@btnClass" @disabledAttr>@btnText</button>
                                </form>

                                @{
                                    var reason = (item.Reason ?? string.Empty).Trim();
                                    var showPackingSlip = !reason.Equals("New Customer Purchase (5030)", StringComparison.OrdinalIgnoreCase);
                                }
                                @if (showPackingSlip)
                                {
                                    <a class="btn btn-outline-primary btn-sm"
                                       href="@Url.Action("GeneratePackingSlip", "ToolingHistory", new { groupID = item.GroupID, email = true })"
                                       target="_blank" rel="noopener">
                                        Create Packing Slip
                                    </a>
                                }
                            </td>
                        </tr>
                        <tr id="@rowId" class="d-none">
                            <td></td>
                            <td colspan="8">
                                <div class="p-2 border rounded bg-light" data-items-container="@item.GroupID">
                                    <div class="text-muted">Loading...</div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- ====================== All Tooling Transactions ====================== -->
    <div class="table-responsive">
        <h3 class="mb-2">All Tooling Transactions</h3>
        <table class="table table-striped table-bordered shadow-sm w-100" id="tblAll">
            <thead class="table-dark">
                <tr>
                    <th>Group</th>
                    <th>Assembly #</th>
                    <th>Reason</th>
                    <th>Vendor</th>
                    <th>Initiated</th>
                    <th>Due</th>
                    <th>Received</th>
                    <th>Cost</th>
                    <th style="min-width:220px;">Actions</th>
                </tr>
                <!-- Per-column filter inputs -->
                <tr class="bg-light">
                    <th><input class="form-control form-control-sm" placeholder="Search group" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Search assembly" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Search reason" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Search vendor" /></th>
                    <th><input class="form-control form-control-sm" placeholder="yyyy-mm-dd" /></th>
                    <th><input class="form-control form-control-sm" placeholder="yyyy-mm-dd" /></th>
                    <th><input class="form-control form-control-sm" placeholder="yyyy-mm-dd" /></th>
                    <th><input class="form-control form-control-sm" placeholder="Cost" /></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.ToolingAll != null)
                {
                    foreach (DashboardReportApp.Models.ToolingHistoryModel item in ViewBag.ToolingAll)
                    {
                        var reason = (item.Reason ?? string.Empty).Trim();
                        var showPackingSlip = !reason.Equals("New Customer Purchase (5030)", StringComparison.OrdinalIgnoreCase);

                        <tr>
                            <td>@item.GroupID</td>
                            <td>@item.Part</td>
                            <td>@item.Reason</td>
                            <td>@item.ToolVendor</td>
                            <td>@item.DateInitiated.ToString("yyyy-MM-dd")</td>
                            <td>@item.DateDue?.ToString("yyyy-MM-dd")</td>
                            <td>@item.DateReceived?.ToString("yyyy-MM-dd")</td>
                            <td>@(item.Cost?.ToString("0.00"))</td>
                            <td class="d-flex flex-wrap gap-2">
                                <button class="btn btn-primary btn-sm" data-action="edit-history" data-id="@item.Id">Edit</button>
                                <button class="btn btn-secondary btn-sm" data-action="tool-items" data-group="@item.GroupID">Items</button>

                                <form asp-action="RequestPoNumber" method="post" class="request-po-form d-inline-block">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.Id" />
                                    @{
                                        bool hasPo = !string.IsNullOrWhiteSpace(item.PO);
                                        bool wasRequested = item.PoRequestedAt.HasValue;

                                        var btnText = hasPo ? $"PO sent: {item.PO}" : (wasRequested ? "PO was requested" : "Request PO #");
                                        var btnClass = hasPo ? "btn btn-success btn-sm" : (wasRequested ? "btn btn-secondary btn-sm" : "btn btn-warning btn-sm");
                                        var disabledAttr = hasPo ? "disabled" : "";
                                    }
                                    <button type="submit" class="@btnClass" @disabledAttr>@btnText</button>
                                </form>

                                @if (showPackingSlip)
                                {
                                    <a class="btn btn-outline-primary btn-sm"
                                       href="@Url.Action("GeneratePackingSlip", "ToolingHistory", new { groupID = item.GroupID, email = true })"
                                       target="_blank" rel="noopener">
                                        Packing Slip
                                    </a>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

</div>

<!-- EXTRA-WIDE modal -->
<style>
    #appModal .modal-dialog {
        max-width: 95vw;
    }
</style>
<div class="modal fade" id="appModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xxl modal-dialog-scrollable">
        <div class="modal-content"></div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // --- SweetAlert helpers (no auto-dismiss) ---
        async function alertOK(title, text, icon) {
          return Swal.fire({
            title, text, icon,
            allowOutsideClick: false,
            allowEscapeKey: true,
            showConfirmButton: true,
            confirmButtonText: 'OK'
          });
        }
        async function alertErr(title, text) { return alertOK(title, text, 'error'); }
        async function alertWarn(title, text) { return alertOK(title, text, 'warning'); }
        async function alertSuc(title, text) { return alertOK(title, text, 'success'); }

        // --- antiforgery token helper ---
        function getPageAntiforgeryToken() {
          const input = document.querySelector('#__afForm input[name="__RequestVerificationToken"]');
          return input ? input.value : '';
        }

        // --- modal plumbing ---
        const modalEl = document.getElementById('appModal');
        const modal   = new bootstrap.Modal(modalEl);

        async function loadModal(url) {
          try {
            const res = await fetch(url, { credentials: 'same-origin' });
            if (!res.ok) {
              const t = await res.text().catch(()=>res.statusText);
              await alertErr('Failed to load', t?.slice(0,600) || res.statusText);
              return;
            }
            modalEl.querySelector('.modal-content').innerHTML = await res.text();
            modal.show();
          } catch (err) {
            await alertErr('Network error', err?.message || 'Unexpected error');
          }
        }

        // --- open modals ---
        document.getElementById('btnAddToolHistory')?.addEventListener('click', () => {
          loadModal('@Url.Action("EditToolingHistoryModal", "ToolingHistory")');
        });

        document.addEventListener('click', (e) => {
          const btn = e.target.closest('button');
          if (!btn) return;

          if (btn.dataset.action === 'edit-history') {
            const id = btn.dataset.id;
            loadModal('@Url.Action("EditToolingHistoryModal", "ToolingHistory")' + '?id=' + id);
          }

          if (btn.dataset.action === 'tool-items') {
            const groupId = btn.dataset.group;
            loadModal('@Url.Action("ToolItemsModal", "ToolingHistory")' + '?groupID=' + groupId);
          }
        });

      

        // --- SINGLE handler for all modal form posts ---
              modalEl.addEventListener('submit', async (e) => {
          const form = e.target;
          const ids = new Set(['toolHistoryForm','addItemForm','saveAllForm']);

          if (!ids.has(form.id)) return;

          e.preventDefault();

          

          const btn = form.querySelector('[type="submit"]');
          const prevDisabled = btn?.disabled;
          if (btn) btn.disabled = true;

          const tokenInForm = form.querySelector('input[name="__RequestVerificationToken"]')?.value;
          const token = tokenInForm || getPageAntiforgeryToken();

          try {
            const res = await fetch(form.action, {
              method: 'POST',
              headers: { 'RequestVerificationToken': token },
              body: new FormData(form),
              credentials: 'same-origin'
            });

            const ct = res.headers.get('content-type') || '';

            // TOOL HISTORY FORM: JSON on success; HTML (partial) on validation fail
            if (form.id === 'toolHistoryForm') {
              if (ct.includes('application/json')) {
                const data = await res.json();
                if (data.ok) {
                  await alertSuc('Saved','Tooling history saved.');
                  modal.hide(); location.reload(); return;
                }
                await alertErr('Save failed', data.error || 'Could not save tooling history.');
                return;
              }
              // HTML -> re-render modal with validation summary (even if 400)
              const html = await res.text();
              modalEl.querySelector('.modal-content').innerHTML = html;
              await alertWarn('Validation','Please fix the errors shown at the top.');
              return;
            }

                   // OTHER FORMS (Add Item / Save All / Receive All / Fit All):
        if (ct.includes('text/html')) {
          const html = await res.text();
          modalEl.querySelector('.modal-content').innerHTML = html;

          if (!res.ok) {
            // Validation fail -> for addItemForm, NO SweetAlert, just show inline summary.
            if (form.id === 'addItemForm') return;

            // For other forms you can keep a warning if you want:
            await alertWarn('Validation','Please review the highlighted errors above.');
            return;
          }

          // Success popups still OK:
          if (form.id === 'addItemForm')    await alertSuc('Added','Tool item added.');
          if (form.id === 'saveAllForm')    await alertSuc('Saved','All tool items saved.');
         
          return;
        }


            // Non-HTML error fallback
            if (!res.ok) {
              const t = await res.text().catch(()=>res.statusText);
              await alertErr('Action failed', t?.slice(0,600) || res.statusText);
              return;
            }

            // Success fallback (rarely hit here): inject whatever it is
            const html = await res.text();
            modalEl.querySelector('.modal-content').innerHTML = html;

          } catch (err) {
            await alertErr('Error', err?.message || 'Unexpected error.');
          } finally {
            if (btn) btn.disabled = prevDisabled ?? false;
          }
        });


        // --- PO request handler (SweetAlert only; exactly one handler) ---
        document.addEventListener('submit', async (e) => {
          const form = e.target;
          if (!form.classList.contains('request-po-form')) return;
          e.preventDefault();

          const btn = form.querySelector('button[type="submit"]');
          const prevDisabled = btn?.disabled;
          if (btn) btn.disabled = true;

          try {
            const res = await fetch(form.action, {
              method: 'POST',
              headers: { 'RequestVerificationToken': getPageAntiforgeryToken() },
              body: new FormData(form),
              credentials: 'same-origin'
            });

            if (!res.ok) {
              let msg = res.statusText;
              try { const j = await res.json(); if (j?.error) msg = j.error; } catch {}
              await alertErr('PO request failed', msg || 'Unknown error');
              return;
            }
            const payload = await res.json();
            if (payload.ok) await alertSuc('Sent', 'PO request email sent.');
            else await alertErr('PO request failed', payload.error || 'Unknown error');
          } catch (err) {
            await alertErr('PO request failed', err?.message || 'Unexpected error');
          } finally {
            if (btn) btn.disabled = prevDisabled ?? false;
          }
        });
    </script>
    <style>
        /* optional: rotate chevron on expand */
        .rotate-90 {
            transform: rotate(90deg);
            transition: transform .15s ease;
        }
    </style>

    <script>
        // Expand/collapse + lazy-load per group
        document.addEventListener('click', async (e) => {
          const btn = e.target.closest('button[data-action="toggle-items"]');
          if (!btn) return;

          const group = btn.dataset.group;
          const row = document.getElementById(`row-items-${group}`);
          const icon = btn.querySelector('i');

          const expanded = btn.getAttribute('aria-expanded') === 'true';
          if (expanded) {
            // collapse
            btn.setAttribute('aria-expanded', 'false');
            row?.classList.add('d-none');
            icon?.classList.remove('rotate-90');
            return;
          }

          // expand (and load if needed)
          btn.setAttribute('aria-expanded', 'true');
          row?.classList.remove('d-none');
          icon?.classList.add('rotate-90');

          const container = row?.querySelector(`[data-items-container="${group}"]`);
          if (!container) return;

          // Load only once
          if (container.dataset.loaded === '1') return;

          try {
            const url = '@Url.Action("ItemsTable", "ToolingHistory")' + '?groupID=' + encodeURIComponent(group);
            const res = await fetch(url, { credentials: 'same-origin' });
            const html = await res.text();
            container.innerHTML = html;
            container.dataset.loaded = '1';
          } catch (err) {
            container.innerHTML = `<div class="text-danger">Failed to load items: ${err?.message || 'Unknown error'}</div>`;
          }
        });
    </script>
    <!-- DataTables (Bootstrap 5 build) -->
    <link href="https://cdn.datatables.net/v/bs5/dt-2.0.8/datatables.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/v/bs5/dt-2.0.8/datatables.min.js"></script>

    <script>
        // Initialize the big "All Tooling Transactions" table
        $(function () {
          // Move the filter row into thead as DataTables expects (already there)
          const table = $('#tblAll').DataTable({
            pageLength: 25,
            lengthMenu: [10, 25, 50, 100],
            order: [[0, 'desc']], // default sort by Group desc
            stateSave: true,
            autoWidth: false
          });

          // Hook up per-column inputs (second header row)
          $('#tblAll thead tr:eq(1) th').each(function (i) {
            const $input = $('input', this);
            if (!$input.length) return;
            $input.on('keyup change', function () {
              table.column(i).search(this.value).draw();
            });
          });
        });
    </script>

}

