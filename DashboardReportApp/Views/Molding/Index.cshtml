@{
    ViewData["Title"] = "Molding Dashboard";
}
@model DashboardReportApp.Models.MoldingModel
@using System.Text.Json;

<h1>Molding Dashboard</h1>

<!-- 1) The React container for the MachineCounts component at the top. -->

<div id="machineCountsReactRoot"></div>

<div class="container-fluid px-3 mt-4">
    <h2 class="text-center">Molding Data</h2>

    <!-- Global Search Input (Full Width) -->
    <div class="row mb-3">
        <div class="col-12">
            <input type="text" id="globalSearch" placeholder="Search all 3 tables..." class="form-control" />
        </div>
    </div>

    <!-- Machine and Date Range Filter Inputs -->
    <div class="row mb-3">
        <div class="col-auto">
            <select id="machineFilter" class="form-control" style="max-width:150px;">
                <option value="">All Machines</option>
            </select>
        </div>
        <div class="col-auto">
            <input type="date" id="startDateFilter" class="form-control" style="max-width:150px;" />
        </div>
        <div class="col-auto">
            <input type="date" id="endDateFilter" class="form-control" style="max-width:150px;" />
        </div>
    </div>

    <!-- Clear Filters Button (Full Width) -->
    <div class="row mb-3">
        <div class="col-12">
            <button id="clearFiltersButton" class="btn btn-secondary w-100">Clear Filters</button>
        </div>
    </div>

    <h3>Press Setups</h3>
    <div id="pressSetupsReactRoot"
         data-presssetups='@Html.Raw(JsonSerializer.Serialize(Model.PressSetups))'>
    </div>

    <h3>Press Runs</h3>
    <div id="pressRunsReactRoot"
         data-pressruns='@Html.Raw(JsonSerializer.Serialize(Model.PressRuns))'>
    </div>

    <h3>Press Lot Changes</h3>
    <div id="pressLotChangesReactRoot"
         data-presslots='@Html.Raw(JsonSerializer.Serialize(Model.PressLotChanges))'>
    </div>
</div>

<!-- Reference your React bundle that defines 'renderMyDataTable' and 'renderMachineCounts' -->
<script src="/js/mydatatable.bundle.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // 1) Render the top Machine Counts Table
        if (window.renderMachineCounts) {
            window.renderMachineCounts("machineCountsReactRoot");
        } else {
            console.error("window.renderMachineCounts is not defined. Check your JS bundle.");
        }

        // 2) Setup the rest of the Molding data tables/filters
        const pressRunsEl = document.getElementById('pressRunsReactRoot');
        const pressSetupsEl = document.getElementById('pressSetupsReactRoot');
        const pressLotsEl = document.getElementById('pressLotChangesReactRoot');

        // -- Parse the original data arrays --
        const originalPressRuns = JSON.parse(pressRunsEl.getAttribute('data-pressruns'));
        const originalPressSetups = JSON.parse(pressSetupsEl.getAttribute('data-presssetups'));
        const originalPressLots = JSON.parse(pressLotsEl.getAttribute('data-presslots'));

        // -- Combine machine values from all data arrays into a unique, sorted list (sort as ints) --
        const machineSet = new Set();
        [...originalPressRuns, ...originalPressSetups, ...originalPressLots].forEach(row => {
            if (row.Machine) {
                machineSet.add(row.Machine);
            }
        });
        const machineOptions = Array.from(machineSet).sort((a, b) => parseInt(a, 10) - parseInt(b, 10));

        // -- Populate the machine filter dropdown --
        const machineFilterSelect = document.getElementById('machineFilter');
        machineOptions.forEach(machine => {
            const option = document.createElement('option');
            option.value = machine;
            option.text = machine;
            machineFilterSelect.appendChild(option);
        });

        // -- Define columns for each table --
        const pressRunsColumns = [
            { key: "Id", label: "ID" },
                { key: "Part", label: "Part" },
                { key: "Component", label: "Component" },
                { key: "ProdNumber", label: "Prod Number" },
                { key: "Run", label: "Run" },
                { key: "Machine", label: "Machine" },
                { key: "Operator", label: "Operator" },
                { key: "StartDateTime", label: "Start Time" },
                { key: "EndDateTime", label: "End Time" },
                { key: "ElapsedTime", label: "ElapsedTime" },
                { key: "SkidNumber", label: "SkidNumber" },
                { key: "PcsStart", label: "Pcs Start" },
                { key: "PcsEnd", label: "Pcs End" },
                { key: "Pcs", label: "Pcs" },
                { key: "CycleTime", label: "CycleTime" },
                { key: "Scrap", label: "Scrap" },
                { key: "Notes", label: "Notes" }
        ];
        const pressSetupsColumns = [
            { key: 'Id', label: 'Id' },
            { key: 'Part', label: 'Part' },
            { key: 'Component', label: 'Component' },
            { key: 'ProdNumber', label: 'Production Number' },
            { key: 'Run', label: 'Run' },
            { key: 'Operator', label: 'Operator' },
            { key: 'Machine', label: 'Machine' },
            { key: 'StartDateTime', label: 'Start Time' },
            { key: 'EndDateTime', label: 'End Time' },
            { key: 'ElapsedTime', label: 'Elapsed Time' },
            { key: 'PressType', label: 'Press Type' },
            { key: 'Difficulty', label: 'Difficulty' },
            { key: 'SetupComp', label: 'Setup Complete' },
            { key: 'AssistanceReq', label: 'Assist Required' },
            { key: 'AssistedBy', label: 'Assisted By' },
            { key: 'Notes', label: 'Notes' }
        ];
        const pressLotsColumns = [
            { key: 'Id', label: 'ID' },
            { key: 'Part', label: 'Part' },
            { key: 'Component', label: 'Component' },
            { key: 'ProdNumber', label: 'Production Number' },
            { key: 'Run', label: 'Run' },
            { key: 'Operator', label: 'Operator' },
            { key: 'Machine', label: 'Machine' },
            { key: 'LotNumber', label: 'Lot Number' },
            { key: 'MixNumber', label: 'Mix Number' },
            { key: 'SentDateTime', label: 'Sent Time' },
            { key: 'Notes', label: 'Notes' }
        ];

        // -- Render function for all 3 tables --
        function renderTables(runsData, setupsData, lotsData) {
            window.renderMyDataTable('pressRunsReactRoot', runsData, pressRunsColumns, false);
            window.renderMyDataTable('pressSetupsReactRoot', setupsData, pressSetupsColumns, false);
            window.renderMyDataTable('pressLotChangesReactRoot', lotsData, pressLotsColumns, false);
        }

        // -- Initial render (no filters) --
        renderTables(originalPressRuns, originalPressSetups, originalPressLots);

        // -- Grab filter input elements --
        const globalSearchInput = document.getElementById('globalSearch');
        const startDateFilterInput = document.getElementById('startDateFilter');
        const endDateFilterInput = document.getElementById('endDateFilter');
        const clearFiltersButton = document.getElementById('clearFiltersButton');

        // -- Listen for filter changes --
        globalSearchInput.addEventListener('input', applyFilters);
        machineFilterSelect.addEventListener('change', applyFilters);
        startDateFilterInput.addEventListener('input', applyFilters);
        endDateFilterInput.addEventListener('input', applyFilters);

        // -- Main filter function --
        function applyFilters() {
            const globalTerm = globalSearchInput.value.toLowerCase().trim();
            const machineTerm = machineFilterSelect.value.toLowerCase().trim();
            const startDateTerm = startDateFilterInput.value; // YYYY-MM-DD
            const endDateTerm = endDateFilterInput.value;     // YYYY-MM-DD

            const filteredPressRuns = filterRows(originalPressRuns, globalTerm, machineTerm, startDateTerm, endDateTerm);
            const filteredPressSetups = filterRows(originalPressSetups, globalTerm, machineTerm, startDateTerm, endDateTerm);
            const filteredPressLots = filterRows(originalPressLots, globalTerm, machineTerm, startDateTerm, endDateTerm);

            renderTables(filteredPressRuns, filteredPressSetups, filteredPressLots);
        }

        // -- Clear Filters button --
        clearFiltersButton.addEventListener('click', function () {
            globalSearchInput.value = '';
            machineFilterSelect.value = '';
            startDateFilterInput.value = '';
            endDateFilterInput.value = '';
            renderTables(originalPressRuns, originalPressSetups, originalPressLots);
        });

        // -- Helper: Date Range check --
        function isWithinDateRange(dateStr, start, end) {
            if (!dateStr) return false;
            const date = new Date(dateStr);
            if (start && date < new Date(start)) return false;
            if (end && date > new Date(end)) return false;
            return true;
        }

        // -- Helper: Filter rows by global search, machine, and date range --
        function filterRows(dataArray, globalTerm, machineTerm, startDateTerm, endDateTerm) {
            return dataArray.filter(row => {
                // Global search: check all properties
                let matchesGlobal = true;
                if (globalTerm) {
                    matchesGlobal = Object.values(row).some(val =>
                        val && val.toString().toLowerCase().includes(globalTerm)
                    );
                }

                // Machine filter
                let matchesMachine = true;
                if (machineTerm) {
                    matchesMachine = row.Machine && row.Machine.toString().toLowerCase() === machineTerm;
                }

                // Date range filter on relevant fields
                let matchesDate = true;
                if (startDateTerm || endDateTerm) {
                    const dateFields = ['StartDateTime', 'EndDateTime', 'SentDateTime'];
                    matchesDate = dateFields.some(field => {
                        if (row[field]) {
                            return isWithinDateRange(row[field], startDateTerm, endDateTerm);
                        }
                        return false;
                    });
                }

                return matchesGlobal && matchesMachine && matchesDate;
            });
        }
    });
</script>
