@model IEnumerable<MaintenanceRequestModel>
@using System.Text.Json;
<script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
<div class="container-fluid px-3 mt-4">
    <h1 class="text-center mb-4">Maintenance Requests</h1>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
   

    <!-- Combined QR Codes -->
    <div class="row justify-content-center">

        <h8 class="text-center mb-4">You can upload pictures from your phone by connecting to wifi then viewing this page on your phone.</h8>
    </div>
    <div class="d-flex justify-content-evenly align-items-center mb-4">
        <!-- Wi‑Fi QR Code -->
        <div class="text-center">
            <canvas id="wifi-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">Connect to Wifi</div>
        </div>
        <!-- Current Page QR Code -->
        <div class="text-center">
            <canvas id="current-page-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">View on your device</div>
        </div>
    </div>


</div>

<!-- Add Request (Razor) -->
<div class="d-flex justify-content-center mb-3">
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addReqModal">
        <i class="bi bi-plus"></i> Add Request
    </button>
</div>

<!-- Add Request Modal -->
<div class="modal fade" id="addReqModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <form id="addReqForm" class="modal-content" enctype="multipart/form-data">
            <div class="modal-header">
                <h5 class="modal-title">Add Maintenance Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="mb-2">
                    <label class="form-label">Equipment</label>
                    <select class="form-control" id="equipSelect" name="Equipment" required>
                        <option value="">Select Equipment</option>
                        <!-- options filled by JS from window.equipmentList -->
                    </select>
                </div>

                <div class="mb-2">
                    <label class="form-label">Requester</label>
                    <select class="form-control" id="requesterSelect" name="Requester" required>
                        <option value="">-- Select Requester --</option>
                        <!-- options filled by JS from window.requesters -->
                    </select>
                </div>

                <div class="mb-2">
                    <label class="form-label">Problem</label>
                    <textarea class="form-control" name="Problem" id="problemInput" required></textarea>
                </div>

                <div class="mb-2">
                    <label class="form-label">Department</label>
                    <select class="form-control" name="Department" required>
                        <option value="">-- Select Department --</option>
                        <option value="Finishing">Finishing</option>
                        <option value="General">General</option>
                        <option value="Maintenance">Maintenance</option>
                        <option value="Molding">Molding</option>
                        <option value="Packing">Packing</option>
                        <option value="Quality">Quality</option>
                        <option value="Secondary">Secondary</option>
                        <option value="Sintering">Sintering</option>
                        <option value="Tooling">Tooling</option>
                    </select>
                </div>

                <div class="form-check mb-2">
                    <input type="checkbox" class="form-check-input" id="downStatusCheck" name="DownStatus" value="true">
                    <label class="form-check-label" for="downStatusCheck">Machine Down?</label>
                </div>

                <div class="form-check mb-2">
                    <input type="checkbox" class="form-check-input" id="safetyConcern" name="SafetyConcern" value="true">
                    <label class="form-check-label" for="safetyConcern">Is this a safety concern?</label>
                </div>

                <div class="mb-2">
                    <label class="form-label">Upload File 1</label>
                    <input type="file" class="form-control" name="file" accept="image/*,application/pdf">
                </div>

                <!-- Hidden defaults the controller expects -->
                <input type="hidden" name="Status" value="Open">
                <input type="hidden" name="StatusDesc" value="">
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="submitAddReq" type="submit" class="btn btn-success">
                    Submit
                </button>
            </div>
        </form>
    </div>
</div>


<!-- Container for the non-admin React component -->
<div id="maintenanceUserRoot"></div>

<!-- Global variables -->
<script type="text/javascript">
    window.maintenanceRequests = @Html.Raw(JsonSerializer.Serialize(Model));
    window.equipmentList = @Html.Raw(JsonSerializer.Serialize(ViewData["EquipmentList"]));
    window.requesters = @Html.Raw(JsonSerializer.Serialize(ViewData["Requesters"]));
</script>

<!-- Load the bundle -->
<script src="/js/mydatatable.bundle.js" type="text/javascript"></script>
<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {
      if (window.renderNonAdminMaintenanceTable) {
        console.log("Calling renderNonAdminMaintenanceTable for user view...");
        window.renderNonAdminMaintenanceTable("maintenanceUserRoot", window.maintenanceRequests, window.equipmentList, window.requesters);
      } else {
        console.error("renderNonAdminMaintenanceTable is not defined!");
      }
    });
</script>
<!-- QR Code Generation for Both QR Codes -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Generate QR code for the current page
        var currentUrl = window.location.href;
        QRCode.toCanvas(document.getElementById('current-page-qr'), currentUrl, {
            width: 128
        }, function (error) {
            if (error) {
                console.error(error);
            } else {
                console.log("Current page QR code generated!");
            }
        });

        // Generate QR code for Wi‑Fi connection
        var wifiData = `WIFI:T:WPA;S:Sintergy-WiFi;P:5intergyW1F1;;`;
        QRCode.toCanvas(document.getElementById('wifi-qr'), wifiData, {
            width: 128
        }, function (error) {
            if (error) {
                console.error(error);
            } else {
                console.log("Wi‑Fi QR code generated!");
            }
        });
    });
</script>
<script>
    (function(){
      const modalEl = document.getElementById('addReqModal');
      const formEl  = document.getElementById('addReqForm');
      const equipEl = document.getElementById('equipSelect');
      const reqEl   = document.getElementById('requesterSelect');

      // Fill Equipment + Requester from globals you already set in the page
      function fillSelects(){
        try{
          // equipmentList is an array of "1234 - Name (Brand: X, Description: Y)"
          const equipmentList = Array.isArray(window.equipmentList) ? window.equipmentList.slice() : [];
          equipmentList.sort((a,b)=>{
            const aNum=parseInt(String(a).split(' - ')[0],10);
            const bNum=parseInt(String(b).split(' - ')[0],10);
            return (isNaN(aNum)||isNaN(bNum)) ? String(a).localeCompare(String(b)) : aNum-bNum;
          });
          equipEl.innerHTML = '<option value="">Select Equipment</option>' +
            equipmentList.map(eq=>`<option>${eq}</option>`).join('');

          // requesters is an array of names
          const requesters = Array.isArray(window.requesters) ? window.requesters.slice().sort() : [];
          reqEl.innerHTML = '<option value="">-- Select Requester --</option>' +
            requesters.map(r=>`<option>${r}</option>`).join('');
        }catch(e){ console.error('fillSelects failed', e); }
      }

      // When modal opens, (re)fill options
      modalEl?.addEventListener('shown.bs.modal', fillSelects);

      // Helper: show/hide global spinner (defined in _Layout)
      const show = (msg)=> (typeof window.showSpinner==='function' ? window.showSpinner() : null);
      const hide = ()=> (typeof window.hideSpinner==='function' ? window.hideSpinner() : null);

      // Submit handler (AJAX)
      formEl?.addEventListener('submit', async (ev)=>{
        ev.preventDefault();

        try{
          show('Submitting…');

          const fd = new FormData(formEl);

          // Only send the numeric equipment id before " - "
          const equipFull = fd.get('Equipment') || '';
          if (typeof equipFull === 'string' && equipFull.includes(' - ')) {
            fd.set('Equipment', equipFull.split(' - ')[0].trim());
          }

          // Convert checkboxes to "true"/"false" strings (controller reads string -> bool)
          fd.set('DownStatus', document.getElementById('downStatusCheck').checked ? 'true' : 'false');
          fd.set('SafetyConcern', document.getElementById('safetyConcern').checked ? 'true' : 'false');

          const resp = await fetch('/MaintenanceRequest/AddRequest', {
            method: 'POST',
            body: fd
          });

          if (!resp.ok) {
            // Try to pull server error
            let msg = 'Failed to add request.';
            try { const j = await resp.json(); if (j?.message) msg = j.message; } catch {}
            throw new Error(msg);
          }

          const json = await resp.json();
          if (!json?.success) {
            throw new Error(json?.message || 'Server rejected the request.');
          }

          // Success: keep loader visible, close modal, then reload
          const bsModal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
          bsModal.hide();
          // tiny tick so the hide anim can start
          setTimeout(()=> { window.location.reload(); }, 50);

        } catch(err){
          hide();
          console.error(err);
          if (window.Swal) Swal.fire('Error', err.message || 'Network error', 'error');
          else alert(err.message || 'Network error');
        }
      });

      // Ensure selects are filled at least once on DOM ready (if modal opened quickly)
      if (document.readyState !== 'loading') fillSelects();
      else document.addEventListener('DOMContentLoaded', fillSelects, { once:true });
    })();
</script>
