@model List<DashboardReportApp.Models.PressSetupModel>

@{
    ViewData["Title"] = "Press Setup Log";
    var operators = ViewData["Operators"] as List<string> ?? new List<string>();
    var machines = ViewData["Machines"] as List<string> ?? new List<string>();
    var trainers = ViewData["Trainers"] as List<string> ?? new List<string>();
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Press Setup Log</h1>

    @if (ViewData["Message"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @ViewData["Message"]
        </div>
    }

    @if (ViewData["Error"] != null)
    {
        <div class="alert alert-danger fade show" role="alert">
            @ViewData["Error"]
        </div>
    }

    <!-- Login Form -->
    <h2 class="text-center">Start Setup</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <form method="post" asp-action="Login">
                <!-- Part Selection -->
                <div class="mb-3">
                    <label for="partNumber" class="form-label">Part Number</label>
                    <select id="partNumber" name="partNumber" class="form-control" required onchange="updateRunNumber()">
                        <option value="">-- Select Part --</option>
                        @foreach (var entry in ViewData["Parts"] as Dictionary<string, string> ?? new Dictionary<string, string>())
                        {
                            <option value="@entry.Key" data-run="@entry.Value">
                                @entry.Key (Run: @entry.Value)
                            </option>
                        }
                    </select>

                    <!-- Hidden Run Number (sent to backend but not visible) -->
                    <input type="hidden" id="RunNumber" name="runNumber" />
                </div>


                

                <!-- Operator Dropdown -->
                <div class="mb-3">
                    <label for="operatorName" class="form-label">Operator</label>
                    <select id="operatorName" name="operatorName" class="form-control" required>
                        <option value="">-- Select Operator --</option>
                        @foreach (var op in operators)
                        {
                            <option value="@op">@op</option>
                        }
                    </select>
                </div>

                <!-- Machine Dropdown -->
                <div class="mb-3">
                    <label for="machine" class="form-label">Machine</label>
                    <select id="machine" name="machine" class="form-control" required>
                        <option value="">-- Select Machine --</option>
                        @foreach (var machine in machines)
                        {
                            <option value="@machine">@machine</option>
                        }
                    </select>
                </div>

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </form>
        </div>
    </div>

    <!-- Active Setups -->
    <h2 class="text-center mb-4">Open Setups</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="container-fluid px-3 mt-4">
                <table class="table table-striped table-bordered shadow-sm">
                    <thead class="table-dark">
                        <tr>
                            <th>Part</th>
                            <th>Run</th>     <!-- NEW COLUMN FOR RUN NUMBER -->
                            <th>Operator</th>
                            <th>Machine</th>
                            <th>Start Time</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var login in Model.Where(x => x.EndDateTime == null))
                        {
                            <tr>
                                <td>@login.Part</td>
                                <td>@login.Run</td>  <!-- MAKE SURE PressSetupModel HAS THIS PROPERTY -->
                                <td>@login.Operator</td>
                                <td>@login.Machine</td>
                                <td>@(login.StartDateTime?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
                                <td>
                                    <!-- Instead of inline form, use a button that opens the modal -->
                                    <button class="btn btn-danger btn-sm"
                                            onclick="openStopSetupModal('@login.Part', '@login.Run', '@login.StartDateTime')">
                                        Logout
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Full List of Records -->
    <h2 class="text-center mt-4">All Setup Records</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="container-fluid px-3 mt-4">
                <!-- REACT Table Container -->
                <div id="myReactTableRoot"
                     data-records='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model))'>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Stopping/Logging Out of Setup -->
<div id="stopSetupModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <form id="stopSetupForm" method="post" asp-action="Logout">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Stop Setup</h5>
                    <button type="button" class="btn-close" onclick="closeModal()"></button>
                </div>
                <div class="modal-body">
                    <!-- Hidden fields for identifying the correct record -->
                    <input type="hidden" id="modalPart" name="partNumber" />
                    <input type="hidden" id="modalRun" name="runNumber" />
                    <input type="hidden" id="modalStartDateTime" name="startDateTime" />

                    

                    <!-- Assistance Required -->
                    <div class="mb-3">
                        <label for="modalAssistanceRequired" class="form-label">Assistance Required</label>
                        <select id="modalAssistanceRequired" name="assistanceRequired" class="form-control" required>
                            <option value="">-- Select Assistance --</option>
                            <option value="Solo">Solo</option>
                            <option value="Assisted">Assisted</option>
                        </select>
                    </div>

                    <!-- Assisted By (hidden until "Assisted" is chosen) -->
                    <div class="mb-3 d-none" id="assistedByContainer">
                        <label for="modalAssistedBy" class="form-label">Assisted By</label>
                        <select id="modalAssistedBy" name="assistedBy" class="form-control">
                            <option value="">-- Select Trainer --</option>
                            @foreach (var trainer in trainers)
                            {
                                <option value="@trainer">@trainer</option>
                            }
                        </select>
                    </div>

                    <!-- Setup Complete -->
                    <div class="mb-3">
                        <label for="modalSetupComplete" class="form-label">Setup Complete</label>
                        <select id="modalSetupComplete" name="setupComplete" class="form-control" required>
                            <option value="">-- Select Status --</option>
                            <option value="Yes">Yes</option>
                            <option value="No">No</option>
                        </select>
                    </div>

                    <!-- Notes -->
                    <div class="mb-3">
                        <label for="modalNotes" class="form-label">Notes</label>
                        <textarea id="modalNotes" name="notes" class="form-control text-area-large"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-danger">Confirm Logout</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- JS for React Table, etc. -->
<script src="/js/mydatatable.bundle.js"></script>
<script>
    // ========== REACT TABLE SETUP ==========
    document.addEventListener('DOMContentLoaded', function() {
        const container = document.getElementById('myReactTableRoot');
        if (!container) return;

        // Parse the JSON from data-records
        const rawData = container.getAttribute('data-records');
        const data = JSON.parse(rawData); // This is your List<PressSetupModel>

        // Define columns to match PressSetupModel's properties
        const columns = [
            { key: 'Id', label: 'Id' },
            { key: 'Part', label: 'Part' },
            { key: 'Run', label: 'Run' },
            { key: 'Operator', label: 'Operator' },
            { key: 'Machine', label: 'Machine' },
            { key: 'StartDateTime', label: 'Start Time' },
            { key: 'EndDateTime', label: 'End Time' },
            { key: 'SetupComp', label: 'Setup Complete' },
            { key: 'AssistanceReq', label: 'Assist Required' },
            { key: 'AssistedBy', label: 'Assisted By' },
            { key: 'Notes', label: 'Notes' }
        ];

        // Render table using a React component from your JS bundle
        window.renderMyDataTable('myReactTableRoot', data, columns, true);
    });

    // ========== FETCH RUN NUMBER ON PART SELECTION ==========
    document.addEventListener("DOMContentLoaded", function () {
        const partDropdown = document.getElementById("partNumber");
        const runField = document.getElementById("runNumber");

        partDropdown.addEventListener("change", function () {
            const selectedPart = this.value;
            if (!selectedPart) {
                runField.value = "";
                return;
            }

            fetch(`/PressSetup/GetRunForPart?part=${encodeURIComponent(selectedPart)}`)
                .then(response => response.json())
                .then(data => {
                    // Expecting: { run: "someRunNumber" }
                    runField.value = data.run || "";
                })
                .catch(error => console.error("Error fetching run:", error));
        });
    });

    // ========== LOGOUT MODAL SCRIPTS ==========
    function openStopSetupModal(part, run, startDateTime) {
        // Fill hidden fields
        document.getElementById("modalPart").value = part;
        document.getElementById("modalRun").value = run;
        document.getElementById("modalStartDateTime").value = startDateTime;

        const modal = new bootstrap.Modal(document.getElementById("stopSetupModal"));
        modal.show();
    }

    function closeModal() {
        const modalElement = document.getElementById("stopSetupModal");
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        modalInstance.hide();
    }

    // Show/Hide "Assisted By" field based on assistance selection
    document.addEventListener("DOMContentLoaded", function () {
        const assistanceRequiredSelect = document.getElementById("modalAssistanceRequired");
        const assistedByContainer = document.getElementById("assistedByContainer");

        // Toggle the field on change
        if (assistanceRequiredSelect) {
            assistanceRequiredSelect.addEventListener("change", function () {
                if (this.value === "Assisted") {
                    assistedByContainer.classList.remove("d-none");
                } else {
                    assistedByContainer.classList.add("d-none");
                }
            });
        }
    });



        function updateRunNumber() {
        const partSelect = document.getElementById("partNumber");
        const runHidden = document.getElementById("RunNumber");

        const selectedOption = partSelect.options[partSelect.selectedIndex];
        if (!selectedOption) return;

        const selectedRun = selectedOption.getAttribute("data-run") || "";
        runHidden.value = selectedRun;  // Store value in hidden field
    }

</script>
