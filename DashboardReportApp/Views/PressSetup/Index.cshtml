@model List<DashboardReportApp.Models.PressSetupModel>

@{
    ViewData["Title"] = "Press Setup Log";
    var operators = ViewData["Operators"] as List<string> ?? new List<string>();
    var machines = ViewData["Machines"] as List<string> ?? new List<string>();
    var trainers = ViewData["Trainers"] as List<string> ?? new List<string>();
    var partsList = ViewData["Parts"] as List<Scheduled>; // Replace with your actual model type
}

<!-- Style to adjust the search filter input size -->
<style>
    #myReactTableRoot input[type="search"] {
        width: 200px; /* adjust as needed */
    }
</style>

<div class="container mt-4">
    <h1 class="text-center mb-4">Press Setup Log</h1>

    <!-- Smaller Login Button placed under the heading -->
    <div class="text-center mb-4">
        <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#loginSetupModal">
            Login to Setup
        </button>
    </div>

    @if (ViewData["Message"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @ViewData["Message"]
        </div>
    }

    @if (ViewData["Error"] != null)
    {
        <div class="alert alert-danger fade show" role="alert">
            @ViewData["Error"]
        </div>
    }
    <!-- Open Setups -->
    <h2 class="text-center mb-4">Open Setups</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            @if (Model != null && Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-bordered align-middle">
                        <thead class="table-dark">
                            <tr>
                                <th>Part</th>
                                <th>Component</th>
                                <th>Production #</th>
                                <th>Run</th>
                                <th>Operator</th>
                                <th>Machine</th>
                                <th>Start Time</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var login in Model)  // Model already filtered to open in the controller
                            {
                                var startIso = login.StartDateTime?.ToString("o") ?? "";
                                <tr>
                                    <td>@login.Part</td>
                                    <td>@login.Component</td>
                                    <td>@login.ProdNumber</td>
                                    <td>@login.Run</td>
                                    <td>@login.Operator</td>
                                    <td>@login.Machine</td>
                                    <td>@(login.StartDateTime?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm"
                                                onclick="openStopSetupModal('@login.Part', '@login.Run', '@startIso', '@login.Machine')">
                                            Logout of Setup
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <p class="mb-0">No open setups.</p>
            }
        </div>
    </div>


    <h2 class="text-center mt-4">All Setup Records</h2>
    <div class="card shadow mb-4">
        <div class="card-body">

            <!-- Filters -->
            <div class="d-flex align-items-center gap-2 mb-3 flex-wrap">
                <div class="d-flex flex-column">
                    <label class="form-label mb-1" for="setupMachine">Machine</label>
                    <select id="setupMachine" class="form-select" style="min-width:140px">
                        <option value="">All machines</option>
                        @foreach (var m in machines)
                        {
                            <option value="@m">@m</option>
                        }
                    </select>
                </div>

                <div class="d-flex flex-column">
                    <label class="form-label mb-1" for="setupStart">Start date</label>
                    <input type="date" id="setupStart" class="form-control">
                </div>

                <div class="d-flex flex-column">
                    <label class="form-label mb-1" for="setupEnd">End date</label>
                    <input type="date" id="setupEnd" class="form-control">
                </div>

                <div class="flex-grow-1 d-flex flex-column" style="min-width:260px">
                    <label class="form-label mb-1" for="setupSearch">Search</label>
                    <input type="search" id="setupSearch" class="form-control"
                           placeholder="part, component, run, operator, machine…">
                </div>

                <div class="d-flex flex-column">
                    <label class="form-label mb-1" for="setupPageSize">Page size</label>
                    <select id="setupPageSize" class="form-select">
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100" selected>100</option>
                        <option value="200">200</option>
                        <option value="500">500</option>
                    </select>
                </div>

                <div class="d-flex flex-column justify-content-end">
                    <button id="setupClear" type="button" class="btn btn-outline-secondary">
                        Clear
                    </button>
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table table-striped table-bordered shadow-sm" id="setupTable">
                    <thead class="table-dark">
                        <tr>
                            <th data-key="Id">Id</th>
                            <th data-key="Part">Part</th>
                            <th data-key="Component">Component</th>
                            <th data-key="ProdNumber">Production #</th>
                            <th data-key="Run">Run</th>
                            <th data-key="Operator">Operator</th>
                            <th data-key="Machine">Machine</th>
                            <th data-key="StartDateTime">Start</th>
                            <th data-key="EndDateTime">End</th>
                            <th data-key="Difficulty">Difficulty</th>
                            <th data-key="SetupComp">Setup Complete</th>
                            <th data-key="AssistanceReq">Assist Req</th>
                            <th data-key="AssistedBy">Assisted By</th>
                            <th data-key="Notes">Notes</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <!-- Pager + Summary -->
            <div class="d-flex justify-content-between align-items-center mt-2">
                <small id="setupSummary">Loading…</small>
                <div id="setupPager" class="btn-group"></div>
            </div>

        </div>
    </div>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
          const state = {
            page: 1,
            pageSize: 100,
            search: "",
            machine: "",
            start: "", // YYYY-MM-DD
            end: "",   // YYYY-MM-DD
            sortBy: "StartDateTime",
            sortDir: "desc"
          };

          const $tableBody = document.querySelector("#setupTable tbody");
          const $summary   = document.getElementById("setupSummary");
          const $pager     = document.getElementById("setupPager");

          const $machine   = document.getElementById("setupMachine");
          const $start     = document.getElementById("setupStart");
          const $end       = document.getElementById("setupEnd");
          const $search    = document.getElementById("setupSearch");
          const $pageSize  = document.getElementById("setupPageSize");
          const $clear     = document.getElementById("setupClear");

          fetch("/PressSetup/ApiMachines").then(r => r.json()).then(list => {
  const cur = $machine.value;
  $machine.innerHTML = '<option value="">All machines</option>'
    + list.map(m => `<option value="${m}">${m}</option>`).join('');
  $machine.value = cur;
}).catch(()=>{});


          const debounce = (fn, ms=300) => { let t; return (...a)=>{clearTimeout(t); t=setTimeout(()=>fn(...a), ms);} };

          function fmt(dt) {
            if (!dt) return "";
            try { return new Date(dt).toLocaleString(); } catch { return dt; }
          }

          async function load() {
            const url = new URL("/PressSetup/Records", window.location.origin);
            url.searchParams.set("page", state.page);
            url.searchParams.set("pageSize", state.pageSize);
            url.searchParams.set("sortBy", state.sortBy);
            url.searchParams.set("sortDir", state.sortDir);
            if (state.search)  url.searchParams.set("search", state.search);
            if (state.machine) url.searchParams.set("machine", state.machine);
            if (state.start)   url.searchParams.set("startDate", state.start); // backend makes end exclusive
            if (state.end)     url.searchParams.set("endDate", state.end);

            const res = await fetch(url.toString(), { headers: { "Accept": "application/json" }});
            if (!res.ok) { console.error("Records failed", res.status); return; }
            const { rows, total, page, pageSize } = await res.json();

            state.page = page;
            state.pageSize = pageSize;

            // render rows
            $tableBody.innerHTML = "";
            for (const r of rows) {
              const tr = document.createElement("tr");
              tr.innerHTML = `
                <td>${r.id ?? ""}</td>
                <td>${r.part ?? ""}</td>
                <td>${r.component ?? ""}</td>
                <td>${r.prodNumber ?? ""}</td>
                <td>${r.run ?? ""}</td>
                <td>${r.operator ?? ""}</td>
                <td>${r.machine ?? ""}</td>
                <td>${fmt(r.startDateTime)}</td>
                <td>${fmt(r.endDateTime)}</td>
                <td>${r.difficulty ?? ""}</td>
                <td>${r.setupComp ?? ""}</td>
                <td>${r.assistanceReq ?? ""}</td>
                <td>${r.assistedBy ?? ""}</td>
                <td>${r.notes ?? ""}</td>`;
              $tableBody.appendChild(tr);
            }

            renderPager(total, page, pageSize);
            const startRow = total ? (page - 1) * pageSize + 1 : 0;
            const endRow   = Math.min(page * pageSize, total);
            $summary.textContent = total ? `Showing ${startRow}–${endRow} of ${total}` : "No results";
          }

          function renderPager(total, page, pageSize) {
            const totalPages = Math.max(1, Math.ceil(total / pageSize));
            $pager.innerHTML = "";

            const btn = (text, disabled, onClick) => {
              const b = document.createElement("button");
              b.type = "button";
              b.className = "btn btn-outline-secondary btn-sm";
              b.textContent = text;
              b.disabled = disabled;
              b.addEventListener("click", onClick);
              $pager.appendChild(b);
            };

            btn("« First", page === 1, () => { state.page = 1; load(); });
            btn("‹ Prev",  page === 1, () => { state.page = Math.max(1, page - 1); load(); });
            btn("Next ›",  page >= totalPages, () => { state.page = Math.min(totalPages, page + 1); load(); });
            btn("Last »",  page >= totalPages, () => { state.page = totalPages; load(); });
          }

          // Sorting on header click (matches PressSetupService switch)
          document.querySelectorAll("#setupTable thead th").forEach(th => {
            th.style.cursor = "pointer";
            th.addEventListener("click", () => {
              const key = th.dataset.key; // e.g. "StartDateTime"
              if (!key) return;
              if (state.sortBy === key) state.sortDir = (state.sortDir === "asc" ? "desc" : "asc");
              else { state.sortBy = key; state.sortDir = "asc"; }
              state.page = 1;
              load();
            });
          });

          // Filters
          $machine.addEventListener("change", () => { state.machine = $machine.value; state.page = 1; load(); });
          $start.addEventListener("change",   () => { state.start   = $start.value;   state.page = 1; load(); });
          $end.addEventListener("change",     () => { state.end     = $end.value;     state.page = 1; load(); });
          $search.addEventListener("input", debounce(e => { state.search = e.target.value.trim(); state.page = 1; load(); }, 300));
          $pageSize.addEventListener("change", e => { state.pageSize = +e.target.value || 100; state.page = 1; load(); });

          $clear.addEventListener("click", () => {
            state.page = 1; state.pageSize = +$pageSize.value || 100;
            state.search = ""; state.machine = ""; state.start = ""; state.end = "";
            $search.value = ""; $machine.value = ""; $start.value = ""; $end.value = "";
            load();
          });

          load();
        });
    </script>



<!-- Modal for Login to Setup -->
<div id="loginSetupModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <form id="loginSetupForm" method="post" asp-action="Login">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login to Setup</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- Part Selection Dropdown -->
                    <div class="mb-3">
                        <label for="modalPartNumber" class="form-label">Part Number</label>
                        <select id="modalPartNumber" name="Part" class="form-control" required onchange="updateHiddenFieldsModal()">
                            <option value="">-- Select Part --</option>
                            @foreach (var part in ViewData["Parts"] as List<Scheduled> ?? new List<Scheduled>())
                            {
                                <option value="@part.Part"
                                        data-prodnumber="@part.ProdNumber"
                                        data-run="@part.Run"
                                        data-component="@part.Component"
                                        data-subcomponent="@part.Subcomponent">
                                    @($"{part.Part} -> {part.Component} (Production Number: {part.ProdNumber}, Run Number: {part.Run})")
                                </option>
                            }
                        </select>

                    </div>


                    <!-- Hidden Inputs for additional part details -->
                    <input type="hidden" id="modalRunNumber" name="Run" />
                    <input type="hidden" id="modalProdNumber" name="ProdNumber" />
                    <input type="hidden" id="modalComponent" name="Component" />
                    <input type="hidden" id="modalSubcomponent" name="Subcomponent" />

                    <!-- Operator Dropdown -->
                    <div class="mb-3">
                        <label for="modalOperatorName" class="form-label">Operator</label>
                        <select id="modalOperatorName" name="Operator" class="form-control" required>
                            <option value="">-- Select Operator --</option>
                            @foreach (var op in operators)
                            {
                                <option value="@op">@op</option>
                            }
                        </select>
                    </div>

                    <!-- Machine Dropdown -->
                    <div class="mb-3">
                        <label for="modalMachine" class="form-label">Machine</label>
                        <select id="modalMachine" name="Machine" class="form-control" required>
                            <option value="">-- Select Machine --</option>
                            @foreach (var machine in machines)
                            {
                                <option value="@machine">@machine</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Modal for Stopping/Logging Out of Setup -->
<!-- Modal for Stopping/Logging Out of Setup -->
<div id="stopSetupModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <form id="stopSetupForm" method="post" asp-action="Logout">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Stop Setup</h5>
                    <button type="button" class="btn-close" onclick="closeModal()"></button>
                </div>
                <div class="modal-body">
                    <!-- Hidden fields for identifying the correct record -->
                    <input type="hidden" id="modalPart" name="partNumber" />
                    <input type="hidden" id="modalProdNumber" name="prodNumber" />
                    <input type="hidden" id="modalRun" name="runNumber" />
                    <input type="hidden" id="modalStartDateTime" name="startDateTime" />
                    <!-- NEW: Hidden field for the machine/device ID with unique ID -->
                    <input type="hidden" id="logoutMachine" name="machine" />

                    <!-- Assistance Required -->
                    <div class="mb-3">
                        <label for="modalAssistanceRequired" class="form-label">Assistance Required</label>
                        <select id="modalAssistanceRequired" name="assistanceRequired" class="form-control" required>
                            <option value="">-- Select Assistance --</option>
                            <option value="Solo">Solo</option>
                            <option value="Assisted">Assisted</option>
                        </select>
                    </div>

                    <!-- Assisted By (hidden until "Assisted" is chosen) -->
                    <div class="mb-3 d-none" id="assistedByContainer">
                        <label for="modalAssistedBy" class="form-label">Assisted By</label>
                        <select id="modalAssistedBy" name="assistedBy" class="form-control">
                            <option value="">-- Select Trainer --</option>
                            @foreach (var trainer in trainers)
                            {
                                <option value="@trainer">@trainer</option>
                            }
                        </select>
                    </div>

                    <!-- Setup Complete -->
                    <div class="mb-3">
                        <label for="modalSetupComplete" class="form-label">Setup Complete</label>
                        <select id="modalSetupComplete" name="setupComplete" class="form-control" required>
                            <option value="">-- Select Status --</option>
                            <option value="Yes">Yes</option>
                            <option value="No">No</option>
                        </select>
                    </div>

                    <!-- First Part Inspection Checkbox (conditionally displayed when Setup Complete == Yes) -->
                    <div class="mb-3 d-none" id="inspectionCheckboxContainer">
                        <input type="checkbox" id="firstPartInspectionCheckbox" name="firstInspectionDone" value="true" />
                        <label for="firstPartInspectionCheckbox">First Part Inspection Done and Sent</label>
                    </div>

                    <!-- Notes -->
                    <div class="mb-3">
                        <label for="modalNotes" class="form-label">Notes</label>
                        <textarea id="modalNotes" name="notes" class="form-control text-area-large"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-danger">Confirm Logout</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
        function updateHiddenFieldsModal() {
        const partSelect = document.getElementById("modalPartNumber");
        const selectedOption = partSelect.options[partSelect.selectedIndex];
        if (!selectedOption) return;

        // Update hidden fields for submission
        document.getElementById("modalProdNumber").value = selectedOption.getAttribute("data-prodnumber") || "";
        document.getElementById("modalRunNumber").value = selectedOption.getAttribute("data-run") || "";
        document.getElementById("modalComponent").value = selectedOption.getAttribute("data-component") || "";
        document.getElementById("modalSubcomponent").value = selectedOption.getAttribute("data-subcomponent") || "";

        // Update visible fields to show the selected part and component side by side
        document.getElementById("displayPart").value = partSelect.value;
        document.getElementById("displayComponent").value = selectedOption.getAttribute("data-component") || "";
    }



   

      function openStopSetupModal(part, run, startDateTime, machine) {
        console.log("openStopSetupModal called with machine:", machine);
        document.getElementById("modalPart").value = part;
        document.getElementById("modalRun").value = run;
        document.getElementById("modalStartDateTime").value = startDateTime;
        // Set the machine value on the uniquely identified hidden field.
        document.getElementById("logoutMachine").value = machine;
        console.log("logoutMachine.value set to:", document.getElementById("logoutMachine").value);
        const modal = new bootstrap.Modal(document.getElementById("stopSetupModal"));
        modal.show();
    }






    function closeModal() {
        const modalElement = document.getElementById("stopSetupModal");
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        modalInstance.hide();
    }

    // Show/Hide "Assisted By" field based on assistance selection
    document.addEventListener("DOMContentLoaded", function () {
        const assistanceRequiredSelect = document.getElementById("modalAssistanceRequired");
        const assistedByContainer = document.getElementById("assistedByContainer");
        if (assistanceRequiredSelect) {
            assistanceRequiredSelect.addEventListener("change", function () {
                if (this.value === "Assisted") {
                    assistedByContainer.classList.remove("d-none");
                } else {
                    assistedByContainer.classList.add("d-none");
                }
            });
        }
    });


</script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Conditional display for the "First Part Inspection" checkbox based on "Setup Complete" selection
        const modalSetupComplete = document.getElementById("modalSetupComplete");
        const inspectionCheckboxContainer = document.getElementById("inspectionCheckboxContainer");

        modalSetupComplete.addEventListener("change", function() {
            if (this.value === "Yes") {
                // Show the checkbox if setup is complete
                inspectionCheckboxContainer.classList.remove("d-none");
            } else {
                // Hide the checkbox if setup is not complete and reset its state
                inspectionCheckboxContainer.classList.add("d-none");
                document.getElementById("firstPartInspectionCheckbox").checked = false;
            }
        });

        // Validate the "First Part Inspection" checkbox on form submission if setup is marked complete,
        // and handle the spinner directly for this form.
        const stopSetupForm = document.getElementById("stopSetupForm");
        stopSetupForm.addEventListener("submit", function(e) {
            if (modalSetupComplete.value === "Yes") {
                const inspectionCheckbox = document.getElementById("firstPartInspectionCheckbox");
                if (!inspectionCheckbox.checked) {
                    alert("First inspection must be done and sent to complete setup.");
                    e.preventDefault(); // Prevent form submission if checkbox is not checked
                    return;
                }
            }
            // Validation passed; show the spinner and let the submission proceed.
            showSpinner();
        });

        // Global spinner listener for all other forms
        document.addEventListener("submit", function(e) {
            // Exclude the stopSetupForm since we handle its spinner locally.
            if (e.target.id === "stopSetupForm") return;
            setTimeout(function() {
                if (!e.defaultPrevented) {
                    showSpinner();
                }
            }, 10);
        });
    });
</script>

   


<script src="/js/mydatatable.bundle.js"></script>
