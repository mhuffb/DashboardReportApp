@{
    ViewData["Title"] = "Press Mix Bag Change";
    var operators = ViewData["OperatorList"] as List<string> ?? new List<string>();
    var equipment = ViewData["EquipmentList"] as List<string> ?? new List<string>();
    var openParts = ViewData["Parts"] as List<DashboardReportApp.Models.PressSetupModel>
                    ?? new List<DashboardReportApp.Models.PressSetupModel>();
    var allRecords = ViewData["AllRecords"] as List<DashboardReportApp.Models.PressMixBagChangeModel> ?? new();
    var page = (int?)ViewData["Page"] ?? 1;
    var pageSize = (int?)ViewData["PageSize"] ?? 25;
    var totalPages = (int?)ViewData["TotalPages"] ?? 1;
    var totalCount = (int?)ViewData["TotalCount"] ?? allRecords.Count;
}

<style>
    .modal-dialog.modal-xxl {
        max-width: 90% !important;
    }
</style>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill"></i> @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}
@if (TempData["Error"] != null && !ViewContext.HttpContext.Request.Method.Equals("GET"))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill"></i> @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Press Mix Bag Change</h1>

    <div class="text-center mb-4">
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#bagChangeModal">
            Log Mix Bag Change
        </button>
    </div>

    <div class="modal fade" id="bagChangeModal" tabindex="-1" data-bs-focus="false" aria-labelledby="bagChangeModalLabel">
        <div class="modal-dialog modal-xl" style="max-width:1200px;">


            <div class="modal-content">
                <form id="bagChangeForm" asp-action="Submit" method="post">
                    <input type="hidden" id="SentDateTime" name="SentDateTime" value="@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")" />

                    <div class="modal-header">
                        <h5 class="modal-title" id="bagChangeModalLabel">Log Mix Bag Change</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <div id="labelStep">
                            <p class="mb-2 fw-bold text-center">Select Label Type:</p>
                            <div class="d-flex justify-content-around">
                                <img src="/img/advantage.jpg" class="label-img" data-type="advantage" style="height:200px;cursor:pointer;">
                                <img src="/img/hoganas.jpg" class="label-img" data-type="hoganas" style="height:200px;cursor:pointer;">
                                <img src="/img/hoeganaes.jpg" class="label-img" data-type="hoeganaes" style="height:200px;cursor:pointer;">
                            </div>
                        </div>

                        <div id="scanStep" class="d-none mt-4 text-center">
                            <p class="fw-bold">Scan the highlighted barcode:</p>
                            <button type="button" class="btn btn-secondary btn-sm mb-2" id="backToLabelsBtn">← Back</button>
                            <div style="position:relative;display:inline-block;">
                                <img id="labelPreview" src="" style="height:200px;">
                            </div>

                            <!-- Single-scan input (Advantage & Hoganas) -->
                            <input type="text" id="barcodeInput1" class="form-control mt-3" placeholder="Scan barcode here..." />

                            <!-- Second input only visible for Hoeganaes -->
                            <input type="text" id="barcodeInput2" class="form-control mt-2 d-none" placeholder="Scan second barcode..." />
                        </div>


                        <div id="formStep" class="d-none mt-4">
                            <div class="row g-3">
                                <div class="col">
                                    <label class="form-label">Lot Number</label>
                                    <input type="text" class="form-control" name="LotNumber" id="LotNumber" readonly />
                                </div>
                                <div class="col">
                                    <label class="form-label">Material Code</label>
                                    <input type="text" class="form-control" name="MaterialCode" id="MaterialCode" readonly />
                                </div>
                            </div>
                            <div class="row g-3 mt-2">
                                <div class="col">
                                    <label class="form-label">Weight (lbs)</label>
                                    <input type="text" class="form-control" name="WeightLbs" id="WeightLbs" readonly />
                                </div>
                                <div class="col">
                                    <label class="form-label">Bag Number</label>
                                    <input type="text" class="form-control" name="BagNumber" id="BagNumber" readonly />
                                </div>
                            </div>

                            <div class="mb-3 mt-3">
                                <label class="form-label">Part:</label>
                                <select id="partNumber" name="Part" class="form-control" required onchange="updateFields()">
                                    <option value="">-- Select Part --</option>
                                    @foreach (var p in openParts)
                                    {
                                        <option value="@p.Part"
                                                data-component="@p.Component"
                                                data-prodnumber="@p.ProdNumber"
                                                data-run="@p.Run"
                                                data-operator="@p.Operator"
                                                data-machine="@p.Machine">
                                            @p.Part -> @p.Component (Prod: @p.ProdNumber, Run: @p.Run)
                                        </option>
                                    }
                                </select>
                                <!-- 👇 ADD THESE 👇 -->
                                <input type="hidden" id="RunNumber" name="Run" />
                                <input type="hidden" id="Component" name="Component" />
                                <input type="hidden" id="ProdNumber" name="ProdNumber" />
                                
                            </div>

                            <div class="mb-3">
                                <label class="form-label" for="operatorName">Operator</label>
                                <select id="operatorName" name="Operator" class="form-control" required>
                                    <option value="">-- Select Operator --</option>
                                    @foreach (var op in operators)
                                    {
                                        <option value="@op">@op</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="operatorName">Machine</label>
                            <select id="machine" name="Machine" class="form-control">
                                <option value="">-- Select Machine --</option>
                                @foreach (var m in equipment)
                                {
                                    <option value="@m">@m</option>
                                }
                            </select>
                            </div>

                            <div class="mb-3 mt-3">
                                <label class="form-label">Notes</label>
                                <textarea name="Notes" class="form-control"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary d-none" id="submitBtn">
                            <i class="bi bi-check-circle"></i> Submit
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <h2 class="text-center mt-4">All Mix Bag Change Records</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="container-fluid px-3 mt-4">
                <div id="mixBagChangeTableRoot"
                     data-records='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(allRecords))'></div>
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        <form id="pageSizeForm" class="d-inline">
                            <label class="me-2">Rows per page</label>

                            <select id="pageSize" name="pageSize" class="form-select d-inline-block" style="width:auto;">
                                @foreach (var s in new[] { 10, 25, 50, 100, 200 })
                                {
                                    <option value="@s" selected="@(s == pageSize)">@s</option>
                                }
                            </select>
                        </form>

                        <span class="ms-3">Total: @totalCount</span>
                    </div>

                    <nav>
                        <ul class="pagination mb-0">
                            <li class="page-item @(page <= 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = 1, pageSize })">First</a>
                            </li>
                            <li class="page-item @(page <= 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = Math.Max(1, page - 1), pageSize })">Prev</a>
                            </li>
                            <li class="page-item disabled">
                                <span class="page-link">Page @(page) of @(totalPages)</span>
                            </li>
                            <li class="page-item @(page >= totalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = Math.Min(totalPages, page + 1), pageSize })">Next</a>
                            </li>
                            <li class="page-item @(page >= totalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = totalPages, pageSize })">Last</a>
                            </li>
                        </ul>
                    </nav>
                </div>


            </div>
        </div>
    </div>
</div>
<script src="/js/mydatatable.bundle.js" defer></script>

<script>
    function updateFields() {
           const opt = partNumber.options[partNumber.selectedIndex];
           if (!opt) return;
           RunNumber.value    = opt.dataset.run        || "";
           Component.value    = opt.dataset.component  || "";
           ProdNumber.value   = opt.dataset.prodnumber || "";

          fetch(`/PressMixBagChange/GetRunInfo?part=${opt.value}&prod=${ProdNumber.value}&run=${RunNumber.value}`)
    .then(r => r.json())
    .then(data => {
        operatorName.value = data.op || "";
        machine.value      = data.mach || "";
    });

       }


    document.addEventListener('DOMContentLoaded', () => {

        const partNumber    = document.getElementById('partNumber');
        const RunNumber     = document.getElementById('RunNumber');
        const Component     = document.getElementById('Component');
        const ProdNumber    = document.getElementById('ProdNumber');
        const operatorName  = document.getElementById('operatorName');
        const machine       = document.getElementById('machine');




          const raw = document.getElementById('mixBagChangeTableRoot').dataset.records || "[]";
    const data = JSON.parse(raw);

    // Map booleans/ints to a friendly string + optional badge
    data.forEach(r => {
      const v = r.IsOverride;
      const isTrue = v === true || v === 1 || v === "1";
      const isFalse = v === false || v === 0 || v === "0";

      // Choose one of these display styles:

      // 1) Simple Yes/No:
      r.IsOverrideDisplay = isTrue ? "Yes" : (isFalse ? "No" : "");


      // Make dates pretty
      if (r.SentDateTime)  r.SentDateTime  = new Date(r.SentDateTime).toLocaleString();
      if (r.OverrideAt)    r.OverrideAt    = new Date(r.OverrideAt).toLocaleString();
    });

    const cols = [
      {key:'Id',label:'ID'},
      {key:'Part',label:'Part'},
      {key:'Component',label:'Component'},
      {key:'ProdNumber',label:'Production Number'},
      {key:'Run',label:'Run'},
      {key:'Operator',label:'Operator'},
      {key:'Machine',label:'Machine'},
      {key:'LotNumber',label:'Lot Number'},
      {key:'MaterialCode',label:'Material Code'},
      {key:'WeightLbs', label:'Weight (lbs)'},
      {key:'BagNumber',label:'Bag #'},
      {key:'SentDateTime',label:'Sent Time'},
      {key:'Notes',label:'Notes'},

      // Use the display field instead of the raw boolean:
      {key:'IsOverrideDisplay', label:'Override?'},
      {key:'OverrideBy', label:'Supervisor'},
      {key:'OverrideAt', label:'Override Time'}
    ];

    window.renderMyDataTable?.("mixBagChangeTableRoot", data, cols, true);
    });

  
        let selectedType = "";
    let scanCount = 0;
    let tempScan1 = "";

    document.querySelectorAll('.label-img').forEach(img => {
        img.addEventListener('click', () => {
            selectedType = img.dataset.type;
            document.getElementById('labelStep').classList.add('d-none');
            document.getElementById('scanStep').classList.remove('d-none');
            document.getElementById('barcodeInput1').value = "";
            document.getElementById('barcodeInput2').value = "";
            document.getElementById('barcodeInput2').classList.add('d-none');
            scanCount = 0;
            tempScan1 = "";

            if (selectedType === "advantage") {
                document.getElementById('labelPreview').src = "/img/advantage-highlight.jpg";
            }
            if (selectedType === "hoganas") {
                document.getElementById('labelPreview').src = "/img/hoganas-highlight.jpg";
            }
            if (selectedType === "hoeganaes") {
                document.getElementById('labelPreview').src = "/img/hoeganaes-highlight.jpg";
                // show second box since two scans needed
                document.getElementById('barcodeInput2').classList.remove('d-none');
            }
            // Put cursor in first scan box
            document.getElementById('barcodeInput1').focus();
        });
    });

    // handle scan
    document.getElementById('barcodeInput1').addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            const val = e.target.value.trim();
            const lot = document.getElementById('LotNumber');
            const mat = document.getElementById('MaterialCode');
            const wgt = document.getElementById('WeightLbs');
            const bag = document.getElementById('BagNumber');

            // Advantage
            if (selectedType === "advantage") {
                const parts = val.split(";");
                mat.value = parts[1] || "";
                lot.value = parts[2] || "";
                wgt.value = parts[3] || "";
                bag.value = parts[4] || "";
                gotoForm();
                return;
            }

               // Hoganas
    if (selectedType === "hoganas") {
        const b = val.slice(6,13);
        const c = val.slice(14,17);
        const d = val.slice(17,20);
        lot.value = b;
        wgt.value = Math.round(parseFloat(c) * 2.20462).toFixed(2);
        bag.value = d;

        // AJAX lookup to powdermix table
        fetch(`/PressMixBagChange/GetMaterialCodeByLot?lot=${b}`)
            .then(r => r.text())
            .then(code => {
                mat.value = code;
                gotoForm();
            });
        return;
    }


            // Hoeganaes - first scan
            if (selectedType === "hoeganaes") {
                tempScan1 = val;
                // move focus to second box
                document.getElementById('barcodeInput2').focus();
            }
        }
    });

    document.getElementById('barcodeInput2').addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            const val = e.target.value.trim();
            const lot = document.getElementById('LotNumber');
            const mat = document.getElementById('MaterialCode');
            const wgt = document.getElementById('WeightLbs');
            const bag = document.getElementById('BagNumber');

               if (selectedType === "hoeganaes") {
        const lt = tempScan1.slice(0,10);
        const bg = tempScan1.slice(10,14);
        lot.value = lt;
        bag.value = bg;
        wgt.value = parseFloat(val.replace(/[^0-9.]/g, "")).toFixed(2);

        // AJAX lookup to powdermix table
        fetch(`/PressMixBagChange/GetMaterialCodeByLot?lot=${lt}`)
            .then(r => r.text())
            .then(code => {
                mat.value = code;
                gotoForm();
            });
    }

        }
    });

    function gotoForm() {
        document.getElementById('scanStep').classList.add('d-none');
        document.getElementById('formStep').classList.remove('d-none');
        document.getElementById('submitBtn').classList.remove('d-none');
    }

    document.getElementById('backToLabelsBtn').addEventListener('click', () => {
        document.getElementById('scanStep').classList.add('d-none');
        document.getElementById('labelStep').classList.remove('d-none');
        document.getElementById('barcodeInput1').value = "";
        document.getElementById('barcodeInput2').value = "";
        document.getElementById('barcodeInput2').classList.add('d-none');
        scanCount = 0;
        tempScan1 = "";
    });


</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var err = '@TempData["Error"]';
        if (err) {
            // Open the modal again automatically
            var myModal = new bootstrap.Modal(document.getElementById('bagChangeModal'));
            myModal.show();

            // Put the error inside the modal
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger';
            alertDiv.innerText = err;
            document.querySelector('#bagChangeModal .modal-body').prepend(alertDiv);
        }
    });
</script>
<form id="bagChangeForm" asp-action="Submit" method="post">
    <!-- id added -->
    
</form>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    (() => {
      const form = document.getElementById('bagChangeForm');
      const modalEl = document.getElementById('bagChangeModal');

      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const fd = new FormData(form);

        // Post to AJAX endpoint instead of full submit
        let res = await fetch('/PressMixBagChange/SubmitAjax', { method: 'POST', body: fd });
        if (res.ok) {
          await Swal.fire({ icon: 'success', title: 'Saved', text: 'Mix Bag Change successfully logged!' });
          // close modal and refresh list (you can also live-append)
          bootstrap.Modal.getInstance(modalEl)?.hide();
          location.reload(); // or re-fetch table data if you have a function
          return;
        }

        // Not OK -> inspect reason
        let payload;
        try { payload = await res.json(); } catch { payload = { code: 'UNKNOWN', message: 'Error' }; }

        if (payload.code === 'MATERIAL_MISMATCH') {
          // Offer override
          const { value: doOverride } = await Swal.fire({
            icon: 'warning',
            title: 'Material Mismatch',
            html: `
              <div class="text-start">
                <div><strong>Scheduled:</strong> ${payload.scheduled || '(none)'}</div>
                <div><strong>Scanned:</strong> ${payload.scanned || '(none)'}</div>
                <div class="mt-2">This does not match the schedule. A supervisor can override.</div>
              </div>`,
            showCancelButton: true,
            confirmButtonText: 'Supervisor Override',
            cancelButtonText: 'Cancel'
          });

          if (!doOverride) return;

          const { value: pin } = await Swal.fire({
            title: 'Enter Supervisor PIN',
            input: 'password',
            inputAttributes: { autocapitalize: 'off', autocomplete: 'off' },
            inputPlaceholder: 'PIN',
            showCancelButton: true,
            confirmButtonText: 'Authorize'
          });

          if (!pin) return;

          const fd2 = new FormData(form);
          fd2.append('overridePin', pin);

          const res2 = await fetch('/PressMixBagChange/SubmitAjax', { method: 'POST', body: fd2 });
          if (res2.ok) {
            const okPayload = await res2.json();
            await Swal.fire({ icon: 'success', title: 'Override Applied', text: 'Record saved with supervisor authorization.' });
            bootstrap.Modal.getInstance(modalEl)?.hide();
            location.reload();
            return;
          } else {
            const p2 = await res2.json().catch(() => ({}));
            if (p2.code === 'BAD_PIN') {
              await Swal.fire({ icon: 'error', title: 'Invalid PIN', text: p2.message || 'Authorization failed.' });
            } else {
              await Swal.fire({ icon: 'error', title: 'Error', text: p2.message || 'Could not save with override.' });
            }
          }
          return;
        }

        if (payload.code === 'NO_SCHEDULE_ROW') {
          // No row case, also allow override
          const { value: doOverride } = await Swal.fire({
            icon: 'warning',
            title: 'No Schedule Row',
            text: payload.message || 'No schedule row found. A supervisor can override.',
            showCancelButton: true,
            confirmButtonText: 'Supervisor Override',
            cancelButtonText: 'Cancel'
          });
          if (!doOverride) return;

          const { value: pin } = await Swal.fire({
            title: 'Enter Supervisor PIN',
            input: 'password',
            showCancelButton: true,
            confirmButtonText: 'Authorize'
          });
          if (!pin) return;

          const fd2 = new FormData(form);
          fd2.append('overridePin', pin);
          const res2 = await fetch('/PressMixBagChange/SubmitAjax', { method: 'POST', body: fd2 });
          if (res2.ok) {
            await Swal.fire({ icon: 'success', title: 'Override Applied', text: 'Record saved with supervisor authorization.' });
            bootstrap.Modal.getInstance(modalEl)?.hide();
            location.reload();
          } else {
            const p2 = await res2.json().catch(() => ({}));
            await Swal.fire({ icon: 'error', title: 'Error', text: p2.message || 'Could not save with override.' });
          }
          return;
        }

        // Generic error
        await Swal.fire({ icon: 'error', title: 'Error', text: payload.message || 'An error occurred.' });
      });
    })();
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
      const sel = document.getElementById('pageSize');
      sel?.addEventListener('change', () => {
        const newSize = sel.value;
        // when page size changes, bounce to page 1
        const url = new URL(window.location.href);
        url.searchParams.set('page', '1');
        url.searchParams.set('pageSize', newSize);
        window.location.href = url.toString();
      });
    });
</script>
