@model IEnumerable<DashboardReportApp.Models.ProcessChangeRequest>

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Admin View - Process Change Requests</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger fade show" role="alert">
            <strong>Validation Errors:</strong>
            <ul>
                @foreach (var state in ViewData.ModelState)
                {
                    foreach (var error in state.Value.Errors)
                    {
                        <li><strong>@state.Key:</strong> @error.ErrorMessage</li>
                    }
                }
            </ul>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-bordered shadow-sm w-100">
            <thead class="table-dark">
                <tr>
                    <th style="width: 5%;">ID</th>
                    <th style="width: 15%;">Part</th>
                    <th style="width: 10%;">Requester</th>
                    <th style="width: 10%;">Request Date</th>
                    <th style="width: 20%;">Request</th>
                    <th style="width: 10%;">Updated By</th>
                    <th style="width: 20%;">Update Result</th>
                    <th style="width: 12%;">File</th>
                    <th style="width: 7%;">Test Requested</th>
                    <th style="width: 10%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <form asp-action="UpdateRequest" method="post" enctype="multipart/form-data">
                            <input type="hidden" name="Id" value="@item.Id" />
                        <td>@item.Id</td>
                        <td><input type="text" name="Part" value="@item.Part" class="form-control w-100" required /></td>
                        <td><input type="text" name="Requester" value="@item.Requester" class="form-control w-100" required /></td>
                        <td><input type="date" name="ReqDate" value="@(item.ReqDate?.ToString("yyyy-MM-dd") ?? "")" class="form-control w-100" /></td>
                        <td><textarea name="Request" class="form-control w-100 text-area-large">@item.Request</textarea></td>
                        <td><input type="text" name="UpdatedBy" value="@item.UpdatedBy" class="form-control w-100" /></td>
                        <td><textarea name="UpdateResult" class="form-control w-100 text-area-large">@item.UpdateResult</textarea></td>
                        <td>
                            <input type="hidden" name="FileAddress" value="@item.FileAddress" />
                            <input type="file" name="FileUpload" class="form-control w-100" accept="image/*,.pdf,.doc,.docx" />
                                @if (!string.IsNullOrEmpty(item.FileAddress))
                                {
                                <button type="button" class="btn btn-info btn-sm mt-2 fetch-image-btn w-100" data-file-path="@item.FileAddress">
                                    Preview File
                                </button>
                                }
                        </td>
                        <td><input type="text" name="TestRequested" value="@item.TestRequested" class="form-control w-100" /></td>
                        <td>
                            <button type="submit" class="btn btn-success btn-sm w-100"><i class="bi bi-save"></i> Save</button>
                        </td>
                        </form>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Custom Styles -->
<style>
    /* Force full width */
    .full-width-table {
        width: 100% !important;
    }

    /* Ensures table doesn't shrink */
    .table {
        table-layout: fixed;
    }

    /* Keep table responsive with horizontal scrolling */
    .table-responsive {
        overflow-x: auto;
        display: block;
    }

    /* Increase text area size */
    .text-area-large {
        min-height: 150px !important;
    }

    /* Improve button animations */
    .btn {
        transition: 0.3s ease-in-out;
    }

        .btn:hover {
            transform: scale(1.05);
        }
</style>
<!-- Bootstrap Modal for Image Preview -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" />
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const modalElement = document.getElementById('imageModal');

            // For each "Preview Image" button
            document.querySelectorAll('.fetch-image-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const filePath = this.dataset.filePath;

                    if (!filePath) {
                        console.error("File path is missing.");
                        alert("No file path provided.");
                        return;
                    }

                    // Fetch image data from your endpoint
                    fetch(`/MaintenanceRequest/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                        .then(response => {
                            if (!response.ok) throw new Error("Failed to fetch the image.");
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                // Set the modal image source to the returned URL
                                const modalImage = document.getElementById('modalImage');
                                modalImage.src = data.url;

                                // Show the modal (using Bootstrap 5)
                                const bootstrapModal = new bootstrap.Modal(modalElement);
                                bootstrapModal.show();
                            } else {
                                alert(`Error: ${data.message}`);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching image:', error);
                            alert('An error occurred while fetching the image.');
                        });
                });
            });

            // Cleanup the modal when hidden
            modalElement.addEventListener('hidden.bs.modal', function () {
                const modalImage = document.getElementById('modalImage');
                modalImage.src = '';

                // Remove any leftover backdrop (rare, but just in case)
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) modalBackdrop.remove();

                document.body.classList.remove('modal-open');
                document.body.style = ''; // Clear any inline styles
            });
        });
    </script>
}