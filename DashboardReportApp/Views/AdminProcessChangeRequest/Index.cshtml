@model IEnumerable<DashboardReportApp.Models.ProcessChangeRequestModel>

@{
    ViewData["Title"] = "Admin View - Process Change Requests";
}

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Admin View - Process Change Requests</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger fade show" role="alert">
            <strong>Validation Errors:</strong>
            <ul>
                @foreach (var state in ViewData.ModelState)
                {
                    foreach (var error in state.Value.Errors)
                    {
                        <li><strong>@state.Key:</strong> @error.ErrorMessage</li>
                    }
                }
            </ul>
        </div>
    }

    <!-- Search and Date Filter -->
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" id="processChangeSearchInput" class="form-control" placeholder="Search Process Change Requests..." />
        </div>
        <div class="col-md-6">
            <input type="date" id="processChangeDateFilter" class="form-control" placeholder="Filter by Request Date" />
        </div>
    </div>

    <!-- Table with FileAddress1 and FileAddress2 columns -->
    <div class="table-responsive">
        <table class="custom-table">
            <thead>
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Part</th>
                    <th class="sortable">Requester</th>
                    <th class="sortable">Request Date</th>
                    <th class="sortable">Request</th>
                    <th class="sortable">Updated By</th>
                    <th class="sortable">Update Result</th>
                    <th class="sortable">File Address 1</th>
                    <th class="sortable">File Address 2</th>
                    <th class="sortable">Test Requested</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Part</td>
                        <td>@item.Requester</td>
                        <td>@(item.ReqDate?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@item.Request</td>
                        <td>@item.UpdatedBy</td>
                        <td>@item.UpdateResult</td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.FileAddress1))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn" data-file-path="@item.FileAddress1">
                                    Preview File 1
                                </button>
                            }
                            else
                            {
                                <span>No file</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.FileAddress2))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn" data-file-path="@item.FileAddress2">
                                    Preview File 2
                                </button>
                            }
                            else
                            {
                                <span>No file</span>
                            }
                        </td>
                        <td>@item.TestRequested</td>
                        <td>
                            <button type="button" class="btn btn-primary btn-sm edit-btn"
                                    data-id="@item.Id"
                                    data-part="@item.Part"
                                    data-requester="@item.Requester"
                                    data-reqdate="@(item.ReqDate?.ToString("yyyy-MM-dd") ?? "")"
                                    data-request="@item.Request"
                                    data-updatedby="@item.UpdatedBy"
                                    data-updateresult="@item.UpdateResult"
                                    data-fileaddress1="@item.FileAddress1"
                                    data-fileaddress2="@item.FileAddress2"
                                    data-testrequested="@item.TestRequested">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Process Change Request Modal -->
<div class="modal fade" id="editProcessChangeModal" tabindex="-1" aria-labelledby="editProcessChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProcessChangeModalLabel">Edit Process Change Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- The form posts to the UpdateRequest endpoint -->
            <form asp-action="UpdateRequest" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" name="Id" id="edit-id" />
                    <div class="mb-3">
                        <label for="edit-part" class="form-label">Part</label>
                        <input type="text" name="Part" id="edit-part" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="edit-requester" class="form-label">Requester</label>
                        <!-- Dropdown for Requester -->
                        <select name="Requester" id="edit-requester" class="form-control" required>
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.OperatorNames is List<string> operatorList)
                            {
                                foreach (var op in operatorList)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-reqdate" class="form-label">Request Date</label>
                        <input type="date" name="ReqDate" id="edit-reqdate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-request" class="form-label">Request</label>
                        <textarea name="Request" id="edit-request" class="form-control text-area-large"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="edit-updatedby" class="form-label">Updated By</label>
                        <!-- Dropdown for UpdatedBy -->
                        <select name="UpdatedBy" id="edit-updatedby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.OperatorNames is List<string> operatorList2)
                            {
                                foreach (var op2 in operatorList2)
                                {
                                    <option value="@op2">@op2</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-updateresult" class="form-label">Update Result</label>
                        <textarea name="UpdateResult" id="edit-updateresult" class="form-control text-area-large"></textarea>
                    </div>
                    <!-- File Upload for FileAddress1 -->
                    <div class="mb-3">
                        <label for="edit-file1" class="form-label">File 1</label>
                        <input type="hidden" name="FileAddress1" id="edit-fileaddress1" />
                        <input type="file" name="FileUpload1" id="edit-file1" class="form-control" accept="image/*,.pdf,.doc,.docx" />
                        <div id="current-file1" class="mt-2"></div>
                    </div>
                    <!-- File Upload for FileAddress2 -->
                    <div class="mb-3">
                        <label for="edit-file2" class="form-label">File 2</label>
                        <input type="hidden" name="FileAddress2" id="edit-fileaddress2" />
                        <input type="file" name="FileUpload2" id="edit-file2" class="form-control" accept="image/*,.pdf,.doc,.docx" />
                        <div id="current-file2" class="mt-2"></div>
                    </div>
                    <div class="mb-3">
                        <label for="edit-testrequested" class="form-label">Test Requested</label>
                        <input type="text" name="TestRequested" id="edit-testrequested" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success"><i class="bi bi-save"></i> Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- File Preview Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <!-- We'll show an <img> if it's an image, otherwise an <iframe> for PDFs -->
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <iframe id="modalPDF" class="w-100" style="height:600px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // ----------------------------------
            // File Preview Logic (Image or PDF)
            const modalElement = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            const modalPDF = document.getElementById('modalPDF');

            document.querySelectorAll('.fetch-image-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const filePath = this.dataset.filePath;
                    if (!filePath) {
                        console.error("File path is missing.");
                        alert("No file path provided.");
                        return;
                    }

                    fetch(`/AdminProcessChangeRequest/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                        .then(response => {
                            if (!response.ok) throw new Error("Failed to fetch the file.");
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                // Check file extension to see if it's a PDF or an image
                                if (data.url.toLowerCase().endsWith('.pdf')) {
                                    modalImage.style.display = 'none';
                                    modalPDF.style.display = 'block';
                                    modalPDF.src = data.url; // display PDF in iframe
                                }
                                else {
                                    modalPDF.style.display = 'none';
                                    modalImage.style.display = 'block';
                                    modalImage.src = data.url; // display image
                                }
                                new bootstrap.Modal(modalElement).show();
                            } else {
                                alert(`Error: ${data.message}`);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching file:', error);
                            alert('An error occurred while fetching the file.');
                        });
                });
            });

            // Cleanup the modal when hidden
            modalElement.addEventListener('hidden.bs.modal', function () {
                modalImage.src = '';
                modalPDF.src = '';
                modalImage.style.display = 'none';
                modalPDF.style.display = 'none';

                // Remove leftover backdrop
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) modalBackdrop.remove();
                document.body.classList.remove('modal-open');
                document.body.style = '';
            });

            // ----------------------------------
            // Sorting & Filtering
            let currentSortColumn = null;
            let currentSortDir = 'asc';
            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if(!th.dataset.label) {
                    th.dataset.label = th.innerText.trim();
                }
                th.addEventListener('click', () => {
                    if (currentSortColumn === index) {
                        currentSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSortColumn = index;
                        currentSortDir = 'asc';
                    }
                    updateTable();
                    updateSortIndicators();
                });
            });

            document.getElementById('processChangeSearchInput').addEventListener('input', updateTable);
            document.getElementById('processChangeDateFilter').addEventListener('change', updateTable);

            function updateTable() {
                const searchQuery = document.getElementById('processChangeSearchInput').value.trim().toLowerCase();
                const selectedDate = document.getElementById('processChangeDateFilter').value;
                let rows = Array.from(tbody.querySelectorAll('tr'));

                // Sorting
                if (currentSortColumn !== null) {
                    rows.sort((a, b) => {
                        const aCells = a.querySelectorAll('td');
                        const bCells = b.querySelectorAll('td');
                        const aText = aCells[currentSortColumn]?.innerText.trim() ?? '';
                        const bText = bCells[currentSortColumn]?.innerText.trim() ?? '';
                        const aNum = parseFloat(aText);
                        const bNum = parseFloat(bText);

                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return currentSortDir === 'asc' ? aNum - bNum : bNum - aNum;
                        } else {
                            return currentSortDir === 'asc'
                                ? aText.localeCompare(bText)
                                : bText.localeCompare(aText);
                        }
                    });
                }

                // Re-append sorted rows
                rows.forEach(row => tbody.appendChild(row));

                // Filtering: search across all columns except last (Actions), date is col index 3
                rows.forEach(row => {
                    let show = true;
                    const cells = row.querySelectorAll('td');

                    if (searchQuery) {
                        let found = false;
                        for (let i = 0; i < cells.length - 1; i++) {
                            if (cells[i].innerText.toLowerCase().includes(searchQuery)) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) show = false;
                    }
                    if (selectedDate) {
                        const dateCell = cells[3];
                        if (dateCell && dateCell.innerText.trim() !== selectedDate) {
                            show = false;
                        }
                    }
                    row.style.display = show ? '' : 'none';
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label;
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }
            updateTable();

            // ----------------------------------
            // Edit Modal Logic
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const id = this.getAttribute('data-id');
                    const part = this.getAttribute('data-part');
                    const requester = this.getAttribute('data-requester');
                    const reqdate = this.getAttribute('data-reqdate');
                    const request = this.getAttribute('data-request');
                    const updatedby = this.getAttribute('data-updatedby');
                    const updateresult = this.getAttribute('data-updateresult');
                    const fileaddress1 = this.getAttribute('data-fileaddress1');
                    const fileaddress2 = this.getAttribute('data-fileaddress2');
                    const testrequested = this.getAttribute('data-testrequested');

                    document.getElementById('edit-id').value = id;
                    document.getElementById('edit-part').value = part;
                    // Requester dropdown
                    const reqDropdown = document.getElementById('edit-requester');
                    reqDropdown.value = requester;
                    document.getElementById('edit-reqdate').value = reqdate;
                    document.getElementById('edit-request').value = request;
                    // UpdatedBy dropdown
                    const updDropdown = document.getElementById('edit-updatedby');
                    updDropdown.value = updatedby;

                    document.getElementById('edit-updateresult').value = updateresult;
                    document.getElementById('edit-fileaddress1').value = fileaddress1;
                    document.getElementById('edit-fileaddress2').value = fileaddress2;
                    document.getElementById('edit-testrequested').value = testrequested;

                    if (fileaddress1) {
                        document.getElementById('current-file1').innerHTML = '<a href="' + fileaddress1 + '" target="_blank">Current File 1</a>';
                    } else {
                        document.getElementById('current-file1').innerHTML = 'No file uploaded';
                    }
                    if (fileaddress2) {
                        document.getElementById('current-file2').innerHTML = '<a href="' + fileaddress2 + '" target="_blank">Current File 2</a>';
                    } else {
                        document.getElementById('current-file2').innerHTML = 'No file uploaded';
                    }

                    new bootstrap.Modal(document.getElementById('editProcessChangeModal')).show();
                });
            });
        });
    </script>
}
