@model IEnumerable<DashboardReportApp.Models.ProcessChangeRequestModel>

@{
    ViewData["Title"] = "Admin View - Process Change Requests";
}

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Admin View - Process Change Requests</h2>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger fade show" role="alert">
            <strong>Validation Errors:</strong>
            <ul>
                @foreach (var state in ViewData.ModelState)
                {
                    foreach (var error in state.Value.Errors)
                    {
                        <li><strong>@state.Key:</strong> @error.ErrorMessage</li>
                    }
                }
            </ul>
        </div>
    }

    <!-- Centered Search and Date Range Filter with Clear Filters button -->
    <div class="d-flex justify-content-center mb-3">
        <div class="input-group" style="max-width: 500px;">
            <input type="text" id="processChangeSearchInput" class="form-control" placeholder="Search Process Change Requests..." />
            <input type="date" id="processChangeStartDateFilter" class="form-control" placeholder="From" />
            <input type="date" id="processChangeEndDateFilter" class="form-control" placeholder="To" />
            <button class="btn btn-secondary" id="clearFiltersBtn" type="button">Clear Filters</button>
        </div>
    </div>

    <!-- Table with FileAddress1 and FileAddress2 columns -->
    <div class="table-responsive">
        <table class="custom-table">
            <thead>
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Part</th>
                    <th class="sortable">Requester</th>
                    <th class="sortable">Request Date</th>
                    <th class="sortable">Request</th>
                    <th class="sortable">Updated By</th>
                    <th class="sortable">Update Result</th>
                    <th class="sortable">File Address 1</th>
                    <th class="sortable">File Address 2</th>
                    <th class="sortable">Test Requested</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Part</td>
                        <td>@item.Requester</td>
                        <td>@(item.ReqDate?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@item.Request</td>
                        <td>@item.UpdatedBy</td>
                        <td>@item.UpdateResult</td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.FileAddress1))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn" data-file-path="@item.FileAddress1">
                                    Preview File 1
                                </button>
                            }
                            else
                            {
                                <span>No file</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.FileAddress2))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn" data-file-path="@item.FileAddress2">
                                    Preview File 2
                                </button>
                            }
                            else
                            {
                                <span>No file</span>
                            }
                        </td>
                        <td>@item.TestRequested</td>
                        <td>
                            <button type="button" class="btn btn-primary btn-sm edit-btn"
                                    data-id="@item.Id"
                                    data-part="@item.Part"
                                    data-requester="@item.Requester"
                                    data-reqdate="@(item.ReqDate?.ToString("yyyy-MM-dd") ?? "")"
                                    data-request="@item.Request"
                                    data-updatedby="@item.UpdatedBy"
                                    data-updateresult="@item.UpdateResult"
                                    data-fileaddress1="@item.FileAddress1"
                                    data-fileaddress2="@item.FileAddress2"
                                    data-testrequested="@item.TestRequested">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Process Change Request Modal -->
<div class="modal fade" id="editProcessChangeModal" tabindex="-1" aria-labelledby="editProcessChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProcessChangeModalLabel">Edit Process Change Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- The form posts to the UpdateRequest endpoint -->
            <form asp-action="UpdateRequest" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" name="Id" id="edit-id" />
                    <div class="mb-3">
                        <label for="edit-part" class="form-label">Part</label>
                        <input type="text" name="Part" id="edit-part" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="edit-requester" class="form-label">Requester</label>
                        <!-- Dropdown for Requester -->
                        <select name="Requester" id="edit-requester" class="form-control" required>
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.OperatorNames is List<string> operatorList)
                            {
                                foreach (var op in operatorList)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-reqdate" class="form-label">Request Date</label>
                        <input type="date" name="ReqDate" id="edit-reqdate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-request" class="form-label">Request</label>
                        <textarea name="Request" id="edit-request" class="form-control text-area-large"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="edit-updatedby" class="form-label">Updated By</label>
                        <!-- Dropdown for UpdatedBy -->
                        <select name="UpdatedBy" id="edit-updatedby" class="form-control">
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.OperatorNames is List<string> operatorList2)
                            {
                                foreach (var op2 in operatorList2)
                                {
                                    <option value="@op2">@op2</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-updateresult" class="form-label">Update Result</label>
                        <textarea name="UpdateResult" id="edit-updateresult" class="form-control text-area-large"></textarea>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" value="1" id="notifyProlinkChk">
                        <label class="form-check-label" for="notifyProlinkChk">
                            Send Notification to Update Prolink
                        </label>
                    </div>


                    <!-- File Upload for FileAddress1 -->
                    <div class="mb-3">
                        <label for="edit-file1" class="form-label">File 1</label>
                        <input type="hidden" name="FileAddress1" id="edit-fileaddress1" />
                        <input type="file" name="FileUpload1" id="edit-file1" class="form-control" accept="image/*,.pdf,.doc,.docx" />
                        <div id="current-file1" class="mt-2"></div>
                    </div>
                    <!-- File Upload for FileAddress2 -->
                    <div class="mb-3">
                        <label for="edit-file2" class="form-label">File 2</label>
                        <input type="hidden" name="FileAddress2" id="edit-fileaddress2" />
                        <input type="file" name="FileUpload2" id="edit-file2" class="form-control" accept="image/*,.pdf,.doc,.docx" />
                        <div id="current-file2" class="mt-2"></div>
                    </div>
                    <div class="mb-3">
                        <label for="edit-testrequested" class="form-label">Test Requested</label>
                        <input type="text" name="TestRequested" id="edit-testrequested" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" id="saveChangesBtn" class="btn btn-success"><i class="bi bi-save"></i> Save Changes</button>

                </div>
            </form>
        </div>
    </div>
</div>

<!-- File Preview Modal (Image or PDF) -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <!-- Use "modal-xl" for extra-wide modal -->
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <!-- If the file is PDF, show iframe; otherwise show image -->
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <!-- Increase the iframe height -->
                <iframe id="modalPDF" class="w-100" style="height:900px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // ----------------------------------
            // File Preview Logic (Image or PDF)
            const modalElement = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            const modalPDF = document.getElementById('modalPDF');
               
        const form = document.querySelector('#editProcessChangeModal form');

            document.querySelectorAll('.fetch-image-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const filePath = this.dataset.filePath;
                    if (!filePath) {
                        console.error("File path is missing.");
                        alert("No file path provided.");
                        return;
                    }

                    fetch(`/AdminProcessChangeRequest/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                        .then(response => {
                            if (!response.ok) throw new Error("Failed to fetch the file.");
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                // Display PDF or image based on file extension
                                if (data.url.toLowerCase().endsWith('.pdf')) {
                                    modalImage.style.display = 'none';
                                    modalPDF.style.display = 'block';
                                    modalPDF.src = data.url;
                                } else {
                                    modalPDF.style.display = 'none';
                                    modalImage.style.display = 'block';
                                    modalImage.src = data.url;
                                }
                                new bootstrap.Modal(modalElement).show();
                            } else {
                                alert(`Error: ${data.message}`);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching file:', error);
                            alert('An error occurred while fetching the file.');
                        });
                });
            });

            modalElement.addEventListener('hidden.bs.modal', function () {
                modalImage.src = '';
                modalPDF.src = '';
                modalImage.style.display = 'none';
                modalPDF.style.display = 'none';

                // Cleanup any leftover backdrop
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) modalBackdrop.remove();
                document.body.classList.remove('modal-open');
                document.body.style = '';
            });

            // ----------------------------------
            // Sorting & Filtering
            let currentSortColumn = null;
            let currentSortDir = 'asc';
            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if (!th.dataset.label) {
                    th.dataset.label = th.innerText.trim();
                }
                th.addEventListener('click', () => {
                    currentSortDir = (currentSortColumn === index && currentSortDir === 'asc') ? 'desc' : 'asc';
                    currentSortColumn = index;
                    updateTable();
                    updateSortIndicators();
                });
            });

            document.getElementById('processChangeSearchInput').addEventListener('input', updateTable);
            document.getElementById('processChangeStartDateFilter').addEventListener('change', updateTable);
            document.getElementById('processChangeEndDateFilter').addEventListener('change', updateTable);
            document.getElementById('clearFiltersBtn').addEventListener('click', function () {
                document.getElementById('processChangeSearchInput').value = '';
                document.getElementById('processChangeStartDateFilter').value = '';
                document.getElementById('processChangeEndDateFilter').value = '';
                updateTable();
            });

            function updateTable() {
                const searchQuery = document.getElementById('processChangeSearchInput').value.trim().toLowerCase();
                const startDateValue = document.getElementById('processChangeStartDateFilter').value;
                const endDateValue = document.getElementById('processChangeEndDateFilter').value;
                let rows = Array.from(tbody.querySelectorAll('tr'));

                // Sorting
                if (currentSortColumn !== null) {
                    rows.sort((a, b) => {
                        const aCells = a.querySelectorAll('td');
                        const bCells = b.querySelectorAll('td');
                        const aText = aCells[currentSortColumn]?.innerText.trim() ?? '';
                        const bText = bCells[currentSortColumn]?.innerText.trim() ?? '';
                        const aNum = parseFloat(aText);
                        const bNum = parseFloat(bText);

                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return currentSortDir === 'asc' ? aNum - bNum : bNum - aNum;
                        } else {
                            return currentSortDir === 'asc'
                                ? aText.localeCompare(bText)
                                : bText.localeCompare(aText);
                        }
                    });
                }

                // Re-append sorted rows
                rows.forEach(row => tbody.appendChild(row));

                // Filtering: search across all columns except last (Actions), date is at column index 3
                rows.forEach(row => {
                    let show = true;
                    const cells = row.querySelectorAll('td');

                    // Search filter
                    if (searchQuery) {
                        let found = false;
                        for (let i = 0; i < cells.length - 1; i++) {
                            if (cells[i].innerText.toLowerCase().includes(searchQuery)) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) show = false;
                    }

                    // Date range filter (col index 3)
                    if (startDateValue || endDateValue) {
                        let rowDateStr = cells[3].innerText.trim();
                        if (rowDateStr) {
                            let rowDate = new Date(rowDateStr);
                            if (startDateValue) {
                                let startDate = new Date(startDateValue);
                                if (rowDate < startDate) {
                                    show = false;
                                }
                            }
                            if (endDateValue) {
                                let endDate = new Date(endDateValue);
                                if (rowDate > endDate) {
                                    show = false;
                                }
                            }
                        } else {
                            show = false;
                        }
                    }
                    row.style.display = show ? '' : 'none';
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label;
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }

            updateTable();

                // ---------------------------------- Edit Modal Logic
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', function () {

                    const id = this.dataset.id;
                    const part = this.dataset.part;
                    const requester = this.dataset.requester;
                    const reqdate = this.dataset.reqdate;
                    const request = this.dataset.request;
                    const updatedby = this.dataset.updatedby;
                    const updateresult = this.dataset.updateresult;
                    const fileaddress1 = this.dataset.fileaddress1;
                    const fileaddress2 = this.dataset.fileaddress2;
                    const testrequested = this.dataset.testrequested;

                    document.getElementById('edit-id').value = id;
                    document.getElementById('edit-part').value = part;
                    document.getElementById('edit-requester').value = requester;
                    document.getElementById('edit-reqdate').value = reqdate;
                    document.getElementById('edit-request').value = request;
                    document.getElementById('edit-updatedby').value = updatedby;
                    document.getElementById('edit-updateresult').value = updateresult;
                    document.getElementById('edit-fileaddress1').value = fileaddress1;
                    document.getElementById('edit-fileaddress2').value = fileaddress2;
                    document.getElementById('edit-testrequested').value = testrequested;

                    document.getElementById('current-file1').innerHTML = fileaddress1 ? `<a href="${fileaddress1}" target="_blank">Current File 1</a>` : 'No file uploaded';
                    document.getElementById('current-file2').innerHTML = fileaddress2 ? `<a href="${fileaddress2}" target="_blank">Current File 2</a>` : 'No file uploaded';


                    document.getElementById('notifyProlinkChk').checked = false;

                    new bootstrap.Modal(document.getElementById('editProcessChangeModal')).show();
                });
            });

                  form.addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(form);
            const notify = document.getElementById('notifyProlinkChk').checked;
            const modalInstance = bootstrap.Modal.getInstance(document.getElementById('editProcessChangeModal'));

            fetch(form.getAttribute('action'), {
                method: 'POST',
                body: formData
            })
            .then(resp => {
                if (!resp.ok) throw new Error();
                const id = document.getElementById('edit-id').value;
                const part = document.getElementById('edit-part').value;
                const request = document.getElementById('edit-request').value;
                const requester = document.getElementById('edit-requester').value;
                const reqdate = document.getElementById('edit-reqdate').value;
                const updatedby = document.getElementById('edit-updatedby').value;
                const updateresult = document.getElementById('edit-updateresult').value;

                if (notify) {
                    return fetch(`/AdminProcessChangeRequest/SendProlinkNotification?id=${id}&part=${encodeURIComponent(part)}&request=${encodeURIComponent(request)}&requester=${encodeURIComponent(requester)}&reqdate=${encodeURIComponent(reqdate)}&updatedby=${encodeURIComponent(updatedby)}&updateresult=${encodeURIComponent(updateresult)}`)
                        .then(r => {
                            if (!r.ok) throw new Error();
                            return "Saved and email sent to mhuff@sintergy.net!";
                        });
                } else {
                    return "Saved successfully.";
                }
            })
            .then(message => {
                alert(message);

                // ✅ Close modal
                if (modalInstance) {
                    modalInstance.hide();
                }

                // Optional: Reload the page to reflect updates
                 location.reload();
            })
            .catch(() => {
                alert('Error saving or sending notification.');
            });
        });


        });
    </script>
}
