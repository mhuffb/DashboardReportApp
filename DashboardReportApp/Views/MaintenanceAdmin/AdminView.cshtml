@model IEnumerable<DashboardReportApp.Models.MaintenanceRequestModel>

<div class="container-fluid px-3 mt-4">
    <h1 class="text-center mb-4">Admin - Maintenance Requests</h1>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show text-center" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-bordered shadow-sm">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Equipment</th>
                    <th>Requester</th>
                    <th>Requested Date</th>
                    <th>Problem</th>
                    <th>Closed Date</th>
                    <th>Down Status</th>
                    <th>Hour Meter</th>
                    <th>Hold Status</th>
                    <th>Department</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in Model)
                {
                    <tr>
                        <form asp-controller="MaintenanceAdmin" asp-action="UpdateRequest" method="post" enctype="multipart/form-data">
                            <input type="hidden" name="Id" value="@request.Id" />

                        <td>@request.Id</td>
                        <td><input type="text" name="Equipment" class="form-control" value="@request.Equipment" required /></td>
                        <td><input type="text" name="Requester" class="form-control" value="@request.Requester" required /></td>
                        <td><input type="date" name="RequestedDate" class="form-control" value="@(request.RequestedDate?.ToString("yyyy-MM-dd") ?? "")" /></td>
                        <td><textarea name="Problem" class="form-control text-area-large">@request.Problem</textarea></td>
                        <td><input type="datetime-local" name="ClosedDateTime" class="form-control" value="@(request.ClosedDateTime?.ToString("yyyy-MM-ddTHH:mm") ?? "")" /></td>
                        <td>
                            <select name="DownStatus" class="form-select">
                                <option value="true" selected="@(request.DownStatus == true ? "selected" : null)">Yes</option>
                                <option value="false" selected="@(request.DownStatus == false ? "selected" : null)">No</option>
                            </select>
                        </td>
                        <td><input type="number" name="HourMeter" class="form-control" step="0.01" value="@request.HourMeter" /></td>
                        <td>
                            <select name="HoldStatus" class="form-select">
                                <option value="true" selected="@(request.HoldStatus == true ? "selected" : null)">Yes</option>
                                <option value="false" selected="@(request.HoldStatus == false ? "selected" : null)">No</option>
                            </select>
                        </td>
                        <td><input type="text" name="Department" class="form-control" value="@request.Department" /></td>
                        <td>
                            <button type="submit" class="btn btn-success btn-sm"><i class="bi bi-save"></i> Save</button>
                            <button type="button" class="btn btn-info btn-sm toggle-btn" data-target="#extraFields_@request.Id">
                                Expand
                            </button>
                        </td>
                        </form>
                    </tr>

                    <!-- Expandable Section for Additional Fields -->
                    <tr class="extra-fields d-none" id="extraFields_@request.Id">
                        <td colspan="11">
                            <div class="card card-body">
                                <h5>Additional Details</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label>Close By</label>
                                        <textarea name="CloseBy" class="form-control">@request.CloseBy</textarea>
                                    </div>
                                    <div class="col-md-6">
                                        <label>Close Result</label>
                                        <textarea name="CloseResult" class="form-control">@request.CloseResult</textarea>
                                    </div>
                                    <div class="col-md-6">
                                        <label>Hold Reason</label>
                                        <textarea name="HoldReason" class="form-control">@request.HoldReason</textarea>
                                    </div>
                                    <div class="col-md-6">
                                        <label>Hold Result</label>
                                        <textarea name="HoldResult" class="form-control">@request.HoldResult</textarea>
                                    </div>
                                    <div class="col-md-6">
                                        <label>File Address</label>
                                        <input type="text" name="FileAddress" class="form-control" value="@request.FileAddress" readonly />

                                        <!-- File Upload Input -->
                                        <label>Upload New File</label>
                                        <input type="file" name="FileUpload" class="form-control" accept="image/*,application/pdf" />

                                        <!-- Show Preview Button -->
                                        @if (!string.IsNullOrEmpty(request.FileAddress))
                                        {
                                            <button type="button" class="btn btn-primary btn-sm mt-2 preview-btn"
                                                    data-file-path="@request.FileAddress">
                                                Show Preview
                                            </button>
                                        }
                                    </div>
                                </div>
                                <button type="button" class="btn btn-danger btn-sm toggle-btn mt-2" data-target="#extraFields_@request.Id">
                                    Collapse
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Custom Styles -->
<style>
    /* Larger text areas */
    .text-area-large {
        min-height: 150px !important;
    }

    /* Smooth button animations */
    .btn {
        transition: 0.3s ease-in-out;
    }

        .btn:hover {
            transform: scale(1.05);
        }

    /* Center the form for a clean layout */
    .card {
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Responsive styling for alerts */
    .alert {
        max-width: 600px;
        margin: 0 auto;
    }

    /* Table improvements */
    .table-responsive {
        overflow-x: auto;
        display: block;
    }

    .extra-fields {
        background-color: #f8f9fa;
    }
    <!-- Custom Styles -->
   
    body {
        background-color: black !important;
        color: goldenrod !important;
    }

    .card {
        background-color: black !important;
        color: goldenrod !important;
        border: 1px solid goldenrod;
    }

    .table {
        color: goldenrod !important;
        background-color: black !important;
    }

        .table th, .table td {
            border-color: goldenrod !important;
        }

    .table-dark {
        background-color: black !important;
        color: goldenrod !important;
    }

    .form-control {
        background-color: black !important;
        color: goldenrod !important;
        border: 1px solid goldenrod !important;
    }

        .form-control::placeholder {
            color: goldenrod !important;
        }

    .btn:hover {
        transform: scale(1.05);
    }

    .text-area-large {
        min-height: 150px !important;
    }

    .table-responsive {
        overflow-x: auto;
        display: block;
    }
</style>


<!-- Bootstrap Modal for File Preview -->
<div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="previewImage" src="" alt="Preview" class="img-fluid" style="display: none;" />
                <iframe id="previewIframe" src="" style="display: none; width: 100%; height: 500px;"></iframe>
                <p id="noPreviewText" style="display: none;">No preview available for this file type.</p>
            </div>
        </div>
    </div>
</div>

<!-- Your JavaScript to Fetch & Display the Image -->
<script>
       document.addEventListener('DOMContentLoaded', function () {
        const modalElement = new bootstrap.Modal(document.getElementById('previewModal'));

        document.querySelectorAll('.preview-btn').forEach(button => {
            button.addEventListener('click', function () {
                const filePath = this.dataset.filePath;
                const previewImage = document.getElementById('previewImage');
                const previewIframe = document.getElementById('previewIframe');
                const noPreviewText = document.getElementById('noPreviewText');

                if (!filePath) {
                    noPreviewText.style.display = "block";
                    previewImage.style.display = "none";
                    previewIframe.style.display = "none";
                    modalElement.show();
                    return;
                }

                // Fetch the file URL from the server
                fetch(`/MaintenanceAdmin/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const fileExtension = filePath.split('.').pop().toLowerCase();

                            if (["jpg", "png", "jpeg"].includes(fileExtension)) {
                                previewImage.src = data.url;
                                previewImage.style.display = "block";
                                previewIframe.style.display = "none";
                                noPreviewText.style.display = "none";
                            } else if (fileExtension === "pdf") {
                                previewIframe.src = data.url;
                                previewIframe.style.display = "block";
                                previewImage.style.display = "none";
                                noPreviewText.style.display = "none";
                            } else {
                                noPreviewText.style.display = "block";
                                previewImage.style.display = "none";
                                previewIframe.style.display = "none";
                            }
                        } else {
                            alert(`Error: ${data.message}`);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching file:', error);
                        alert('An error occurred while fetching the file.');
                    });

                modalElement.show();
            });
        });

    });
</script>


<!-- JavaScript for File Preview -->
<script>
        document.addEventListener('DOMContentLoaded', function () {
        const modalElement = new bootstrap.Modal(document.getElementById('previewModal'));

        // For each "Preview" button
        document.querySelectorAll('.preview-btn').forEach(button => {
            button.addEventListener('click', function () {
                const filePath = this.dataset.filePath;
                const previewImage = document.getElementById('previewImage');
                const previewIframe = document.getElementById('previewIframe');
                const noPreviewText = document.getElementById('noPreviewText');

                if (!filePath) {
                    noPreviewText.style.display = "block";
                    previewImage.style.display = "none";
                    previewIframe.style.display = "none";
                    modalElement.show();
                    return;
                }

                // Fetch the file URL from the server
                fetch(`/MaintenanceAdmin/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const fileExtension = filePath.split('.').pop().toLowerCase();

                            if (["jpg", "png", "jpeg"].includes(fileExtension)) {
                                previewImage.src = data.url;
                                previewImage.style.display = "block";
                                previewIframe.style.display = "none";
                                noPreviewText.style.display = "none";
                            } else if (fileExtension === "pdf") {
                                previewIframe.src = data.url;
                                previewIframe.style.display = "block";
                                previewImage.style.display = "none";
                                noPreviewText.style.display = "none";
                            } else {
                                noPreviewText.style.display = "block";
                                previewImage.style.display = "none";
                                previewIframe.style.display = "none";
                            }
                        } else {
                            alert(`Error: ${data.message}`);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching file:', error);
                        alert('An error occurred while fetching the file.');
                    });

                modalElement.show();
            });
        });

        // Clean up the modal when it is hidden
        document.getElementById('previewModal').addEventListener('hidden.bs.modal', function () {
            const previewImage = document.getElementById('previewImage');
            const previewIframe = document.getElementById('previewIframe');
            const noPreviewText = document.getElementById('noPreviewText');

            // Reset the modal content
            previewImage.src = "";
            previewImage.style.display = "none";
            previewIframe.src = "";
            previewIframe.style.display = "none";
            noPreviewText.style.display = "none";

            // Remove any leftover backdrop (rare, but just in case)
            const modalBackdrop = document.querySelector('.modal-backdrop');
            if (modalBackdrop) {
                modalBackdrop.remove();
            }

            // Ensure the body is not in "modal-open" state
            document.body.classList.remove('modal-open');
            document.body.style = ''; // Clear any inline styles
        });
    });
</script>



<!-- JavaScript for Expand/Collapse -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.toggle-btn').forEach(button => {
            button.addEventListener('click', function () {
                const targetId = this.getAttribute('data-target');
                const targetRow = document.querySelector(targetId);

                if (targetRow.classList.contains('d-none')) {
                    targetRow.classList.remove('d-none');
                    this.textContent = "Collapse";
                    this.classList.remove('btn-info');
                    this.classList.add('btn-danger');
                } else {
                    targetRow.classList.add('d-none');
                    this.textContent = "Expand";
                    this.classList.remove('btn-danger');
                    this.classList.add('btn-info');
                }

                // Ensure all other rows remain correct when toggling
                document.querySelectorAll('.toggle-btn').forEach(otherBtn => {
                    const otherTargetId = otherBtn.getAttribute('data-target');
                    const otherTargetRow = document.querySelector(otherTargetId);

                    if (!otherTargetRow.classList.contains('d-none')) {
                        otherBtn.textContent = "Collapse";
                        otherBtn.classList.remove('btn-info');
                        otherBtn.classList.add('btn-danger');
                    } else {
                        otherBtn.textContent = "Expand";
                        otherBtn.classList.remove('btn-danger');
                        otherBtn.classList.add('btn-info');
                    }
                });
            });
        });
    });
</script>
