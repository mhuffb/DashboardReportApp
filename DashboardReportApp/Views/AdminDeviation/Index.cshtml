@model List<DashboardReportApp.Models.AdminDeviationModel>

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Admin Deviation Management</h2>

  @{
    var errsJson = TempData["ModelErrorsJson"] as string; // already JSON from controller
}





    <!-- Filter Section: Shrunk and Centered with Date Range and Clear Filters Button -->
    <div class="row mb-3 justify-content-center">
        <div class="col-auto">
            <input type="text" id="deviationSearchInput" class="form-control"
                   placeholder="Search deviations..." style="max-width:200px;" />
        </div>
        <div class="col-auto d-flex">
            <input type="date" id="deviationStartDate" class="form-control me-2"
                   style="max-width:150px;" />
            <input type="date" id="deviationEndDate" class="form-control"
                   style="max-width:150px;" />
        </div>
        <div class="col-auto">
            <button id="clearFilters" class="btn btn-secondary">Clear Filters</button>
        </div>
    </div>


    <!-- Table -->
    <div class="table-responsive">
        <table class="custom-table">
            <thead>
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Part</th>
                    <th class="sortable">Sent Date</th>
                    <th class="sortable">Discrepancy</th>
                    <th class="sortable">Operator</th>
                    <th class="sortable">Comm Method</th>
                    <th class="sortable">Disposition</th>
                    <th class="sortable">Approved By</th>
                    <th class="sortable">CAST Review Date</th>
                    <th class="sortable">File 1</th>
                    <th class="sortable">File 2</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var deviation in Model)
                {
                    <tr>
                        <td>@deviation.Id</td>
                        <td>@deviation.Part</td>
                        <td>@(deviation.SentDateTime?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@deviation.Discrepancy</td>
                        <td>@deviation.Operator</td>
                        <td>@deviation.CommMethod</td>
                        <td>@deviation.Disposition</td>
                        <td>@deviation.ApprovedBy</td>
                        <td>@(deviation.DateTimeCASTReview?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(deviation.FileAddress1))
                            {
                                <button type="button"
                                        class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-name="@deviation.FileAddress1">
                                    Preview 1
                                </button>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(deviation.FileAddress2))
                            {
                                <button type="button"
                                        class="btn btn-info btn-sm fetch-image-btn"
                                        data-file-name="@deviation.FileAddress2">
                                    Preview 2
                                </button>
                            }
                        </td>

                        <td>
                            <button type="button" class="btn btn-primary btn-sm edit-btn"
        data-payload='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(new {
            id = deviation.Id,
            part = deviation.Part ?? "",
            sentDate = deviation.SentDateTime?.ToString("yyyy-MM-dd") ?? "",
            discrepancy = deviation.Discrepancy ?? "",
            oper = deviation.Operator ?? "",
            comm = deviation.CommMethod ?? "",
            disposition = deviation.Disposition ?? "",
            approvedBy = deviation.ApprovedBy ?? "",
            castReview = deviation.DateTimeCASTReview?.ToString("yyyy-MM-dd") ?? "",
            file1 = deviation.FileAddress1 ?? "",
            file2 = deviation.FileAddress2 ?? ""
        }))'>
  Edit
</button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Deviation Modal -->
<div class="modal fade" id="editDeviationModal" tabindex="-1" aria-labelledby="editDeviationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editDeviationModalLabel">Edit Deviation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Form posts to Update action -->
            <form method="post" action="@Url.Action("Update", "AdminDeviation")" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" name="Id" id="edit-id" />

                    <div class="mb-3">
                        <label for="edit-part" class="form-label">Part</label>
                        <input type="text" name="Part" id="edit-part" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="edit-sentdate" class="form-label">Sent Date</label>
                        <input type="date" name="SentDateTime" id="edit-sentdate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-discrepancy" class="form-label">Discrepancy</label>
                        <textarea name="Discrepancy" id="edit-discrepancy" class="form-control text-area-large"></textarea>
                    </div>
                    <!-- Operator Dropdown -->
                    <div class="mb-3">
                        <label for="edit-operator" class="form-label">Operator</label>
                        <select name="Operator" id="edit-operator" class="form-control" required>
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.OperatorNames != null)
                            {
                                foreach (var op in (List<string>)ViewBag.OperatorNames)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <!-- Comm Method Dropdown -->
                    <div class="mb-3">
                        <label for="edit-commmethod" class="form-label">Comm Method</label>
                        <select name="CommMethod" id="edit-commmethod" class="form-control" required>
                            <option value="Phone Call">Phone Call</option>
                            <option value="Text Message">Text Message</option>
                            <option value="Email">Email</option>
                            <option value="In Person">In Person</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-disposition" class="form-label">Disposition</label>
                        <textarea name="Disposition" id="edit-disposition" class="form-control text-area-large"></textarea>
                    </div>
                    <!-- Approved By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-approvedby" class="form-label">Approved By</label>
                        <select name="ApprovedBy" id="edit-approvedby" class="form-control" required>
                            <option value="">-- Select Approved By --</option>
                            @if (ViewBag.ApprovedByOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.ApprovedByOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-castreview" class="form-label">CAST Review Date</label>
                        <input type="date" name="DateTimeCASTReview" id="edit-castreview" class="form-control" />
                    </div>

                    <!-- File Upload Section for File 1 -->
                    <div class="mb-3">
                        <label class="form-label">File 1 (Editable)</label>
                        <!-- Hidden input stores current FileAddress1 -->
                        <input type="hidden" name="FileAddress1" id="edit-fileaddress1" />
                        <div id="current-file1" class="mb-2"></div>
                        <input type="file" name="file1" id="edit-file1" class="form-control" accept="image/*,.pdf" />
                    </div>
                    <!-- File Upload Section for File 2 -->
                    <div class="mb-3">
                        <label class="form-label">File 2 (Editable)</label>
                        <!-- Hidden input stores current FileAddress2 -->
                        <input type="hidden" name="FileAddress2" id="edit-fileaddress2" />
                        <div id="current-file2" class="mb-2"></div>
                        <input type="file" name="file2" id="edit-file2" class="form-control" accept="image/*,.pdf" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-save"></i> Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bootstrap Modal for File Preview -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <iframe id="modalFile" class="w-100" style="height:500px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ----------------------------
        // Edit Modal Logic: Populate fields when an Edit button is clicked
     document.addEventListener('DOMContentLoaded', function () {
  // Grab elements once
  const $ = (id) => document.getElementById(id);
  const editId           = $('edit-id');
  const editPart         = $('edit-part');
  const editSentdate     = $('edit-sentdate');    // id="edit-sentdate"
  const editDiscrepancy  = $('edit-discrepancy');
  const editOperator     = $('edit-operator');
  const editCommmethod   = $('edit-commmethod');  // id="edit-commmethod"
  const editDisposition  = $('edit-disposition');
  const editApprovedby   = $('edit-approvedby');  // id="edit-approvedby"
  const editCastreview   = $('edit-castreview');  // id="edit-castreview"
  const editFileaddress1 = $('edit-fileaddress1');
  const editFileaddress2 = $('edit-fileaddress2');
  const currentFile1     = $('current-file1');
  const currentFile2     = $('current-file2');

  document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.addEventListener('click', function () {
      let p = {};
      try { p = JSON.parse(this.getAttribute('data-payload') || '{}'); } catch {}

      editId.value          = p.id ?? "";
      editPart.value        = p.part ?? "";
      editSentdate.value    = p.sentDate ?? "";
      editDiscrepancy.value = p.discrepancy ?? "";
      editOperator.value    = p.oper ?? "";
      editCommmethod.value  = p.comm ?? "";
      editDisposition.value = p.disposition ?? "";
      editApprovedby.value  = p.approvedBy ?? "";
      editCastreview.value  = p.castReview ?? "";

      // If dropdown value isn't found in options, clear it
      if (![...editOperator.options].some(o => o.value === editOperator.value)) editOperator.value = "";
      if (![...editApprovedby.options].some(o => o.value === editApprovedby.value)) editApprovedby.value = "";

      editFileaddress1.value = p.file1 || "";
      currentFile1.innerHTML = p.file1
        ? `<a href="/AdminDeviation/StreamFile?name=${encodeURIComponent(p.file1)}" target="_blank">Current File 1</a>`
        : "No file uploaded for File 1";

      editFileaddress2.value = p.file2 || "";
      currentFile2.innerHTML = p.file2
        ? `<a href="/AdminDeviation/StreamFile?name=${encodeURIComponent(p.file2)}" target="_blank">Current File 2</a>`
        : "No file uploaded for File 2";

      new bootstrap.Modal(document.getElementById('editDeviationModal')).show();
    });
  });
});

        // ----------------------------
        // File Preview Logic for table preview buttons
               document.addEventListener('DOMContentLoaded', function () {
          const imageModalElement = document.getElementById('imageModal');

          document.querySelectorAll('.fetch-image-btn').forEach(button => {
            button.addEventListener('click', function () {
              const fileName = this.dataset.fileName;
              if (!fileName) { alert("No file name provided."); return; }

              fetch(`/AdminDeviation/FetchFile?name=${encodeURIComponent(fileName)}`)
                .then(response => { if (!response.ok) throw new Error("Failed to fetch file URL."); return response.json(); })
                .then(data => {
                  if (!data.success) { alert(`Error: ${data.message}`); return; }

                  const url = data.url;
                  const modalImage = document.getElementById('modalImage');
                  const modalFile  = document.getElementById('modalFile');

                  if (url.match(/\.(jpg|jpeg|png|gif)(\?|$)/i)) {
                    modalImage.src = url;
                    modalImage.style.display = "block";
                    modalFile.style.display  = "none";
                  } else {
                    modalFile.src = url; // pdf or other -> iframe
                    modalFile.style.display  = "block";
                    modalImage.style.display = "none";
                  }

                  new bootstrap.Modal(imageModalElement).show();
                })
                .catch(error => {
                  console.error('Error fetching file:', error);
                  alert('An error occurred while fetching the file.');
                });
            });
          });

          imageModalElement.addEventListener('hidden.bs.modal', function () {
            document.getElementById('modalImage').src = '';
            document.getElementById('modalFile').src = '';
          });
        });


        // Filtering & Sorting Logic for the Table with Date Range Filtering
                document.addEventListener('DOMContentLoaded', function () {
            let currentSortColumn = null;
            let currentSortDir = 'asc';
            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            // Attach click events to sortable headers
            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if (!th.dataset.label) { th.dataset.label = th.innerText.trim(); }
                th.addEventListener('click', () => {
                    if (currentSortColumn === index) {
                        currentSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSortColumn = index;
                        currentSortDir = 'asc';
                    }
                    updateTable();
                    updateSortIndicators();
                });
            });

            // Listen for input changes on the search and date range fields
            document.getElementById('deviationSearchInput').addEventListener('input', updateTable);
            document.getElementById('deviationStartDate').addEventListener('change', updateTable);
            document.getElementById('deviationEndDate').addEventListener('change', updateTable);

            // Clear Filters Button
            document.getElementById('clearFilters').addEventListener('click', function () {
                document.getElementById('deviationSearchInput').value = '';
                document.getElementById('deviationStartDate').value = '';
                document.getElementById('deviationEndDate').value = '';
                updateTable();
            });

            function updateTable() {
                const searchQuery = document.getElementById('deviationSearchInput').value.trim().toLowerCase();
                const startDateValue = document.getElementById('deviationStartDate').value;
                const endDateValue = document.getElementById('deviationEndDate').value;
                let rows = Array.from(tbody.querySelectorAll('tr'));

                // Sorting
                if (currentSortColumn !== null) {
                    rows.sort((a, b) => {
                        const aCells = a.querySelectorAll('td');
                        const bCells = b.querySelectorAll('td');
                        const aText = aCells[currentSortColumn]?.innerText.trim() || '';
                        const bText = bCells[currentSortColumn]?.innerText.trim() || '';
                        const aNum = parseFloat(aText);
                        const bNum = parseFloat(bText);
                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return currentSortDir === 'asc' ? aNum - bNum : bNum - aNum;
                        } else {
                            return currentSortDir === 'asc'
                                ? aText.localeCompare(bText)
                                : bText.localeCompare(aText);
                        }
                    });
                }
                rows.forEach(row => tbody.appendChild(row));

                // Filtering: Check search query and date range (Sent Date in column index 2)
                rows.forEach(row => {
                    let show = true;
                    const cells = row.querySelectorAll('td');

                    // Search filter
                    if (searchQuery) {
                        let found = false;
                        for (let i = 0; i < cells.length; i++) {
                            if (cells[i].innerText.toLowerCase().includes(searchQuery)) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) { show = false; }
                    }

                    // Date range filter on Sent Date (assumed to be column index 2)
                    const dateCell = cells[2];
                    if (dateCell && dateCell.innerText.trim() !== "") {
                        const rowDate = new Date(dateCell.innerText.trim());
                        if (startDateValue) {
                            const startDate = new Date(startDateValue);
                            if (rowDate < startDate) { show = false; }
                        }
                        if (endDateValue) {
                            const endDate = new Date(endDateValue);
                            if (rowDate > endDate) { show = false; }
                        }
                    }
                    row.style.display = show ? '' : 'none';
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label;
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }

            updateTable();
        });

    </script>
}
