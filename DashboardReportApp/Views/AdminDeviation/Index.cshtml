@model List<DashboardReportApp.Models.AdminDeviationModel>

<div class="container-fluid px-3">
    <h2 class="text-center mb-4">Admin Deviation Management</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <!-- Filter Section -->
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" id="deviationSearchInput" class="form-control" placeholder="Search deviations..." />
        </div>
        <div class="col-md-6">
            <input type="date" id="deviationDateFilter" class="form-control" placeholder="Filter by Sent Date" />
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table class="custom-table">
            <thead>
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Part</th>
                    <th class="sortable">Sent Date</th>
                    <th class="sortable">Discrepancy</th>
                    <th class="sortable">Operator</th>
                    <th class="sortable">Comm Method</th>
                    <th class="sortable">Disposition</th>
                    <th class="sortable">Approved By</th>
                    <th class="sortable">CAST Review Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var deviation in Model)
                {
                    <tr>
                        <td>@deviation.Id</td>
                        <td>@deviation.Part</td>
                        <td>@(deviation.SentDateTime?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@deviation.Discrepancy</td>
                        <td>@deviation.Operator</td>
                        <td>@deviation.CommMethod</td>
                        <td>@deviation.Disposition</td>
                        <td>@deviation.ApprovedBy</td>
                        <td>@(deviation.DateTimeCASTReview?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>
                            <button type="button" class="btn btn-primary btn-sm edit-btn"
                                    data-id="@deviation.Id"
                                    data-part="@deviation.Part"
                                    data-sentdate="@(deviation.SentDateTime?.ToString("yyyy-MM-dd") ?? "")"
                                    data-discrepancy="@deviation.Discrepancy"
                                    data-operator="@deviation.Operator"
                                    data-commmethod="@deviation.CommMethod"
                                    data-disposition="@deviation.Disposition"
                                    data-approvedby="@deviation.ApprovedBy"
                                    data-castreview="@(deviation.DateTimeCASTReview?.ToString("yyyy-MM-dd") ?? "")">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Deviation Modal -->
<div class="modal fade" id="editDeviationModal" tabindex="-1" aria-labelledby="editDeviationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editDeviationModalLabel">Edit Deviation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="@Url.Action("Update", "AdminDeviation")">
                <div class="modal-body">
                    <input type="hidden" name="Id" id="edit-id" />
                    <div class="mb-3">
                        <label for="edit-part" class="form-label">Part</label>
                        <input type="text" name="Part" id="edit-part" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="edit-sentdate" class="form-label">Sent Date</label>
                        <input type="date" name="SentDateTime" id="edit-sentdate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="edit-discrepancy" class="form-label">Discrepancy</label>
                        <textarea name="Discrepancy" id="edit-discrepancy" class="form-control text-area-large"></textarea>
                    </div>
                    <!-- Operator Dropdown -->
                    <div class="mb-3">
                        <label for="edit-operator" class="form-label">Operator</label>
                        <select name="Operator" id="edit-operator" class="form-control" required>
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.OperatorNames != null)
                            {
                                foreach (var op in (List<string>)ViewBag.OperatorNames)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <!-- Comm Method Dropdown -->
                    <div class="mb-3">
                        <label for="edit-commmethod" class="form-label">Comm Method</label>
                        <select name="CommMethod" id="edit-commmethod" class="form-control" required>
                            <option value="Phone Call">Phone Call</option>
                            <option value="Text Message">Text Message</option>
                            <option value="Email">Email</option>
                            <option value="In Person">In Person</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-disposition" class="form-label">Disposition</label>
                        <textarea name="Disposition" id="edit-disposition" class="form-control text-area-large"></textarea>
                    </div>
                    <!-- Approved By Dropdown -->
                    <div class="mb-3">
                        <label for="edit-approvedby" class="form-label">Approved By</label>
                        <select name="ApprovedBy" id="edit-approvedby" class="form-control" required>
                            <option value="">-- Select Approved By --</option>
                            @if (ViewBag.ApprovedByOperators != null)
                            {
                                foreach (var op in (List<string>)ViewBag.ApprovedByOperators)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-castreview" class="form-label">CAST Review Date</label>
                        <input type="date" name="DateTimeCASTReview" id="edit-castreview" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success"><i class="bi bi-save"></i> Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Sorting and Filtering Variables
            let currentSortColumn = null;
            let currentSortDir = 'asc';
            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            // Attach click events to sortable headers
            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if (!th.dataset.label) {
                    th.dataset.label = th.innerText.trim();
                }
                th.addEventListener('click', () => {
                    if (currentSortColumn === index) {
                        currentSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSortColumn = index;
                        currentSortDir = 'asc';
                    }
                    updateTable();
                    updateSortIndicators();
                });
            });

            // Filter event listeners
            document.getElementById('deviationSearchInput').addEventListener('input', updateTable);
            document.getElementById('deviationDateFilter').addEventListener('change', updateTable);

            function updateTable() {
                const searchQuery = document.getElementById('deviationSearchInput').value.trim().toLowerCase();
                const selectedDate = document.getElementById('deviationDateFilter').value;
                let rows = Array.from(tbody.querySelectorAll('tr'));

                // Sorting
                if (currentSortColumn !== null) {
                    rows.sort((a, b) => {
                        const aCells = a.querySelectorAll('td');
                        const bCells = b.querySelectorAll('td');
                        const aText = aCells[currentSortColumn] ? aCells[currentSortColumn].innerText.trim() : '';
                        const bText = bCells[currentSortColumn] ? bCells[currentSortColumn].innerText.trim() : '';
                        const aNum = parseFloat(aText);
                        const bNum = parseFloat(bText);
                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return currentSortDir === 'asc' ? aNum - bNum : bNum - aNum;
                        } else {
                            return currentSortDir === 'asc' ? aText.localeCompare(bText) : bText.localeCompare(aText);
                        }
                    });
                }

                // Re-append sorted rows
                rows.forEach(row => tbody.appendChild(row));

                // Filtering rows
                rows.forEach(row => {
                    let show = true;
                    const cells = row.querySelectorAll('td');

                    // Search filter: check all cells except Actions (last cell)
                    if (searchQuery) {
                        let found = false;
                        for (let i = 0; i < cells.length - 1; i++) {
                            if (cells[i].innerText.toLowerCase().includes(searchQuery)) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) show = false;
                    }

                    // Date filter: assuming "Sent Date" is at index 2 (ID:0, Part:1, Sent Date:2)
                    if (selectedDate) {
                        const dateCell = cells[2];
                        if (dateCell && dateCell.innerText.trim() !== selectedDate) {
                            show = false;
                        }
                    }

                    row.style.display = show ? '' : 'none';
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label; // reset to original label
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }

            // Initial table update
            updateTable();

            // ----------------------------
            // Edit Modal Logic
            document.querySelectorAll('.edit-btn').forEach(function (button) {
                button.addEventListener('click', function () {
                    const id = this.getAttribute('data-id');
                    const part = this.getAttribute('data-part');
                    const sentDate = this.getAttribute('data-sentdate');
                    const discrepancy = this.getAttribute('data-discrepancy');
                    const operator = this.getAttribute('data-operator');
                    const commMethod = this.getAttribute('data-commmethod');
                    const disposition = this.getAttribute('data-disposition');
                    const approvedBy = this.getAttribute('data-approvedby');
                    const castReview = this.getAttribute('data-castreview');

                    document.getElementById('edit-id').value = id;
                    document.getElementById('edit-part').value = part;
                    document.getElementById('edit-sentdate').value = sentDate;
                    document.getElementById('edit-discrepancy').value = discrepancy;
                    document.getElementById('edit-operator').value = operator;
                    document.getElementById('edit-commmethod').value = commMethod;
                    document.getElementById('edit-disposition').value = disposition;
                    document.getElementById('edit-approvedby').value = approvedBy;
                    document.getElementById('edit-castreview').value = castReview;

                    new bootstrap.Modal(document.getElementById('editDeviationModal')).show();
                });
            });
        });
    </script>
}
