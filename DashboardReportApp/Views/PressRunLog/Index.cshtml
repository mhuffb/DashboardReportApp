@model List<DashboardReportApp.Models.PressRunLogModel>
@using System.Text.Json
@using System.Linq

@{
    ViewData["Title"] = "Press Run Log - Split Tables, Login, & Start Skid Modal";

    // Operators for the login form
    var operators = ViewData["Operators"] as List<string> ?? new List<string>();

    // Dictionary of (part, run) => machine (raw machine code, e.g. "2")
    var openParts = ViewData["OpenParts"] as List<DashboardReportApp.Models.PressSetupModel>
                      ?? new List<DashboardReportApp.Models.PressSetupModel>();


    // All open records (records with EndDateTime == null)
    var openRecords = ViewBag.OpenRuns as List<DashboardReportApp.Models.PressRunLogModel>
                      ?? new List<DashboardReportApp.Models.PressRunLogModel>();

    // Split open records into main run records (SkidNumber == 0) and skid records (SkidNumber > 0)
    var mainRuns = openRecords.Where(r => r.SkidNumber == 0).ToList();
    var skids = openRecords.Where(r => r.SkidNumber > 0).ToList();
}

@if (TempData["DeviceMessage"] != null)
{
    <div class="alert alert-warning">
        @TempData["DeviceMessage"]
    </div>
}

<div class="container-fluid px-3">
    <h1 class="text-center mb-4">Press Run Log</h1>

    <!-- Parts Setup and Ready to Mold -->
    <h2 class="text-center">Parts Currently Setup and Available to Run</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Part</th>
                        <th>Prod Number</th>
                        <th>Run</th>
                        <th>Machine</th>
                        <th>Notes</th>
                        <th>Operator</th>
                        <th>End DateTime</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in openParts)
                    {
                        <tr>
                            <td>@item.Part</td>
                            <td>@item.ProdNumber</td>
                            <td>@item.Run</td>
                            <td>@item.Machine</td>
                            <td>@item.Notes</td>
                            <td>@item.Operator</td>
                            <td>@(item.EndDateTime.HasValue ? item.EndDateTime.Value.ToString("yyyy-MM-dd HH:mm") : "Open")</td>
                            <td>
                                <button class="btn btn-primary btn-sm"
                                        onclick="openLoginCountModalForRun('@item.Part', '@item.Run', '@item.Machine', '@item.ProdNumber')">
                                    Login to Run
                                </button>



                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>


    <!-- Open Mold Production Operator Runs -->
    <h2 class="text-center mb-4">Open Mold Production Operator Runs</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            @if (mainRuns.Any())
            {
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Part</th>
                            <th>Prod Number</th>
                            <th>Run</th>
                            <th>Machine</th>
                            <th>Operator</th>
                            <th>Start Time</th>
                            <th>Pcs Start</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var rec in mainRuns)
                        {
                            <tr>
                                <td>@rec.Id</td>
                                <td>@rec.Part</td>
                                <td>@rec.ProdNumber</td>
                                <td>@rec.Run</td>
                                <td>@rec.Machine</td>
                                <td>@rec.Operator</td>
                                <td>@(rec.StartDateTime?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
                                <td>@rec.PcsStart</td>
                                <td>
                                    <button class="btn btn-danger btn-sm"
                                            onclick="openLogoutModal('@rec.Id', '@rec.Machine')">
                                        Logout (Count)
                                    </button>
                                    <span>&nbsp;</span>
                                    <button class="btn btn-secondary btn-sm"
                                            onclick="openEndRunModal('@rec.Id', '@rec.Machine')">
                                        End Run (Count)
                                    </button>
                                    <span>&nbsp;</span>
                                    <button class="btn btn-info btn-sm"
                                            onclick="openStartSkidModal('@rec.Id', '@rec.Machine', '@rec.Part', '@rec.Operator', '@rec.Run', '@rec.ProdNumber')">
                                        Start Skid
                                    </button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No open run records.</p>
            }
        </div>
    </div>


    <!-- Open Skid Records -->
    <h2 class="text-center mb-4">Open Skids</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            @if (skids.Any())
            {
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Part</th>
                            <th>Prod Number</th>
                            <th>Run</th>
                            <th>Machine</th>
                            <th>Operator</th>
                            <th>SkidNumber</th>
                            <th>Start Time</th>
                            <th>Pcs Start</th>
                            <th>Pcs End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var skid in skids)
                        {
                            <tr>
                                <td>@skid.Id</td>
                                <td>@skid.Part</td>
                                <td>@skid.ProdNumber</td>
                                <td>@skid.Run</td>
                                <td>@skid.Machine</td>
                                <td>@skid.Operator</td>
                                <td>@skid.SkidNumber</td>
                                <td>@skid.StartDateTime</td>
                                <td>@skid.PcsStart</td>
                                <td>@skid.PcsEnd</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No open skid records.</p>
            }
        </div>
    </div>


    <!-- React Table of All Runs (Optional) -->
    <h2 class="text-center">All Runs</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <div id="myReactPressRunTableRoot" data-records='@Html.Raw(JsonSerializer.Serialize(Model))'></div>
        </div>
    </div>
</div>

<!-- JavaScript for React Table -->
<script src="/js/mydatatable.bundle.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const container = document.getElementById("myReactPressRunTableRoot");
        if (!container) return;
        const rawData = container.getAttribute("data-records");
        const data = JSON.parse(rawData);
           const columns = [
        { key: "Id", label: "ID" },
        { key: "Part", label: "Part" },
        { key: "ProdNumber", label: "Prod Number" },
        { key: "Run", label: "Run" },
        { key: "Machine", label: "Machine" },
        { key: "Operator", label: "Operator" },
        { key: "SkidNumber", label: "SkidNumber" },
        { key: "StartDateTime", label: "Start Time" },
        { key: "EndDateTime", label: "End Time" },
        { key: "PcsStart", label: "Pcs Start" },
        { key: "PcsEnd", label: "Pcs End" },
        { key: "Scrap", label: "Scrap" },
        { key: "Notes", label: "Notes" }
    ];

        if (window.renderMyDataTable) {
            window.renderMyDataTable("myReactPressRunTableRoot", data, columns, true);
        }
    });
</script>

<!-- JavaScript Functions for Modals -->
<script>
    // Opens the Login modal.
       // Opens the Login modal.
        function openLoginCountModalForRun(part, run, machine, prodNumber) {
        console.log("openLoginCountModalForRun called with", part, run, machine, prodNumber);
        document.getElementById("loginPartHidden").value = part;
        document.getElementById("loginRunHidden").value = run;
        document.getElementById("loginMachineHidden").value = machine;
        document.getElementById("loginProdHidden").value = prodNumber; // Set the ProdNumber
        document.getElementById("loginOperatorSelect").selectedIndex = 0;
        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById("loginFinalCountInput").value = data.deviceCount || 0;
                let modal = new bootstrap.Modal(document.getElementById("LoginCountModal"));
                modal.show();
            })
            .catch(err => console.error("Error fetching device count:", err));
    }


    // Opens the Logout modal.
    function openLogoutModal(runId, machine) {
        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById("logoutRunId").value = runId;
                document.getElementById("logoutFinalCount").value = data.deviceCount || 0;
                let modal = new bootstrap.Modal(document.getElementById("LogoutCountModal"));
                modal.show();
            })
            .catch(err => console.error("Error fetching device count:", err));
    }

    // Opens the End Run modal.
    function openEndRunModal(runId, machine) {
        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById("endRunId").value = runId;
                document.getElementById("endRunFinalCount").value = data.deviceCount || 0;
                document.getElementById("endRunScrap").value = "0";
                document.getElementById("endRunNotes").value = "";
                let modal = new bootstrap.Modal(document.getElementById("EndRunCountModal"));
                modal.show();
            })
            .catch(err => console.error("Error fetching device count:", err));
    }

    // Opens the Start Skid modal.
        function openStartSkidModal(runId, machine, part, operator, run, prodNumber) {
        console.log("openStartSkidModal called with", runId, machine, part, operator, run, prodNumber);
        document.getElementById("startSkidRunId").value = runId;
        document.getElementById("startSkidRunValue").value = run;
        document.getElementById("startSkidMachineHidden").value = machine;
        document.getElementById("startSkidPartHidden").value = part;
        document.getElementById("startSkidOperatorHidden").value = operator;
        document.getElementById("startSkidProdHidden").value = prodNumber;  // Set the prodNumber

        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById("startSkidSkidNumber").value = data.deviceCount || 0;
                let modal = new bootstrap.Modal(document.getElementById("StartSkidModal"));
                modal.show();
            })
            .catch(err => console.error("Error fetching device count:", err));
    }

</script>

<!-- Inline Modals -->
<!-- (A) Login Count Modal -->
<!-- (A) Login Count Modal -->
<div id="LoginCountModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login (Device Count)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-controller="PressRunLog" asp-action="ConfirmLogin">
                    <input type="hidden" id="loginPartHidden" name="part" />
                    <input type="hidden" id="loginMachineHidden" name="machine" />
                    <input type="hidden" id="loginProdHidden" name="ProdNumber" />
                    <input type="hidden" id="loginRunHidden" name="Run" />
                    <div class="mb-3">
                        <label for="loginOperatorSelect" class="form-label">Operator</label>
                        <select id="loginOperatorSelect" name="operator" class="form-select" required>
                            <option value="">Select an operator</option>
                            @foreach (var op in operators)
                            {
                                <option value="@op">@op</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Count (Override if needed):</label>
                        <input type="number" id="loginFinalCountInput" name="finalCount" class="form-control" value="0" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Confirm Login</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- (B) Logout Count Modal -->
<div id="LogoutCountModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Logout (Device Count)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-controller="PressRunLog" asp-action="ConfirmLogout">
                    <input type="hidden" id="logoutRunId" name="runId" />
                    <div class="mb-3">
                        <label class="form-label">Final Count (Override if needed):</label>
                        <input type="number" id="logoutFinalCount" name="finalCount" class="form-control" value="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Scrap:</label>
                        <input type="number" id="logoutScrap" name="scrap" class="form-control" value="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes:</label>
                        <textarea id="logoutNotes" name="notes" class="form-control"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Confirm Logout</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- (C) End Run Count Modal -->
<div id="EndRunCountModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">End Run (Device Count)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-controller="PressRunLog" asp-action="ConfirmEndRun">
                    <input type="hidden" id="endRunId" name="runId" />
                    <div class="mb-3">
                        <label class="form-label">Final Count (Override if needed):</label>
                        <input type="number" id="endRunFinalCount" name="finalCount" class="form-control" value="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Scrap:</label>
                        <input type="number" id="endRunScrap" name="scrap" class="form-control" value="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes:</label>
                        <textarea id="endRunNotes" name="notes" class="form-control"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Confirm End Run</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- (D) Start Skid Modal -->
<div id="StartSkidModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Start Skid</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- The form posts to the StartSkid action; field names must match your controller parameters -->
                <form method="post" asp-controller="PressRunLog" asp-action="StartSkid">
                    <input type="hidden" id="startSkidRunId" name="runId" />
                    <input type="hidden" id="startSkidRunValue" name="run" />
                    <input type="hidden" id="startSkidMachineHidden" name="machine" />
                    <input type="hidden" id="startSkidPartHidden" name="part" />
                    <input type="hidden" id="startSkidOperatorHidden" name="operator" />
                    <!-- New hidden field for ProdNumber -->
                    <input type="hidden" id="startSkidProdHidden" name="prodNumber" />

                    <div class="mb-3">
                        <label class="form-label">Skid Count (Override if needed):</label>
                        <input type="number" id="startSkidSkidNumber" name="skidnumber" class="form-control" value="0" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Confirm Start Skid</button>
                </form>
            </div>
        </div>
    </div>
</div>
