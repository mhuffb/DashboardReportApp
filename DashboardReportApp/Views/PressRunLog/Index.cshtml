@model List<DashboardReportApp.Models.PressRunLogModel>
@using System.Text.Json;

@{
    ViewData["Title"] = "Press Run Log";

    // 1) Operators from the DB
    var operators = ViewData["Operators"] as List<string> ?? new List<string>();

    // 2) Dictionary of (part, run) => machine from presssetup
    var openParts = ViewData["OpenParts"] as Dictionary<(string, string), string>
                    ?? new Dictionary<(string, string), string>();

    // 3) The "open" runs from ViewBag (open=1)
    var openRuns = ViewBag.OpenRuns as List<DashboardReportApp.Models.PressRunLogModel>
                   ?? new List<DashboardReportApp.Models.PressRunLogModel>();
}

<div class="container-fluid px-3">
    <h1 class="text-center mb-4">Press Run Log</h1>

    <!-- Start Molding Form -->
    <h2 class="text-center">Start Molding</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <form method="post" action="/PressRunLog/Login">
                <div class="mb-3">
                    <label for="Operator" class="form-label">Operator</label>
                    <select id="Operator" name="operatorName" class="form-control" required>
                        <option value="">Select an Operator</option>
                        @foreach (var operatorName in operators)
                        {
                            <option value="@operatorName">@operatorName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="Part" class="form-label">Part</label>
                    <select id="Part" name="part" class="form-control" required onchange="updateHiddenRunAndMachine()">
                        <option value="">Select a Part</option>
                        @foreach (var entry in openParts)
                        {
                            <!-- entry.Key = (Part, Run) ; entry.Value = Machine -->
                            <option value="@entry.Key.Item1"
                                    data-run="@entry.Key.Item2"
                                    data-machine="@entry.Value">
                                <!-- We'll show part plus run in parentheses for clarity -->
                                @entry.Key.Item1 (Run: @entry.Key.Item2)
                            </option>
                        }
                    </select>
                </div>

                @* 
                   HIDDEN input for runNumber. 
                   This is populated by JavaScript so the server 
                   still receives a "runNumber" on POST.
                 *@
                <input type="hidden" id="RunNumber" name="runNumber" />

                <div class="mb-3">
                    <label for="Machine" class="form-label">Machine</label>
                    <input type="text" id="Machine" name="machine" class="form-control" readonly />
                </div>

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </form>
        </div>
    </div>
</div>

<script>
    function updateHiddenRunAndMachine() {
        const partSelect = document.getElementById("Part");
        const runHidden = document.getElementById("RunNumber");
        const machineInput = document.getElementById("Machine");

        // Grab the selected <option>
        const selectedOption = partSelect.options[partSelect.selectedIndex];
        if (!selectedOption) return;

        // Extract data-run and data-machine from the <option>
        const selectedRun = selectedOption.getAttribute("data-run") || "";
        const selectedMachine = selectedOption.getAttribute("data-machine") || "";

        // Populate the hidden runNumber field
        runHidden.value = selectedRun;

        // Populate the Machine field
        machineInput.value = selectedMachine;
    }
</script>

<!-- Open Mold Runs -->
<h2 class="text-center mb-4">Open Mold Runs</h2>
<div class="card shadow mb-4">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-bordered shadow-sm wider-table">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Timestamp</th>
                        <th>Run</th>
                        <th>Part</th>
                        <th>Start Time</th>
                        <th>Operator</th>
                        <th>Machine</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var run in openRuns)
                    {
                        <tr>
                            <td>@run.Id</td>
                            <td>@run.Timestamp</td>
                            <td>@run.Run</td>
                            <td>@run.Part</td>
                            <td>@run.StartDateTime</td>
                            <td>@run.Operator</td>
                            <td>@run.Machine</td>
                            <td>
                                <button class="btn btn-danger btn-sm"
                                        onclick="openStopMoldingModal('@run.Id', '@run.Part', '@run.StartDateTime')">
                                    Stop Molding
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Full List of Records (React Table) -->
<h2 class="text-center mt-4">All Mold Run Records</h2>
<div class="card shadow mb-4">
    <div class="card-body">
        <div class="container-fluid px-3 mt-4">
            <div id="myReactPressRunTableRoot"
                 data-records='@Html.Raw(JsonSerializer.Serialize(Model))'>
            </div>
        </div>
    </div>
</div>

<script src="/js/mydatatable.bundle.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const container = document.getElementById("myReactPressRunTableRoot");
        if (!container) return;

        // Get JSON data from the Razor model
        const rawData = container.getAttribute("data-records");
        const data = JSON.parse(rawData); // List<PressRunLogModel>

        // Define columns for the table (same as C# PressRunLogModel)
        const columns = [
            { key: "Id", label: "ID" },
            { key: "Timestamp", label: "Timestamp" },
            { key: "Run", label: "Run" },
            { key: "Part", label: "Part" },
            { key: "StartDateTime", label: "Start Time" },
            { key: "EndDateTime", label: "End Time" },
            { key: "Operator", label: "Operator" },
            { key: "Machine", label: "Machine" },
            { key: "PcsStart", label: "Pcs Start" },
            { key: "PcsEnd", label: "Pcs End" },
            { key: "Scrap", label: "Scrap" },
            { key: "Notes", label: "Notes" }
        ];

        // Render the React table
        if (window.renderMyDataTable) {
            window.renderMyDataTable("myReactPressRunTableRoot", data, columns, true);
        } else {
            console.error("React table render function not found!");
        }
    });
</script>

<!-- Stop Molding Modal -->
<div id="stopMoldingModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Stop Molding</h5>
                <button type="button" class="btn-close" onclick="closeModal()"></button>
            </div>
            <div class="modal-body">
                <form id="stopMoldingForm" method="post" action="/PressRunLog/Logout">
                    <input type="hidden" id="modalPart" name="part">
                    <input type="hidden" id="modalStartDateTime" name="startDateTime">
                    <input type="hidden" id="modalEndDateTime" name="endDateTime"
                           value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")" />

                    <div class="mb-3">
                        <label for="modalScrap" class="form-label">Scrap</label>
                        <input type="number" id="modalScrap" name="scrap" class="form-control" required />
                    </div>

                    <div class="mb-3">
                        <label for="modalNotes" class="form-label">Notes</label>
                        <textarea id="modalNotes" name="notes" class="form-control text-area-large"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button type="submit" form="stopMoldingForm" class="btn btn-danger">Confirm Stop</button>
            </div>
        </div>
    </div>
</div>

<script>
    function openStopMoldingModal(runId, part, startDateTime) {
        document.getElementById("modalPart").value = part;
        document.getElementById("modalStartDateTime").value = startDateTime;

        const modal = new bootstrap.Modal(document.getElementById("stopMoldingModal"));
        modal.show();
    }

    function closeModal() {
        const modalElement = document.getElementById("stopMoldingModal");
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        modalInstance.hide();
    }
</script>
