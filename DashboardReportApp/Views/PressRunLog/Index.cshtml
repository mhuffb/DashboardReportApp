@model List<DashboardReportApp.Models.PressRunLogModel>
@using System.Text.Json
@using System.Linq

@{
    ViewData["Title"] = "Press Run Log - Split Tables, Login, & Start Skid Modal";

    // Operators for the login form
    var operators = ViewData["Operators"] as List<string> ?? new List<string>();

    // Dictionary of (part, run) => machine (raw machine code, e.g. "2")
    var openParts = ViewData["OpenParts"] as List<DashboardReportApp.Models.PressSetupModel>
                      ?? new List<DashboardReportApp.Models.PressSetupModel>();

    // All open records (records with EndDateTime == null)
    var openRecords = ViewBag.OpenRuns as List<DashboardReportApp.Models.PressRunLogModel>
                      ?? new List<DashboardReportApp.Models.PressRunLogModel>();

    // Split open records into main run records (SkidNumber == 0) and skid records (SkidNumber > 0)
    var mainRuns = openRecords.Where(r => r.SkidNumber == 0).ToList();
    var skids = openRecords.Where(r => r.SkidNumber > 0).ToList();
}

@if (TempData["DeviceMessage"] != null)
{
    <div class="alert alert-warning">
        @TempData["DeviceMessage"]
    </div>
}

<div class="container-fluid px-3">
    <div class="table-responsive">
        <h1 class="text-center mb-4">Press Run Log</h1>

        <!-- Parts Setup and Ready to Mold -->
        <h2 class="text-center">Parts Currently Setup and Available to Run</h2>
        <div class="card shadow mb-4">
            <div class="card-body">
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>Prod Number</th>
                            <th>Run</th>
                            <th>Notes</th>
                            <th>End DateTime</th>
                            <th>Setup By</th>
                            <th>Machine</th>
                            <th>Part</th>
                            <th>Component</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in openParts)
                        {
                            <tr>
                                <td>@item.ProdNumber</td>
                                <td>@item.Run</td>
                                <td>@item.Notes</td>
                                <td>@(item.EndDateTime.HasValue ? item.EndDateTime.Value.ToString("yyyy-MM-dd HH:mm") : "Open")</td>
                                <td>@item.Operator</td>
                                <td>@item.Machine</td>
                                <td>@item.Part</td>
                                <td>@item.Component</td>
                                <td>
                                    <button class="btn btn-primary btn-sm"
                                            onclick="openLoginModalForRun('@item.Part', '@item.Component', '@item.Run', '@item.Machine', '@item.ProdNumber')">
                                        Login to Run
                                    </button>
                                    <span>&nbsp;</span>
                                    <button class="btn btn-danger btn-sm"
                                            onclick="openEndRunModalByRun('@item.Run', '@item.Machine')">
                                        End Run
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Open Mold Production Operator Runs -->
        <h2 class="text-center mb-4">Open Mold Production Operator Runs</h2>
        <div class="card shadow mb-4">
            <div class="card-body">
                @if (mainRuns.Any())
                {
                    <table class="table table-striped table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Prod Number</th>
                                <th>Run</th>
                                <th>Start Time</th>
                                <th>Operator</th>
                                <th>Machine</th>
                                <th>Part</th>
                                <th>Component</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var rec in mainRuns)
                            {
                                <tr>
                                    <td>@rec.Id</td>
                                    <td>@rec.ProdNumber</td>
                                    <td>@rec.Run</td>
                                    <td>@(rec.StartDateTime?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
                                    <td>@rec.Operator</td>
                                    <td>@rec.Machine</td>
                                    <td>@rec.Part</td>
                                    <td>@rec.Component</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm"
                                                onclick="openLogoutModal('@rec.Id', '@rec.Machine')">
                                            Logout
                                        </button>
                                        
                                        <span>&nbsp;</span>
                                        <button class="btn btn-info btn-sm"
                                                onclick="openStartSkidModal('@rec.Id', '@rec.Machine', '@rec.Part', '@rec.Component', '@rec.Operator', '@rec.Run', '@rec.ProdNumber')">
                                            Start Skid
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No open run records.</p>
                }
            </div>
        </div>

        <!-- Open Skid Records -->
        <h2 class="text-center mb-4">Open Skids</h2>
        <div class="card shadow mb-4">
            <div class="card-body">
                @if (skids.Any())
                {
                    <table class="table table-striped table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Prod Number</th>
                                <th>Run</th>
                                <th>Start Time</th>
                                <th>SkidNumber</th>
                                <th>Pcs Start</th>
                                <th>Operator</th>
                                <th>Machine</th>
                                <th>Part</th>
                                <th>Component</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skid in skids)
                            {
                                <tr>
                                    <td>@skid.Id</td>
                                    <td>@skid.ProdNumber</td>
                                    <td>@skid.Run</td>
                                    <td>@skid.StartDateTime</td>
                                    <td>@skid.SkidNumber</td>
                                    <td>@skid.PcsStart</td>
                                    <td>@skid.Operator</td>
                                    <td>@skid.Machine</td>
                                    <td>@skid.Part</td>
                                    <td>@skid.Component</td>
                                    <td>
                                        <form method="post" asp-action="GenerateRouterTag" asp-controller="PressRunLog">
                                            <input type="hidden" name="Id" value="@skid.Id" />
                                            <input type="hidden" name="Part" value="@skid.Part" />
                                            <input type="hidden" name="Component" value="@skid.Component" />
                                            <input type="hidden" name="ProdNumber" value="@skid.ProdNumber" />
                                            <input type="hidden" name="Run" value="@skid.Run" />
                                            <input type="hidden" name="Machine" value="@skid.Machine" />
                                            <input type="hidden" name="Operator" value="@skid.Operator" />
                                            <input type="hidden" name="SkidNumber" value="@skid.SkidNumber" />
                                            <input type="hidden" name="StartDateTime" value="@skid.StartDateTime" />
                                            <input type="hidden" name="PcsStart" value="@skid.PcsStart" />
                                            <input type="hidden" name="PcsEnd" value="@skid.PcsEnd" />
                                            <!-- For open skids, EndDateTime is null. This will be empty if null. -->
                                            <input type="hidden" name="EndDateTime" value="@(skid.EndDateTime.HasValue ? skid.EndDateTime.Value.ToString("yyyy-MM-dd HH:mm:ss") : "")" />

                                            <button type="submit" class="btn btn-primary btn-sm">Print Router Tag</button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No open skid records.</p>
                }
            </div>
        </div>

        <!-- React Table of All Runs (Optional) -->
        <h2 class="text-center">All Runs</h2>
        <div class="card shadow mb-4">
            <div class="card-body">
                <div id="myReactPressRunTableRoot" data-records='@Html.Raw(JsonSerializer.Serialize(Model))'></div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for React Table -->
<script src="/js/mydatatable.bundle.js"></script>
<script>
    const deviceIPs = {
        "1":"192.168.1.30",  "2":"192.168.1.31",  "41":"192.168.1.32",
        "45":"192.168.1.33", "50":"192.168.1.34", "51":"192.168.1.35",
        "57":"192.168.1.36", "59":"192.168.1.37", "70":"192.168.1.38",
        "74":"192.168.1.39", "92":"192.168.1.40", "95":"192.168.1.41",
        "102":"192.168.1.42","112":"192.168.1.43","124":"192.168.1.44",
        "125":"192.168.1.45","154":"192.168.1.46","156":"192.168.1.47",
        "175":"192.168.1.48"
    };

    document.addEventListener("DOMContentLoaded", function () {
        const container = document.getElementById("myReactPressRunTableRoot");
        if (!container) return;
        const rawData = container.getAttribute("data-records");
        const data = JSON.parse(rawData);
        const columns = [
                { key: "Id", label: "ID" },
                { key: "Part", label: "Part" },
                { key: "Component", label: "Component" },
                { key: "ProdNumber", label: "Prod Number" },
                { key: "Run", label: "Run" },
                { key: "Machine", label: "Machine" },
                { key: "Operator", label: "Operator" },
                { key: "StartDateTime", label: "Start Time" },
                { key: "EndDateTime", label: "End Time" },
                { key: "ElapsedTime", label: "ElapsedTime" },
                { key: "SkidNumber", label: "SkidNumber" },
                { key: "PcsStart", label: "Pcs Start" },
                { key: "PcsEnd", label: "Pcs End" },
                { key: "Pcs", label: "Pcs" },
                { key: "CycleTime", label: "CycleTime" },
                { key: "Scrap", label: "Scrap" },
                { key: "Notes", label: "Notes" }
        ];

        if (window.renderMyDataTable) {
            window.renderMyDataTable("myReactPressRunTableRoot", data, columns, true);
        }
    });

    // LOGIN: Set hidden values (including component) and open the modal
           function openLoginModalForRun(part, component, run, machine, prodNumber) {
        document.getElementById("loginPartHidden").value = part;
        document.getElementById("loginComponentHidden").value = component;
        document.getElementById("loginRunHidden").value = run;
        document.getElementById("loginMachineHidden").value = machine;
        document.getElementById("loginProdHidden").value = prodNumber;
        document.getElementById("loginOperatorSelect").selectedIndex = 0;

        const pcsStartInput = document.getElementById("loginPcsStart");
        pcsStartInput.value = "Loading...";

        let modal = new bootstrap.Modal(document.getElementById("LoginModal"));
        modal.show();

        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                pcsStartInput.value = data.deviceCount ?? 0;
                pcsStartInput.dataset.originalCount = pcsStartInput.value;
            })
            .catch(err => {
                console.error("Error fetching count:", err);
                pcsStartInput.value = "Error";
            });
    }



    // LOGOUT: Set hidden value and open modal (no device count fetch)
           function openLogoutModal(runId, machine) {
        document.getElementById("logoutRunId").value = runId;
        document.getElementById("logoutScrap").value = "0";
        document.getElementById("logoutNotes").value = "";
        document.getElementById("logoutMachineHidden").value = machine;   

        let modal = new bootstrap.Modal(document.getElementById("LogoutModal"));
        modal.show();

        const display = document.getElementById("logoutDeviceCountDisplay");
        const original = display.value;

        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                const count = data.deviceCount ?? 0;

                // Only update if user hasn't touched it yet
                if (display.value === "" || display.value === "0" || display.value === original || display.value === "Loading...") {
                    display.value = count;
                }

            display.dataset.originalCount = display.value;
            })
            .catch(err => {
                console.error("Error fetching count:", err);
                if (display.value === "" || display.value === "Loading...") {
                    display.value = "Error";
                }
            });
    }



       function openEndRunModalByRun(run, machine) {
        document.getElementById("endRunRunValue").value = run;
        document.getElementById("endRunMachineHidden").value = machine;

        const endCountInput = document.getElementById("endRunFinalCount");
        endCountInput.value = "0";
        endCountInput.dataset.originalCount = "0";

        let modal = new bootstrap.Modal(document.getElementById("EndRunCountModal"));
        modal.show();

        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                endCountInput.value = data.deviceCount ?? 0;
                endCountInput.dataset.originalCount = endCountInput.value;
            })
            .catch(err => console.error("Error fetching device count:", err));
    }


    // START SKID: Asks for a count override
    function openStartSkidModal(runId, machine, part, component, operator, run, prodNumber) {
        console.log("openStartSkidModal called with", runId, machine, part, component, operator, run, prodNumber);
        document.getElementById("startSkidRunId").value = runId;
        document.getElementById("startSkidRunValue").value = run;
        document.getElementById("startSkidMachineHidden").value = machine;
        document.getElementById("startSkidPartHidden").value = part;
        document.getElementById("startSkidComponentHidden").value = component;
        document.getElementById("startSkidOperatorHidden").value = operator;
        document.getElementById("startSkidProdHidden").value = prodNumber;

        const pcsStartInput = document.getElementById("startSkidPcsStart");
        const defaultValue = pcsStartInput.value;

        console.log("Initial Pcs Start Value:", pcsStartInput.value);

        let modal = new bootstrap.Modal(document.getElementById("StartSkidModal"));
        modal.show();

        fetch(`/PressRunLog/ApiGetDeviceCount?machine=${encodeURIComponent(machine)}`)
            .then(response => response.json())
            .then(data => {
                if (pcsStartInput.value === defaultValue) {
                    pcsStartInput.value = data.deviceCount || 0;
    pcsStartInput.dataset.originalCount = pcsStartInput.value;   // NEW

                    console.log("Updated Pcs Start Value from API:", pcsStartInput.value);
                }
            })
            .catch(err => console.error("Error fetching device count:", err));
    }




               function wireCountSetter(modalId, countInputId, checkboxId, machineHiddenId) {
        const modal = document.getElementById(modalId);
        if (!modal) return;
        const form = modal.querySelector("form");

        form.addEventListener("submit", async function (ev) {
            if (form.dataset.submitted === "true") return;  // Already handled
            const cb = document.getElementById(checkboxId);
            if (!cb || !cb.checked) return;

            const countEl = document.getElementById(countInputId);
            const original = countEl.dataset.originalCount ?? "";
            const current = countEl.value.trim();
            if (current === original) return;

            const machine = document.getElementById(machineHiddenId).value;
            const ip = deviceIPs[machine];
            if (!ip) {
                console.warn("Unknown IP for machine", machine);
                return;
            }

            ev.preventDefault();

            try {
                await fetch(`http://${ip}/update`, {
                    method: "POST",
                        headers: {
        "Accept": "application/json",
        "X-Requested-With": "XMLHttpRequest"
    }
    ,
                    body: `count_value=${encodeURIComponent(current)}`
                });
            } catch (e) {
                console.error("Count push failed:", e);
            }

            // Guard flag and trigger ajaxify manually
            form.dataset.submitted = "true";

            // Simulate AJAX call instead of re-triggering submit
            ajaxifySubmit(form);
        });
    }




       document.addEventListener("DOMContentLoaded", () => {
        wireCountSetter("LoginModal",
                        "loginPcsStart",
                        "loginSetCountDevice",
                        "loginMachineHidden");

        wireCountSetter("LogoutModal",
                        "logoutDeviceCountDisplay",
                        "logoutSetCountDevice",
                        "logoutMachineHidden");

        wireCountSetter("StartSkidModal",
                        "startSkidPcsStart",
                        "startSkidSetCountDevice",
                        "startSkidMachineHidden");

        wireCountSetter("EndRunCountModal",
                        "endRunFinalCount",
                        "endRunSetCountDevice",
                        "endRunMachineHidden");
    });


</script>

<!-- Inline Modals -->
<!-- (A) Login Modal (without count) -->
<div id="LoginModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="loginForm" method="post" asp-controller="PressRunLog" asp-action="ConfirmLogin">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="loginPartHidden" name="part" />
                    <input type="hidden" id="loginComponentHidden" name="component" />
                    <input type="hidden" id="loginMachineHidden" name="machine" />
                    <input type="hidden" id="loginProdHidden" name="ProdNumber" />
                    <input type="hidden" id="loginRunHidden" name="Run" />
                    <!-- Show current count -->
                    <div class="mb-3">
                        <label class="form-label">Starting Device Count (editable):</label>
                        <input type="number" id="loginPcsStart" class="form-control" name="pcsStart" value="0" />
                    </div>
                    
                    <div class="mb-3 form-check">
                        <input class="form-check-input" type="checkbox"
                               id="loginSetCountDevice"  checked>
                        <label class="form-check-label" for="loginSetCountDevice">
                            Set count on device
                        </label>
                    </div>


                    <div class="mb-3">
                        <label for="loginOperatorSelect" class="form-label">Operator</label>
                        <select id="loginOperatorSelect" name="operator" class="form-select" required>
                            <option value="">Select an operator</option>
                            @foreach (var op in operators)
                            {
                                <option value="@op">@op</option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Confirm Login</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- (B) Logout Modal (without count) -->
<div id="LogoutModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Logout</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="logoutForm" method="post" asp-controller="PressRunLog" asp-action="ConfirmLogout">
                    <input type="hidden" id="logoutRunId" name="runId" />
                    <!-- Display current count -->
                    <input type="hidden" id="logoutMachineHidden" />

                    <div class="mb-3">
                        <label class="form-label">Current Device Count:</label>
                        <input type="text" id="logoutDeviceCountDisplay" class="form-control" name="finalCount" />
                    </div>
                    <div class="mb-3 form-check">
                        <input class="form-check-input" type="checkbox"
                               id="logoutSetCountDevice" checked>
                        <label class="form-check-label" for="logoutSetCountDevice">
                            Set count on device
                        </label>
                    </div>


                    <div class="mb-3">
                        <label class="form-label">Scrap:</label>
                        <input type="number" id="logoutScrap" name="scrap" class="form-control" value="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes:</label>
                        <textarea id="logoutNotes" name="notes" class="form-control"></textarea>
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Confirm Logout</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- (C) End Run Modal (asks for count; ends main run & any open skid) -->
<div id="EndRunCountModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">End Run (Device Count)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="endRunForm" method="post"  asp-controller="PressRunLog" asp-action="ConfirmEndRun">
                    <input type="hidden" id="endRunRunValue" name="run" />

                    <input type="hidden" id="endRunMachineHidden" name="machine" />

                    <div class="mb-3">
                        <label class="form-label">Final Count (Override if needed):</label>
                        <input type="number" id="endRunFinalCount" name="finalCount" class="form-control" value="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Scrap:</label>
                        <input type="number" id="endRunScrap" name="scrap" class="form-control" value="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes:</label>
                        <textarea id="endRunNotes" name="notes" class="form-control"></textarea>
                    </div>

                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="endRunOrderComplete" name="orderComplete" value="true" />
                        <label class="form-check-label" for="endRunOrderComplete">Order Complete?</label>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input"
                               id="endRunSetCountDevice" checked>
                        <label class="form-check-label" for="endRunSetCountDevice">
                            Set count on device
                        </label>
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Confirm End Run</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- (D) Start Skid Modal (asks for starting count) -->
<div id="StartSkidModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Start Skid</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="startSkidForm" method="post" asp-controller="PressRunLog" asp-action="StartSkid">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="startSkidRunId" name="runId" />
                    <input type="hidden" id="startSkidRunValue" name="run" />
                    <input type="hidden" id="startSkidMachineHidden" name="machine" />
                    <input type="hidden" id="startSkidPartHidden" name="part" />
                    <input type="hidden" id="startSkidComponentHidden" name="component" />
                    <input type="hidden" id="startSkidOperatorHidden" name="operator" />
                    <input type="hidden" id="startSkidProdHidden" name="prodNumber" />

                    <div class="mb-3">
                        <label class="form-label">Pcs Start (Override if needed):</label>
                        <input type="number" id="startSkidPcsStart" name="pcsStart" class="form-control" value="0" />
                    </div>
                    <div class="mb-3 form-check">
                        <input class="form-check-input" type="checkbox"
                               id="startSkidSetCountDevice" checked>
                        <label class="form-check-label" for="startSkidSetCountDevice">
                            Set count on device
                        </label>
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Confirm Start Skid</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@if (TempData["Toast"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            Swal.fire({ icon: "success", title: "@TempData["Toast"]" });
        });
    </script>
}

