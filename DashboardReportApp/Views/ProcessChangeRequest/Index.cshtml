@model IEnumerable<DashboardReportApp.Models.ProcessChangeRequestModel>

@{
    ViewData["Title"] = "Process Change Requests";
}
<script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
<div class="container-fluid mt-4">
    <h2 class="text-center mb-4">Process Change Requests</h2>
    <h3 class="text-center mb-4">for Route Sheets and Process Control Plans</h3>
    <!-- Moved "Add New Request" button right below the header -->
    <div class="text-center mb-4">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRequestModal">
            + Add New Request
        </button>
    </div>

    <!-- Combined QR Codes -->
    <div class="row justify-content-center">
        <h8 class="text-center mb-4">You can upload pictures from your phone by connecting to wifi then viewing this page on your phone.</h8>
    </div>
    <div class="d-flex justify-content-evenly align-items-center mb-4">
        <!-- Wi‑Fi QR Code -->
        <div class="text-center">
            <canvas id="wifi-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">Connect to Wifi</div>
        </div>
        <!-- Current Page QR Code -->
        <div class="text-center">
            <canvas id="current-page-qr" style="width:128px; height:128px;"></canvas>
            <div class="mt-2">View on your device</div>
        </div>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger fade show" role="alert">
            <strong>Validation Errors:</strong>
            <ul>
                @foreach (var state in ViewData.ModelState.Values)
                {
                    foreach (var error in state.Errors)
                    {
                        <li>@error.ErrorMessage</li>
                    }
                }
            </ul>
        </div>
    }

    <!-- Centered Search and Date Range Filter with Clear Filters button -->
    <div class="d-flex justify-content-center mb-3">
        <div class="input-group" style="max-width: 500px;">
            <input type="text" id="pcrSearchInput" class="form-control" placeholder="Search requests..." />
            <input type="date" id="pcrStartDateFilter" class="form-control" placeholder="From" />
            <input type="date" id="pcrEndDateFilter" class="form-control" placeholder="To" />
            <button class="btn btn-secondary" id="clearFiltersBtn" type="button">Clear Filters</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="custom-table">
            <thead>
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Timestamp</th>
                    <th class="sortable">Part</th>
                    <th class="sortable">Requester</th>
                    <th class="sortable">Req Date</th>
                    <th class="sortable">Request</th>
                    <th class="sortable">Test Requested</th>
                    <th class="sortable">File Address 1</th>
                    <th class="sortable">File Address 2 (Read-Only)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Timestamp</td>
                        <td>@item.Part</td>
                        <td>@item.Requester</td>
                        <td>@(item.ReqDate?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@item.Request</td>
                        <td>@item.TestRequested</td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.FileAddress1))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn" data-file-name="@item.FileAddress1">
                                    Preview 1
                                </button>
                            }
                            else
                            {

                                <span>No file</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.FileAddress2))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn" data-file-name="@item.FileAddress2">
                                    Preview 2
                                </button>
                            }
                            else
                            {

                                <span>No file</span>
                            }
                        </td>

                        <td>
                            <!-- "Add File" for FileAddress1 only -->
                            <button type="button" class="btn btn-secondary btn-sm add-file-btn" data-id="@item.Id">
                                Add File 1
                            </button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal: Add New Request -->
<div class="modal fade" id="addRequestModal" tabindex="-1" aria-labelledby="addRequestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRequestModalLabel">Add New Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="AddRequest" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    @Html.AntiForgeryToken()

                    <div class="mb-3">
                        <label for="new-part" class="form-label">Part</label>
                        <input type="text" name="Part" id="new-part" class="form-control" required />
                    </div>

                    <!-- Requester from Operators dropdown -->
                    <div class="mb-3">
                        <label for="new-requester" class="form-label">Requester</label>
                        <select name="Requester" id="new-requester" class="form-control" required>
                            <option value="">-- Select Operator --</option>
                            @if (ViewBag.Operators is List<string> operatorNames)
                            {
                                foreach (var op in operatorNames)
                                {
                                    <option value="@op">@op</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="new-request" class="form-label">Request</label>
                        <textarea name="Request" id="new-request" class="form-control" required></textarea>
                    </div>

                    <!-- "TestRequested" checkbox: hidden input + checkbox so it yields "0" or "1" -->
                    <div class="mb-3">
                        <label class="form-label">Test Requested?</label><br />
                        <input type="hidden" name="TestRequested" value="0" />
                        <input type="checkbox" name="TestRequested" value="1" />
                    </div>

                    <div class="mb-3">
                        <label for="new-file" class="form-label">Attach File 1 (Optional)</label>
                        <input type="file" name="file" id="new-file" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success">Add Request</button>
                </div>
            </form>
        </div>
    </div>
    <form asp-action="UpdateFileAddress1" method="post" enctype="multipart/form-data"
          id="updateFileForm" style="display:none;">
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" id="update-file-id" />
        <input type="file" name="file" id="update-file-input" />
    </form>

</div>


<!-- File Preview Modal (Image or PDF) -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <!-- Use "modal-xl" for extra-wide modal -->
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <!-- If the file is PDF, show iframe; otherwise show image -->
                <img id="modalImage" src="" alt="Preview" class="img-fluid" style="display:none;" />
                <!-- Increase the iframe height -->
                <iframe id="modalPDF" class="w-100" style="height:900px; display:none;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <!-- QR Code Generation for Both QR Codes -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Generate QR code for the current page
            var currentUrl = window.location.href;
            QRCode.toCanvas(document.getElementById('current-page-qr'), currentUrl, {
                width: 128
            }, function (error) {
                if (error) {
                    console.error(error);
                } else {
                    console.log("Current page QR code generated!");
                }
            });

            // Generate QR code for Wi‑Fi connection
            var wifiData = `WIFI:T:WPA;S:Sintergy-WiFi;P:5intergyW1F1;;`;
            QRCode.toCanvas(document.getElementById('wifi-qr'), wifiData, {
                width: 128
            }, function (error) {
                if (error) {
                    console.error(error);
                } else {
                    console.log("Wi‑Fi QR code generated!");
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            //---------------------------------------------------------
            // 1) Sorting & Filtering
            let currentSortColumn = null;
            let currentSortDir = 'asc';
            const table = document.querySelector('.custom-table');
            const tbody = table.querySelector('tbody');

            document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                if (!th.dataset.label) {
                    th.dataset.label = th.innerText.trim();
                }
                th.addEventListener('click', () => {
                    if (currentSortColumn === index) {
                        currentSortDir = currentSortDir === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSortColumn = index;
                        currentSortDir = 'asc';
                    }
                    updateTable();
                    updateSortIndicators();
                });
            });

            document.getElementById('pcrSearchInput').addEventListener('input', updateTable);
            document.getElementById('pcrStartDateFilter').addEventListener('change', updateTable);
            document.getElementById('pcrEndDateFilter').addEventListener('change', updateTable);
            document.getElementById('clearFiltersBtn').addEventListener('click', function () {
                document.getElementById('pcrSearchInput').value = '';
                document.getElementById('pcrStartDateFilter').value = '';
                document.getElementById('pcrEndDateFilter').value = '';
                updateTable();
            });

            function updateTable() {
                const searchQuery = document.getElementById('pcrSearchInput').value.trim().toLowerCase();
                const startDateValue = document.getElementById('pcrStartDateFilter').value;
                const endDateValue = document.getElementById('pcrEndDateFilter').value;
                let rows = Array.from(tbody.querySelectorAll('tr'));

                // Sorting
                if (currentSortColumn !== null) {
                    rows.sort((a, b) => {
                        const aCells = a.querySelectorAll('td');
                        const bCells = b.querySelectorAll('td');
                        const aText = aCells[currentSortColumn]?.innerText.trim() ?? '';
                        const bText = bCells[currentSortColumn]?.innerText.trim() ?? '';
                        const aNum = parseFloat(aText);
                        const bNum = parseFloat(bText);

                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return currentSortDir === 'asc' ? aNum - bNum : bNum - aNum;
                        } else {
                            return currentSortDir === 'asc'
                                ? aText.localeCompare(bText)
                                : bText.localeCompare(aText);
                        }
                    });
                }
                rows.forEach(row => tbody.appendChild(row));

                // Filtering: search all columns except the last (Actions)
                rows.forEach(row => {
                    let show = true;
                    const cells = row.querySelectorAll('td');

                    if (searchQuery) {
                        let found = false;
                        for (let i = 0; i < cells.length - 1; i++) {
                            if (cells[i].innerText.toLowerCase().includes(searchQuery)) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) show = false;
                    }

                    // Date range filter on "Req Date" at index 4
                    let rowDateStr = cells[4].innerText.trim();
                    if (rowDateStr) {
                        let rowDate = new Date(rowDateStr);
                        if (startDateValue) {
                            let startDate = new Date(startDateValue);
                            if (rowDate < startDate) {
                                show = false;
                            }
                        }
                        if (endDateValue) {
                            let endDate = new Date(endDateValue);
                            if (rowDate > endDate) {
                                show = false;
                            }
                        }
                    } else {
                        // If there's no date but a date filter is applied, hide the row
                        if (startDateValue || endDateValue) {
                            show = false;
                        }
                    }
                    row.style.display = show ? '' : 'none';
                });
            }

            function updateSortIndicators() {
                document.querySelectorAll('.custom-table th.sortable').forEach((th, index) => {
                    th.innerText = th.dataset.label;
                    if (index === currentSortColumn) {
                        th.innerText += currentSortDir === 'asc' ? ' \u25B2' : ' \u25BC';
                    }
                });
            }

            updateTable();

            //---------------------------------------------------------
            // 2) File Preview Logic (PDF or Image)
            const modalElement = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            const modalPDF = document.getElementById('modalPDF');

                  document.querySelectorAll('.fetch-image-btn').forEach(button => {
          button.addEventListener('click', function () {
            const fileName = this.dataset.fileName;
            if (!fileName) { alert("No file name provided."); return; }

            fetch(`/ProcessChangeRequest/FetchFile?name=${encodeURIComponent(fileName)}`)
              .then(r => { if (!r.ok) throw new Error(); return r.json(); })
              .then(data => {
                if (!data.success) { alert(`Error: ${data.message}`); return; }
                const url = data.url;

                // decide viewer
                const modalElement = document.getElementById('imageModal');
                const modalImage = document.getElementById('modalImage');
                const modalPDF = document.getElementById('modalPDF');
                modalImage.style.display = 'none';
                modalPDF.style.display = 'none';

                if (url.match(/\.pdf(\?|$)/i)) {
                  modalPDF.src = url;  modalPDF.style.display = 'block';
                } else {
                  modalImage.src = url; modalImage.style.display = 'block';
                }
                new bootstrap.Modal(modalElement).show();
              })
              .catch(() => alert('An error occurred while fetching the file.'));
          });
        });

            modalElement.addEventListener('hidden.bs.modal', function () {
                modalImage.src = '';
                modalPDF.src = '';
                modalImage.style.display = 'none';
                modalPDF.style.display = 'none';
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) backdrop.remove();
                document.body.classList.remove('modal-open');
                document.body.style = '';
            });

          
        });

                document.addEventListener('DOMContentLoaded', function () {
            // ...

            // 3) When user clicks "Add File 1," directly open the file picker, then submit.
            const fileInput = document.getElementById('update-file-input');
            const hiddenId = document.getElementById('update-file-id');
            const updateForm = document.getElementById('updateFileForm');

            document.querySelectorAll('.add-file-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const requestId = btn.dataset.id;
                    // 1) Put the ID in the hidden field
                    hiddenId.value = requestId;

                    // 2) Programmatically open the file picker
                    fileInput.value = ""; // reset the file input in case user cancels
                    fileInput.click();
                });
            });

            // Whenever a file is chosen, auto-submit the form
            fileInput.addEventListener('change', () => {
                if (fileInput.files.length > 0) {
                    updateForm.submit();
                }
            });

            // ...
        });

    </script>
}
