@model IEnumerable<DashboardReportApp.Models.ProcessChangeRequestModel>

@{
    ViewData["Title"] = "Process Change Requests";
}

<div class="container-fluid mt-4">
    <h2 class="text-center mb-4">Process Change Requests</h2>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger fade show" role="alert">
            <strong>Validation Errors:</strong>
            <ul>
                @foreach (var state in ViewData.ModelState.Values)
                {
                    foreach (var error in state.Errors)
                    {
                        <li>@error.ErrorMessage</li>
                    }
                }
            </ul>
        </div>
    }

    <div class="custom-table">
        <table class="table table-striped table-bordered shadow-sm w-100">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Timestamp</th>
                    <th>Part</th>
                    <th>Requester</th>
                    <th>Req Date</th>
                    <th>Request</th>
                    <th>Test Requested</th>
                    <th>File Media Link</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Blank row for adding a new request -->
                <tr>
                    <form asp-action="AddRequest" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                    <td>Auto</td>
                    <td>Auto</td>
                    <td><input type="text" name="Part" class="form-control" required /></td>
                    <td><input type="text" name="Requester" class="form-control" required /></td>
                    <td>Auto</td>
                    <td><textarea name="Request" class="form-control text-area-large" required></textarea></td>
                    <td><input type="checkbox" name="TestRequested" /></td>
                    <td><input type="file" name="file" class="form-control" /></td>
                    <td><button type="submit" class="btn btn-success btn-sm w-100">Add</button></td>
                    </form>
                </tr>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Timestamp</td>
                        <td>@item.Part</td>
                        <td>@item.Requester</td>
                        <td>@(item.ReqDate?.ToString("yyyy-MM-dd") ?? "")</td>
                        <td>@item.Request</td>
                        <td>@item.TestRequested</td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.FileAddressMediaLink))
                            {
                                <button type="button" class="btn btn-info btn-sm fetch-image-btn" data-file-path="@item.FileAddressMediaLink">
                                    <i class="bi bi-eye"></i> Preview
                                </button>
                            }
                        </td>
                        <td>
                            <form action="/ProcessChangeRequest/UpdateMediaLinkFile" method="post" enctype="multipart/form-data">
                                <input type="hidden" name="id" value="@item.Id" />
                                <input type="file" name="file" class="form-control" />
                                <button type="submit" class="btn btn-primary btn-sm w-100"><i class="bi bi-upload"></i> Upload</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>





<!-- Bootstrap Modal for Image Preview -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" class="img-fluid" />
            </div>
        </div>
    </div>
</div>

<!-- Your JavaScript to Fetch & Display the Image -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const modalElement = document.getElementById('imageModal');

        // For each "Preview Image" button
        document.querySelectorAll('.fetch-image-btn').forEach(button => {
            button.addEventListener('click', function () {
                const filePath = this.dataset.filePath;

                if (!filePath) {
                    console.error("File path is missing.");
                    alert("No file path provided.");
                    return;
                }

                // Fetch image data from your endpoint
                fetch(`/MaintenanceRequest/FetchImage?filePath=${encodeURIComponent(filePath)}`)
                    .then(response => {
                        if (!response.ok) throw new Error("Failed to fetch the image.");
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Set the modal image source to the returned URL
                            const modalImage = document.getElementById('modalImage');
                            modalImage.src = data.url;

                            // Show the modal (using Bootstrap 5)
                            const bootstrapModal = new bootstrap.Modal(modalElement);
                            bootstrapModal.show();
                        } else {
                            alert(`Error: ${data.message}`);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching image:', error);
                        alert('An error occurred while fetching the image.');
                    });
            });
        });

        // Cleanup the modal when hidden
        modalElement.addEventListener('hidden.bs.modal', function () {
            const modalImage = document.getElementById('modalImage');
            modalImage.src = '';

            // Remove any leftover backdrop (rare, but just in case)
            const modalBackdrop = document.querySelector('.modal-backdrop');
            if (modalBackdrop) modalBackdrop.remove();

            document.body.classList.remove('modal-open');
            document.body.style = ''; // Clear any inline styles
        });
    });
</script>
