@{
    ViewData["Title"] = "Prolink Data";
}

<div class="text-center">
    <h2>Prolink Data</h2>
    <p class="fst-italic">
        Note: Querying or generating a PDF for very large datasets can take a while.
        Please refine your search if possible.
    </p>
</div>

<style>
    /* Stack the form elements vertically */
    #reportForm {
        max-width: 500px;
        margin: 0 auto;
    }
        /* Add spacing between each form row */
        #reportForm > div {
            margin-bottom: 15px;
        }
        /* Style the labels and inputs to be on separate lines */
        #reportForm label,
        #reportForm input,
        #reportForm select {
            display: block;
            width: 100%;
        }
    /* Container for the two buttons: display them inline */
    .button-container {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

        .button-container button {
            flex: 1;
        }
    /* Center the generated tables */
    #prolinkTableRoot table {
        margin: 1rem auto; /* center the table horizontally */
    }
</style>

<form id="reportForm" onsubmit="return false;">
    <div>
        <label for="partString">Part:</label>
        <input type="text" id="partString" name="partString" required />
    </div>
    <div>
        <label for="type">Department:</label>
        <select id="type" name="type">
            <option value="">Any</option>
            <option value="mold">Molding</option>
            <option value="sint">Sintering</option>
            <option value="machin">Machining</option>
        </select>
    </div>
    <div>
        <label for="startDate">Start Date (optional):</label>
        <input type="date" id="startDate" name="startDate" />
    </div>
    <div>
        <label for="endDate">End Date (optional):</label>
        <input type="date" id="endDate" name="endDate" />
    </div>
    <!-- Checkbox for filtering only out-of-spec records -->
    <div>
        <input type="checkbox" id="onlyOutOfSpec" name="onlyOutOfSpec" value="true" />
        <label for="onlyOutOfSpec">Only show out-of-spec records</label>
    </div>
    <!-- Checkbox for including corrective actions -->
    <div>
        <input type="checkbox" id="includeCorrectiveActions" name="includeCorrectiveActions" value="true" />
        <label for="includeCorrectiveActions">Include Corrective Actions</label>
    </div>
    <div class="button-container">
        <!-- "Generate PDF" button -->
        <button type="button" id="pdfButton" onclick="generatePdfAjax()">
            Generate PDF
        </button>
        <!-- Query button triggers an AJAX call -->
        <button type="button" id="queryButton" onclick="queryData()">
            Query
        </button>
    </div>
</form>

<!-- Container for the result table(s) -->
<div id="prolinkTableRoot"></div>

<script>
    // Build a common query string from form fields
    function buildQueryParams() {
        const partString = document.getElementById("partString").value;
        const type = document.getElementById("type").value;
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;
        const onlyOutOfSpec = document.getElementById("onlyOutOfSpec").checked;
        const includeCorrectiveActions = document.getElementById("includeCorrectiveActions").checked;

        let query = "?partString=" + encodeURIComponent(partString)
                  + "&type=" + encodeURIComponent(type)
                  + "&startDate=" + encodeURIComponent(startDate)
                  + "&endDate=" + encodeURIComponent(endDate)
                  + "&onlyOutOfSpec=" + encodeURIComponent(onlyOutOfSpec)
                  + "&includeCorrectiveActions=" + encodeURIComponent(includeCorrectiveActions);
        return query;
    }

    // Generate PDF via AJAX (spinner functions come from _Layout)
    async function generatePdfAjax() {
        try {
            showSpinner();
            const queryString = buildQueryParams();
            const response = await fetch('/Prolink/GeneratePdf' + queryString, {
                method: 'GET',
                headers: { 'Accept': 'application/pdf' }
            });
            if (!response.ok) {
                throw new Error("PDF generation request failed.");
            }
            const pdfBlob = await response.blob();
            const blobUrl = URL.createObjectURL(pdfBlob);
            window.open(blobUrl, '_blank');
        } catch (err) {
            console.error("Error generating PDF:", err);
            alert("Error generating PDF. See console for details.");
        } finally {
            hideSpinner();
        }
    }

    // Query data and build table
    function queryData() {
        showSpinner();
        const queryString = buildQueryParams();
        fetch('/Prolink/QueryData' + queryString)
            .then(response => response.json())
            .then(json => {
                hideSpinner();
                const container = document.getElementById("prolinkTableRoot");
                container.innerHTML = "";

                if (!json.departmentResults || !json.departmentResults.length) {
                    container.innerHTML = "<p>No results found.</p>";
                    return;
                }

                json.departmentResults.forEach(dept => {
                    // Department name already mapped on server (e.g., "Molding")
                    if (!dept.rows || !dept.rows.length) {
                        const msg = document.createElement("p");
                        msg.textContent = "No records found for department: " + dept.departmentName;
                        container.appendChild(msg);
                        return;
                    }

                    const heading = document.createElement("h3");
                    heading.textContent = "Department: " + dept.departmentName;
                    heading.style.textAlign = "center";
                    container.appendChild(heading);

                    const table = document.createElement("table");
                    table.border = "1";
                    table.cellPadding = "5";
                    table.style.marginBottom = "30px";
                    table.style.backgroundColor = "black";
                    table.style.color = "goldenrod";
                    table.style.borderColor = "goldenrod";

                    // Stat rows: USL, LSL, Max, Min
                    const rowLabels = ["USL", "LSL", "Max", "Min"];
                    rowLabels.forEach(label => {
                        const tr = document.createElement("tr");
                        const tdLabel = document.createElement("td");
                        tdLabel.style.fontWeight = "bold";
                        tdLabel.textContent = label;
                        tdLabel.style.backgroundColor = "black";
                        tdLabel.style.color = "goldenrod";
                        tr.appendChild(tdLabel);

                        const tdBlank = document.createElement("td");
                        tdBlank.textContent = "";
                        tdBlank.style.backgroundColor = "black";
                        tdBlank.style.color = "goldenrod";
                        tr.appendChild(tdBlank);

                        dept.dimensionColumns.forEach(dim => {
                            let val = "";
                            const stats = dept.dimensionStats[dim];
                            if (stats) {
                                if (label === "USL") val = stats.usl.toFixed(4);
                                else if (label === "LSL") val = stats.lsl.toFixed(4);
                                else if (label === "Max") val = stats.max.toFixed(4);
                                else if (label === "Min") val = stats.min.toFixed(4);
                            }
                            const td = document.createElement("td");
                            td.textContent = val;
                            td.style.backgroundColor = "black";
                            td.style.color = "goldenrod";
                            tr.appendChild(td);
                        });

                        dept.factorColumns.forEach(fc => {
                            const tdF = document.createElement("td");
                            tdF.textContent = "";
                            tdF.style.backgroundColor = "black";
                            tdF.style.color = "goldenrod";
                            tr.appendChild(tdF);
                        });

                        table.appendChild(tr);
                    });

                    // Header row for data
                    const headerRow = document.createElement("tr");
                    ["Record", "Date/Time"].forEach(h => {
                        const th = document.createElement("th");
                        th.textContent = h;
                        th.style.backgroundColor = "black";
                        th.style.color = "goldenrod";
                        headerRow.appendChild(th);
                    });
                    dept.dimensionColumns.forEach(dim => {
                        const th = document.createElement("th");
                        th.textContent = dim;
                        th.style.backgroundColor = "black";
                        th.style.color = "goldenrod";
                        headerRow.appendChild(th);
                    });
                    dept.factorColumns.forEach(fc => {
                        const th = document.createElement("th");
                        th.textContent = fc;
                        th.style.backgroundColor = "black";
                        th.style.color = "goldenrod";
                        headerRow.appendChild(th);
                    });
                    table.appendChild(headerRow);

                    // Data rows
                    dept.rows.forEach(row => {
                        const tr = document.createElement("tr");
                        const tdRecord = document.createElement("td");
                        tdRecord.textContent = row.recordNumber;
                        tdRecord.style.backgroundColor = "black";
                        tdRecord.style.color = "goldenrod";
                        tr.appendChild(tdRecord);

                        const tdDate = document.createElement("td");
                        const dateVal = new Date(row.measureDate).toLocaleString();
                        tdDate.textContent = dateVal;
                        tdDate.style.backgroundColor = "black";
                        tdDate.style.color = "goldenrod";
                        tr.appendChild(tdDate);

                        dept.dimensionColumns.forEach(dim => {
                            const tdM = document.createElement("td");
                            let val = row.measurements[dim] || "";
                            tdM.textContent = val;
                            tdM.style.backgroundColor = "black";
                            tdM.style.color = "goldenrod";
                            tdM.style.textAlign = "right";
                            const stats = dept.dimensionStats[dim];
                            if (stats && val !== "") {
                                const meas = parseFloat(val);
                                if (!isNaN(meas) && (meas > stats.usl || meas < stats.lsl)) {
                                    tdM.style.color = "red";
                                }
                            }
                            tr.appendChild(tdM);
                        });

                        dept.factorColumns.forEach(fc => {
                            const tdF = document.createElement("td");
                            let val = (row.factorValues && row.factorValues[fc]) || "";
                            tdF.textContent = val;
                            tr.appendChild(tdF);
                        });

                        table.appendChild(tr);

                        // Append corrective actions row if available for this record
                        if (row.correctiveActions && row.correctiveActions.length > 0) {
                            const trCA = document.createElement("tr");
                            const tdCA = document.createElement("td");
                            // Use total number of columns
                            tdCA.colSpan = 2 + dept.dimensionColumns.length + dept.factorColumns.length;
                            tdCA.style.backgroundColor = "black";
                            tdCA.style.color = "cyan";
                            tdCA.textContent = "Corrective Actions: " + row.correctiveActions.map(ca => ca.actionRef + ": " + ca.actionDesc).join("; ");
                            trCA.appendChild(tdCA);
                            table.appendChild(trCA);
                        }
                    });

                    container.appendChild(table);
                });
            })
            .catch(err => {
                console.error("Error querying pivoted data:", err);
                document.getElementById("prolinkTableRoot").innerHTML =
                    "<p style='color:red;'>Error loading data.</p>";
            });
    }
</script>
