@{
    ViewData["Title"] = "Prolink Data";
}

<h2>Prolink Data</h2>

<style>
    /* Stack the form elements vertically */
    #reportForm {
        max-width: 500px;
        margin: 0 auto;
    }
        /* Add spacing between each form row */
        #reportForm > div {
            margin-bottom: 15px;
        }
        /* Style the labels and inputs to be on separate lines */
        #reportForm label,
        #reportForm input,
        #reportForm select {
            display: block;
            width: 100%;
        }
    /* Container for the two buttons: display them inline */
    .button-container {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

        .button-container button {
            flex: 1;
        }
</style>

<form id="reportForm">
    <div>
        <label for="partString">Part:</label>
        <input type="text" id="partString" name="partString" required />
    </div>
    <div>
        <label for="type">Department:</label>
        <select id="type" name="type">
            <option value="">Any</option>
            <option value="mold">Molding</option>
            <option value="sint">Sintering</option>
            <option value="machin">Machining</option>
        </select>
    </div>
    <div>
        <label for="startDate">Start Date (optional):</label>
        <input type="date" id="startDate" name="startDate" />
    </div>
    <div>
        <label for="endDate">End Date (optional):</label>
        <input type="date" id="endDate" name="endDate" />
    </div>
    <!-- Checkbox for filtering only out-of-spec records -->
    <div>
        <input type="checkbox" id="onlyOutOfSpec" name="onlyOutOfSpec" value="true" />
        <label for="onlyOutOfSpec">Only show out-of-spec records</label>
    </div>
    <div class="button-container">
        <!-- Generate PDF button submits the form to the GeneratePdf action -->
        <button type="submit" formaction='@Url.Action("GeneratePdf", "Prolink")' formmethod="get" target="_blank">
            Generate PDF
        </button>
        <!-- Query button triggers an AJAX call to update the React table -->
        <button type="button" id="queryButton" onclick="queryData()">Query</button>
    </div>
</form>

<!-- Container for the React table (no initial data) -->
<div id="prolinkTableRoot"></div>

<script>
    // Utility: Convert department code to display string. // CHANGED HERE
    function getDeptDisplayName(code) {
        switch (code.toLowerCase()) {
            case "mold":
                return "Molding";
            case "sint":
                return "Sintering";
            case "machin":
                return "Machining";
            default:
                return code; // fallback if something else
        }
    }

    // Define the column definitions for your React table (keys in camelCase).
    function getColumns() {
        return [
            { key: 'partId', label: 'Part ID' },
            { key: 'recordNumber', label: 'Record' },
            { key: 'measureDate', label: 'Date/Time' },
            { key: 'qccFileDesc', label: 'Qcc File Desc' },
            { key: 'dimension', label: 'Dimension' },
            { key: 'measurementValue', label: 'Measurement Value' },
            { key: 'nominal', label: 'Nominal' },
            { key: 'tolPlus', label: 'Tol Plus' },
            { key: 'tolMinus', label: 'Tol Minus' }
        ];
    }

    function queryData() {
        var partString = document.getElementById("partString").value;
        var type = document.getElementById("type").value;
        var startDate = document.getElementById("startDate").value;
        var endDate = document.getElementById("endDate").value;
        var onlyOutOfSpec = document.getElementById("onlyOutOfSpec").checked;

        var query = "?partString=" + encodeURIComponent(partString)
                  + "&type=" + encodeURIComponent(type)
                  + "&startDate=" + encodeURIComponent(startDate)
                  + "&endDate=" + encodeURIComponent(endDate)
                  + "&onlyOutOfSpec=" + encodeURIComponent(onlyOutOfSpec);

        fetch('/Prolink/QueryData' + query)
            .then(response => response.json())
            .then(json => {
                // Clear the tableRoot
                const container = document.getElementById("prolinkTableRoot");
                container.innerHTML = "";

                // We expect json: { departmentResults: [...] }
                if (!json.departmentResults || !json.departmentResults.length) {
                    container.innerHTML = "<p>No results found.</p>";
                    return;
                }

                // For each department, build a separate table
                json.departmentResults.forEach(dept => {
                    // If there's no pivot rows, skip
                    if (!dept.rows || dept.rows.length === 0) {
                        const msg = document.createElement("p");
                        msg.textContent = `No records found for department: ${getDeptDisplayName(dept.departmentName)}`;
                        container.appendChild(msg);
                        return;
                    }

                    // Department heading // CHANGED HERE
                    const heading = document.createElement("h3");
                    heading.textContent = `Department: ${getDeptDisplayName(dept.departmentName)}`;
                    container.appendChild(heading);

                    // Build table
                    const table = document.createElement("table");
                    // Basic table styling
                    table.border = "1";
                    table.cellPadding = "5";
                    table.style.marginBottom = "30px";
                    table.style.backgroundColor = "black";       // CHANGED HERE
                    table.style.color = "goldenrod";             // CHANGED HERE
                    table.style.borderColor = "goldenrod";       // CHANGED HERE

                    // 1) stat rows (USL, LSL, Max, Min)
                    const rowLabels = ["USL", "LSL", "Max", "Min"];
                    rowLabels.forEach(label => {
                        const tr = document.createElement("tr");

                        // First cell = label
                        const tdLabel = document.createElement("td");
                        tdLabel.style.fontWeight = "bold";
                        tdLabel.textContent = label;
                        tdLabel.style.backgroundColor = "black"; // CHANGED HERE
                        tdLabel.style.color = "goldenrod";       // CHANGED HERE
                        tr.appendChild(tdLabel);

                        // Second cell = blank
                        const tdBlank = document.createElement("td");
                        tdBlank.textContent = "";
                        tdBlank.style.backgroundColor = "black"; // CHANGED HERE
                        tdBlank.style.color = "goldenrod";       // CHANGED HERE
                        tr.appendChild(tdBlank);

                        // dimension columns
                        dept.dimensionColumns.forEach(dim => {
                            let val = "";
                            if (dept.dimensionStats && dept.dimensionStats[dim]) {
                                const st = dept.dimensionStats[dim];
                                if (label === "USL") {
                                    val = st.usl.toFixed(4);
                                } else if (label === "LSL") {
                                    val = st.lsl.toFixed(4);
                                } else if (label === "Max") {
                                    val = st.max.toFixed(4);
                                } else if (label === "Min") {
                                    val = st.min.toFixed(4);
                                }
                            }
                            const td = document.createElement("td");
                            td.textContent = val;
                            td.style.backgroundColor = "black"; // CHANGED HERE
                            td.style.color = "goldenrod";       // CHANGED HERE
                            tr.appendChild(td);
                        });

                        // factor columns => blank
                        dept.factorColumns.forEach(fc => {
                            const tdF = document.createElement("td");
                            tdF.textContent = "";
                            tdF.style.backgroundColor = "black"; // CHANGED HERE
                            tdF.style.color = "goldenrod";       // CHANGED HERE
                            tr.appendChild(tdF);
                        });

                        table.appendChild(tr);
                    });

                    // 2) header row
                    const headerRow = document.createElement("tr");

                    // "Record" and "Date/Time"
                    ["Record", "Date/Time"].forEach(h => {
                        const th = document.createElement("th");
                        th.textContent = h;
                        th.style.backgroundColor = "black"; // CHANGED HERE
                        th.style.color = "goldenrod";       // CHANGED HERE
                        headerRow.appendChild(th);
                    });

                    // dimension columns
                    dept.dimensionColumns.forEach(dim => {
                        const th = document.createElement("th");
                        th.textContent = dim;
                        th.style.backgroundColor = "black"; // CHANGED HERE
                        th.style.color = "goldenrod";       // CHANGED HERE
                        headerRow.appendChild(th);
                    });

                    // factor columns
                    dept.factorColumns.forEach(fc => {
                        const th = document.createElement("th");
                        th.textContent = fc;
                        th.style.backgroundColor = "black"; // CHANGED HERE
                        th.style.color = "goldenrod";       // CHANGED HERE
                        headerRow.appendChild(th);
                    });

                    table.appendChild(headerRow);

                    // 3) Data rows
                    dept.rows.forEach(row => {
                        const tr = document.createElement("tr");

                        // record number
                        const tdRecord = document.createElement("td");
                        tdRecord.textContent = row.recordNumber;
                        tdRecord.style.backgroundColor = "black"; // CHANGED HERE
                        tdRecord.style.color = "goldenrod";       // CHANGED HERE
                        tr.appendChild(tdRecord);

                        // date/time
                        const tdDate = document.createElement("td");
                        const dateVal = new Date(row.measureDate).toLocaleString();
                        tdDate.textContent = dateVal;
                        tdDate.style.backgroundColor = "black"; // CHANGED HERE
                        tdDate.style.color = "goldenrod";       // CHANGED HERE
                        tr.appendChild(tdDate);

                        // dimension columns
                        dept.dimensionColumns.forEach(dim => {
                            const tdM = document.createElement("td");
                            let val = "";
                            if (row.measurements && row.measurements[dim]) {
                                val = row.measurements[dim];
                            }
                            tdM.textContent = val;
                            tdM.style.backgroundColor = "black"; // CHANGED HERE
                            tdM.style.color = "goldenrod";       // CHANGED HERE
                            tdM.style.textAlign = "right";

                            // highlight out-of-spec in red
                            if (dept.dimensionStats && dept.dimensionStats[dim] && val) {
                                const st = dept.dimensionStats[dim];
                                const meas = parseFloat(val);
                                if (!isNaN(meas)) {
                                    if (meas > st.usl || meas < st.lsl) {
                                        tdM.style.color = "red";
                                    }
                                }
                            }
                            tr.appendChild(tdM);
                        });

                        // factor columns
                        dept.factorColumns.forEach(fc => {
                            const tdF = document.createElement("td");
                            let val = "";
                            if (row.factors && row.factors[fc]) {
                                val = row.factors[fc];
                            }
                            tdF.textContent = val;
                            tdF.style.backgroundColor = "black"; // CHANGED HERE
                            tdF.style.color = "goldenrod";       // CHANGED HERE
                            tdF.style.textAlign = "right";
                            tr.appendChild(tdF);
                        });

                        table.appendChild(tr);
                    });

                    // Add table to container
                    container.appendChild(table);
                });
            })
            .catch(err => {
                console.error("Error querying pivoted data:", err);
                document.getElementById("prolinkTableRoot").innerHTML =
                    "<p style='color:red;'>Error loading data.</p>";
            });
    }

   
</script>

