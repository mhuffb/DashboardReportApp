<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Prolink Data</title>
    <!-- Include Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Center the form and constrain its width */
        #reportForm {
            max-width: 500px;
            margin: 0 auto;
        }
            /* Add some spacing between form fields */
            #reportForm div {
                margin-bottom: 15px;
            }
            /* For non-checkbox inputs, display the label on top and make input fields full width */
            #reportForm label {
                display: block;
                margin-bottom: 5px;
            }

            #reportForm input:not([type="checkbox"]),
            #reportForm select {
                width: 100%;
                box-sizing: border-box;
                padding: 8px;
            }
        /* For checkboxes, keep label inline */
        .checkbox-group {
            display: flex;
            align-items: center;
        }

            .checkbox-group label {
                display: inline;
                margin-left: 5px;
            }
        /* Center buttons with flex layout */
        .button-container {
            display: flex;
            justify-content: center;
            gap: 10px;
        }
    </style>
</head>
<body>
    <div class="text-center">
        <h1>Prolink Data</h1>
        <p>Note: Querying or generating a PDF for very large datasets can take a while. Please refine your search if possible.</p>
    </div>

    <form id="reportForm" onsubmit="return false;">
        <div>
            <label for="partString">Part:</label>
            <input type="text" id="partString" name="partString" required />
        </div>
        <div>
            <label for="type">Department:</label>
            <select id="type" name="type">
                <option value="">Any</option>
                <option value="mold">Molding</option>
                <option value="sint">Sintering</option>
                <option value="machin">Machining</option>
            </select>
        </div>
        <div>
            <label for="startDate">Start Date (optional):</label>
            <input type="date" id="startDate" name="startDate" />
        </div>
        <div>
            <label for="endDate">End Date (optional):</label>
            <input type="date" id="endDate" name="endDate" />
        </div>
        <div class="checkbox-group">
            <input type="checkbox" id="onlyOutOfSpec" name="onlyOutOfSpec" value="true" />
            <label for="onlyOutOfSpec">Only show out-of-spec records</label>
        </div>
        <div class="checkbox-group">
            <input type="checkbox" id="includeCorrectiveActions" name="includeCorrectiveActions" value="true" />
            <label for="includeCorrectiveActions">Include Corrective Actions</label>
        </div>
        <div class="button-container">
            <!-- PDF generation button -->
            <button type="button" id="pdfButton" onclick="generatePdfAjax()">Generate PDF</button>
            <!-- Graph generation button -->
            <button type="button" id="queryButton" onclick="queryData()">View Graphs</button>
        </div>
    </form>

    <!-- Container for the graphs -->
    <div id="chartsRoot" style="margin-top:40px;"></div>

    <script>
        // Spinner functions (replace these with your own if needed)
        function showSpinner() {
            console.log("Spinner shown");
        }
        function hideSpinner() {
            console.log("Spinner hidden");
        }

        // Build query parameters from form fields
        function buildQueryParams() {
            const partString = document.getElementById("partString").value;
            const type = document.getElementById("type").value;
            const startDate = document.getElementById("startDate").value;
            const endDate = document.getElementById("endDate").value;
            const onlyOutOfSpec = document.getElementById("onlyOutOfSpec").checked;
            const includeCorrectiveActions = document.getElementById("includeCorrectiveActions").checked;

            return "?partString=" + encodeURIComponent(partString)
                   + "&type=" + encodeURIComponent(type)
                   + "&startDate=" + encodeURIComponent(startDate)
                   + "&endDate=" + encodeURIComponent(endDate)
                   + "&onlyOutOfSpec=" + encodeURIComponent(onlyOutOfSpec)
                   + "&includeCorrectiveActions=" + encodeURIComponent(includeCorrectiveActions);
        }

        // Function to generate graphs for each department and dimension using Chart.js
        function generateGraphs(departmentResults) {
            const chartsContainer = document.getElementById("chartsRoot");
            chartsContainer.innerHTML = ''; // Clear previous graphs

            departmentResults.forEach(dept => {
                // Container for each department's graphs
                const deptContainer = document.createElement("div");
                deptContainer.style.marginBottom = "40px";

                // Department header
                const deptHeader = document.createElement("h3");
                deptHeader.textContent = "Department: " + dept.departmentName;
                deptHeader.style.textAlign = "center";
                deptContainer.appendChild(deptHeader);

                // Loop through each dimension for the department
                dept.dimensionColumns.forEach(dim => {
                    const graphContainer = document.createElement("div");
                    graphContainer.style.marginBottom = "20px";

                    // Create canvas element for the chart
                    const canvas = document.createElement("canvas");
                    canvas.id = dept.departmentName + "_" + dim + "_chart";
                    graphContainer.appendChild(canvas);
                    deptContainer.appendChild(graphContainer);

                    // Extract labels and measurement data using measure date for x-axis
                    const labels = [];
                    const measurementData = [];
                    dept.rows.forEach(row => {
                        if (row.measurements && row.measurements[dim]) {
                            // Convert measure date to a locale date string
                            labels.push(new Date(row.measureDate).toLocaleDateString());
                            measurementData.push(parseFloat(row.measurements[dim]));
                        }
                    });

                    // Skip this dimension if there is no data
                    if (measurementData.length === 0) return;

                    // Retrieve USL and LSL values for this dimension
                    const stats = dept.dimensionStats[dim];
                    if (!stats) return;
                    const usl = stats.usl;
                    const lsl = stats.lsl;

                    // Create constant arrays for USL and LSL matching the number of data points
                    const uslData = new Array(measurementData.length).fill(usl);
                    const lslData = new Array(measurementData.length).fill(lsl);

                    // Create the chart using Chart.js
                    const ctx = canvas.getContext("2d");
                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'Measurement',
                                    data: measurementData,
                                    borderColor: 'blue',
                                    fill: false,
                                    tension: 0.1,
                                    pointRadius: 4
                                },
                                {
                                    label: 'USL (' + usl.toFixed(4) + ')',
                                    data: uslData,
                                    borderColor: 'red',
                                    borderDash: [5, 5],
                                    fill: false,
                                    pointRadius: 0,
                                    tension: 0
                                },
                                {
                                    label: 'LSL (' + lsl.toFixed(4) + ')',
                                    data: lslData,
                                    borderColor: 'green',
                                    borderDash: [5, 5],
                                    fill: false,
                                    pointRadius: 0,
                                    tension: 0
                                }
                            ]
                        },
                        options: {
                            plugins: {
                                title: {
                                    display: true,
                                    text: dim  // Chart title is the dimension name
                                }
                            },
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Measure Date'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Measurement Value'
                                    }
                                }
                            }
                        }
                    });
                });

                chartsContainer.appendChild(deptContainer);
            });
        }

        // PDF generation function using async/await
        async function generatePdfAjax() {
            try {
                showSpinner();
                const queryString = buildQueryParams();
                const response = await fetch('/Prolink/GeneratePdf' + queryString, {
                    method: 'GET',
                    headers: { 'Accept': 'application/pdf' }
                });
                if (!response.ok) {
                    throw new Error("PDF generation request failed with status " + response.status);
                }
                const pdfBlob = await response.blob();
                const blobUrl = URL.createObjectURL(pdfBlob);
                window.open(blobUrl, '_blank');  // Open the generated PDF in a new tab/window
            } catch (err) {
                console.error("Error generating PDF:", err);
                alert("Error generating PDF. See console for details.");
            } finally {
                hideSpinner();
            }
        }

        // Function to query data and generate graphs only
        function queryData() {
            showSpinner();
            const queryString = buildQueryParams();
            fetch('/Prolink/QueryData' + queryString)
                .then(response => response.json())
                .then(json => {
                    hideSpinner();
                    const chartsContainer = document.getElementById("chartsRoot");
                    chartsContainer.innerHTML = ""; // Clear any previous content

                    if (!json.departmentResults || !json.departmentResults.length) {
                        chartsContainer.innerHTML = "<p>No results found.</p>";
                        return;
                    }

                    // Generate graphs based on the returned department results
                    generateGraphs(json.departmentResults);
                })
                .catch(err => {
                    console.error("Error querying pivoted data:", err);
                    document.getElementById("chartsRoot").innerHTML =
                        "<p style='color:red;'>Error loading data.</p>";
                });
        }
    </script>
</body>
</html>
