@model DashboardReportApp.Models.ScheduleModel
@using System.Text.Json;
<style>
    /* Make query results modal wider */
    .modal-dialog.modal-xxl {
        max-width: 90% !important; /* Change width as desired */
    }

</style>
<div class="container mt-4">
    <h1 class="text-center mb-4">Schedule Parts</h1>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <!-- Success and Error Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <!-- Start Scheduling Button -->
    <div class="text-center">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#startSchedulingModal">
            Start Scheduling
        </button>
        <!-- Receive Powder Button -->
        <button type="button" class="btn btn-secondary ms-2" data-bs-toggle="modal" data-bs-target="#receivePowderModal">
            Receive Powder
        </button>
        <button type="button" class="btn btn-outline-secondary ms-2" data-bs-toggle="modal" data-bs-target="#powderMixModal">
            Show Received Powder
        </button>
        <button type="button" class="btn btn-success ms-2" data-bs-toggle="modal" data-bs-target="#createMixQrModal">
            Create Mix QR Code
        </button>

    </div>

    <!-- Table of All Scheduled Parts -->
    <h3 class="mt-4 text-center">Parts Scheduled</h3>
    @if (Model.AllParts == null || !Model.AllParts.Any())
    {
        <p class="text-center text-muted">No open parts found.</p>
    }
    else
    {
        <div class="table-responsive">
            <table id="scheduledPartsTable" class="custom-table table-striped table-bordered shadow-sm">
                <thead class="table-dark">
                    <tr>
                        <th class="sortable" data-label="Date">Date</th>
                        <th class="sortable" data-label="Part">Part</th>
                        <th class="sortable" data-label="Component">Component</th>
                        <th class="sortable" data-label="MaterialCode">Material Code</th>

                        <th class="sortable" data-label="Quantity">Quantity</th>
                        <th class="sortable" data-label="ProdNumber">Production Number</th>
                        <th class="sortable" data-label="Run">Run</th>
                        <th class="sortable" data-label="Open">Open</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.AllParts.Count; i++)
                    {
                        var partUpper = Model.AllParts[i].MasterId?.ToUpper();
                        <tr data-index="@i"
                            data-date="@(Model.AllParts[i].Date?.ToString("yyyy-MM-dd"))"
                            data-masterid="@partUpper"
                            data-component="@Model.AllParts[i].Component"
                            data-qty="@Model.AllParts[i].QtyToSchedule"
                            data-prodnumber="@Model.AllParts[i].ProdNumber"
                            data-run="@Model.AllParts[i].Run"
                            data-id="@Model.AllParts[i].Id"
                            data-open="@Model.AllParts[i].Open"
                            data-material="@Model.AllParts[i].MaterialCode">
                            
                            <td>@Model.AllParts[i].Date?.ToString("yyyy-MM-dd")</td>
                            <td>@partUpper</td>
                            <td>@Model.AllParts[i].Component</td>
                            <td>@Model.AllParts[i].MaterialCode</td>

                            <td>@Model.AllParts[i].QtyToSchedule</td>
                            <td>@Model.AllParts[i].ProdNumber</td>
                            <td>@Model.AllParts[i].Run</td>
                            <td>@(Model.AllParts[i].Open == 1 ? "Yes" : "No")</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-primary edit-btn" data-index="@i">Edit</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal 1: Start Scheduling (Query Input) -->
<div class="modal fade" id="startSchedulingModal" tabindex="-1" aria-labelledby="startSchedulingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="queryFormModal">
                <div class="modal-header">
                    <h5 class="modal-title" id="startSchedulingModalLabel">Enter Part and Quantity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="queryPart" class="form-label">Part Number</label>
                        <input type="text" class="form-control" id="queryPart" placeholder="Enter Part Number" required />
                    </div>
                    <div class="mb-3">
                        <label for="queryQuantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="queryQuantity" placeholder="Enter Quantity" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- Query Button triggers AJAX call -->
                    <button type="button" id="queryButtonModal" class="btn btn-primary">Query</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal 2: Query Results & Scheduling -->
<div class="modal fade" id="queryResultsModal" tabindex="-1" aria-labelledby="queryResultsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xxl">

        <div class="modal-content">
            <form asp-action="ScheduleComponents" method="post" id="scheduleComponentsForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="queryResultsModalLabel">Query Results - Adjust Quantity to Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Partial view content will be injected here via AJAX -->
                    <div id="queryResultsContent">
                        <p class="text-center">No components found.</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- Schedule Button inside modal -->
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-calendar-check"></i> Schedule
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="UpdatePart" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Part</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Hidden field to pass the record's ID -->
                    <input type="hidden" id="editId" name="Id" />
                    <div class="mb-3">
                        <label for="editDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="editDate" name="Date" />
                    </div>
                    <div class="mb-3">
                        <label for="editMasterId" class="form-label">Part</label>
                        <input type="text" class="form-control" id="editMasterId" name="MasterId" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="editComponent" class="form-label">Component</label>
                        <input type="text" class="form-control" id="editComponent" name="Component" />
                    </div>
                    <div class="mb-3">
                        <label for="editMaterialCode" class="form-label">Material Code</label>
                        <input type="text" class="form-control" id="editMaterialCode" name="MaterialCode" />
                    </div>

                    <div class="mb-3">
                        <label for="editQtyToSchedule" class="form-label">Qty to Schedule</label>
                        <input type="number" class="form-control" id="editQtyToSchedule" name="QtyToSchedule" />
                    </div>
                    <div class="mb-3">
                        <label for="editProdNumber" class="form-label">Production Number</label>
                        <input type="text" class="form-control" id="editProdNumber" name="ProdNumber" />
                    </div>
                    <div class="mb-3">
                        <label for="editRun" class="form-label">Run</label>
                        <input type="text" class="form-control" id="editRun" name="Run" />
                    </div>
                    <div class="mb-3">
                        <label for="editOpen" class="form-label">Open</label>
                        <select class="form-control" id="editOpen" name="Open">
                            <option value="1">Yes</option>
                            <option value="0">No</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal: Receive Powder -->
<div class="modal fade" id="receivePowderModal" tabindex="-1" aria-labelledby="receivePowderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form id="receivePowderForm" enctype="multipart/form-data">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="receivePowderModalLabel">Upload Powder PDF</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="file" name="pdf" accept=".pdf" required class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="modal fade" id="powderMixModal" tabindex="-1" aria-labelledby="powderMixModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="powderMixModalLabel">Powder Mix History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="custom-table table-striped table-bordered shadow-sm" id="powderMixTable">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Lot #</th>
                                <th>Weight (lbs)</th>
                                <th>Material Code</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- rows injected via JS -->
                        </tbody>
                    </table>
                </div>
                <small class="text-muted">Click <em>Edit</em> to modify a row; then click <em>Save</em>.</small>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal: Create Mix QR Code -->
<div class="modal fade" id="createMixQrModal" tabindex="-1" aria-labelledby="createMixQrModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="mixQrForm" onsubmit="return false;">
                <div class="modal-header">
                    <h5 class="modal-title" id="createMixQrModalLabel">Create Mix QR Code</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-sm-6">
                            <label class="form-label">Sintergy Mix Code</label>
                            <input type="text" class="form-control" id="mixCode" placeholder="e.g., STY-211" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Lot Number</label>
                            <input type="number" class="form-control" id="lotNumber" placeholder="e.g., 123456" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Weight per Bag/Drum (lbs)</label>
                            <input type="number" step="0.01" class="form-control" id="weightPerBag" placeholder="e.g., 50" required>
                        </div>
                       
                        <div class="col-sm-6">
                            <label class="form-label">Starting Bag #</label>
                            <input type="number" class="form-control" id="startBagNo" placeholder="e.g., 1" value="1" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Number of Bags/Drums/Containers</label>
                            <input type="number" class="form-control" id="labelQty" placeholder="e.g., 20" required>
                        </div>

                       

                        <div class="col-12">
                           
                            <div class="mt-2">
                                <label class="form-label">Payload Preview (first label)</label>
                                <input type="text" readonly class="form-control" id="qrTextPreview">
                            </div>

                        </div>

                        <div class="col-12 mt-3">
                            <div id="qrGrid" class="row g-3"></div>
                        </div>

                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" id="btnGenerateQr" class="btn btn-primary">Generate</button>
                    <button type="button" id="btnDownloadQr" class="btn btn-outline-secondary" disabled>Download PNG</button>
                    <button type="button" id="btnPrintQr" class="btn btn-outline-dark" disabled>Print</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .ui-autocomplete {
        z-index: 2000 !important;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>


    <!-- Vendor libraries (keep these above all custom scripts) -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js"></script>

    <script>
        // ---------- Utilities ----------
        const $$   = (sel, root=document) => Array.from(root.querySelectorAll(sel));
        const byId = (id) => document.getElementById(id);

        const swalOK  = (title, html) => Swal.fire({icon:'success', title, html, confirmButtonText:'OK'});
        const swalW   = (title, html) => Swal.fire({icon:'warning', title, html, confirmButtonText:'OK'});
        const swalErr = (title, html) => Swal.fire({icon:'error',   title, html, confirmButtonText:'OK'});

        // ---------- 1) Material autocomplete used in components partial ----------
        function initMaterialAutocomplete() {
          $(".material-input").each(function () {
            const $input = $(this);
            $input.autocomplete({
              source: function (request, response) {
                $.getJSON('/Schedule/GetMaterialSuggestions', {
                  part: $input.data('partcode'),
                  comp: $input.data('component'),
                  term: request.term
                }, function (data) { response(data); });
              },
              minLength: 1
            });
          });
        }

        // ---------- 2) Start Scheduling -> Query components ----------
        document.addEventListener("DOMContentLoaded", function () {
      const btnQuery = byId("queryButtonModal");
          if (btnQuery) {
            btnQuery.addEventListener("click", function () {
              let part = $("#queryPart").val();
              const quantity = $("#queryQuantity").val();
              if (!part || !quantity) { Swal.fire({icon:'warning', title:'Missing', text:'Enter part and quantity.'}); return; }

              part = part.toUpperCase();
              $("#queryPart").val(part);

              const startModalEl = document.getElementById('startSchedulingModal');
              const startModal   = bootstrap.Modal.getInstance(startModalEl);
              startModal && startModal.hide();

              fetch('/Schedule/GetComponents?part=' + encodeURIComponent(part) + '&quantity=' + encodeURIComponent(quantity))
                .then(r => r.text())
                .then(html => {
                  $("#queryResultsContent").html(html);
                  initMaterialAutocomplete(); // new rows get autocomplete
                  new bootstrap.Modal(document.getElementById('queryResultsModal')).show();
                })
                .catch(err => {
                  console.error(err);
                  Swal.fire({icon:'error', title:'Error', text:'Could not load components.'});
                });
            });
          }
        });

        // ---------- 3) Edit modal population for scheduled parts ----------
        document.addEventListener('DOMContentLoaded', function () {
          $$('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function () {
              const row = btn.closest('tr');
              if (!row) return;
              $('#editId').val(row.getAttribute('data-id'));
              $('#editDate').val(row.getAttribute('data-date'));
              $('#editMasterId').val(row.getAttribute('data-masterid'));
              $('#editComponent').val(row.getAttribute('data-component'));
              $('#editQtyToSchedule').val(row.getAttribute('data-qty'));
              $('#editProdNumber').val(row.getAttribute('data-prodnumber'));
              $('#editRun').val(row.getAttribute('data-run'));
              $('#editOpen').val(row.getAttribute('data-open'));
              $('#editMaterialCode').val(row.getAttribute('data-material') || '');
              new bootstrap.Modal(document.getElementById('editModal')).show();
            });
          });
        });

        // ---------- 4) Receive Powder: upload, confirm, insert ----------
        document.addEventListener('DOMContentLoaded', function () {
          const form = document.getElementById("receivePowderForm");
          if (!form) return;

          form.addEventListener("submit", function (e) {
            e.preventDefault(); e.stopPropagation();
            const formData = new FormData(form);

            fetch('/Schedule/ReceivePowder', { method: 'POST', body: formData })
              .then(r => r.json())
              .then(data => {
                if (!data.success) { Swal.fire({icon:'error', title:'Error', text:data.message}); return; }

                Swal.fire({
                  title: 'Confirm Powder Info',
                  html: `<b>Lot Number:</b> ${data.lotNumber}<br><b>Weight (lbs):</b> ${data.weight}<br><b>Material Code:</b> ${data.material}<br><br>Is this correct?`,
                  icon: 'question', showCancelButton: true, confirmButtonText: 'Yes, Save', cancelButtonText: 'No'
                }).then((res) => {
                  if (res.isConfirmed) {
                    confirmInsert(data.lotNumber, data.weight, data.material);
                  } else {
                    bootstrap.Modal.getInstance(document.getElementById('receivePowderModal'))?.hide();
                    Swal.fire({
                      title: 'Correct Info',
                      html:
                        '<input id="lotInput" type="text" class="swal2-input" placeholder="Lot Number" value="' + data.lotNumber + '">' +
                        '<input id="weightInput" type="text" class="swal2-input" placeholder="Weight (lbs)" value="' + data.weight + '">' +
                        '<input id="materialInput" type="text" class="swal2-input" placeholder="Material Code" value="' + data.material + '">',
                      showCancelButton: true, confirmButtonText: 'Save', cancelButtonText: 'Cancel',
                      focusConfirm: false, preConfirm: () => ({
                        lotNumber: document.getElementById('lotInput').value,
                        weight: document.getElementById('weightInput').value,
                        material: document.getElementById('materialInput').value
                      })
                    }).then((editRes) => {
                      if (editRes.isConfirmed) {
                        confirmInsert(editRes.value.lotNumber, editRes.value.weight, editRes.value.material);
                      }
                    });
                  }
                });

                function confirmInsert(lot, weight, material) {
                  const url = `/Schedule/ReceivePowder?confirm=true&lot=${lot}&weight=${weight}&material=${encodeURIComponent(material)}`;
                  fetch(url, { method: 'POST', body: formData })
                    .then(r => r.json())
                    .then(final => {
                      if (final.success) {
                        Swal.fire({icon:'success', title:'Saved!', text:final.message}).then(()=>location.reload());
                      } else {
                        Swal.fire({icon:'error', title:'Error', text:final.message});
                      }
                    });
                }
              });
          });
        });

        // ---------- 5) “Select Powder” button inside components list ----------
        $(function () {
          let activeIndex = null;

          $(document).on('click', '.select-powder-btn', function () {
            activeIndex = $(this).data('index');
            $.getJSON('/Schedule/GetPowderList', function (data) {
              const tbody = $('#powderTable tbody');
              tbody.empty();
              data.forEach(p => {
                tbody.append(`
                  <tr>
                    <td>${p.lotNumber}</td>
                    <td>${p.weightLbs}</td>
                    <td>${p.materialCode}</td>
                    <td>
                      <button type="button" class="btn btn-sm btn-primary choose-powder" data-mat="${p.materialCode}">Use</button>
                    </td>
                  </tr>
                `);
              });
              new bootstrap.Modal(document.getElementById('powderSelectModal')).show();
            });
          });

          $(document).on('click', '.choose-powder', function () {
            const mat = $(this).data('mat');
            if (activeIndex === null) return;
            $(`input[name='AllComponents[${activeIndex}].MaterialCode']`).val(mat);
            bootstrap.Modal.getInstance(document.getElementById('powderSelectModal'))?.hide();
          });
        });

        // ---------- 6) Powder Mix History modal (load + inline edit/delete) ----------
        document.addEventListener('DOMContentLoaded', function () {
          const modal = document.getElementById('powderMixModal');
          if (!modal) return;

          modal.addEventListener('shown.bs.modal', function () {
            fetch('/Schedule/GetPowderList')
              .then(r => r.json())
              .then(data => {
                const tbody = modal.querySelector('#powderMixTable tbody');
                tbody.innerHTML = '';
                data.forEach(r => {
                  const tr = document.createElement('tr');
                  tr.innerHTML = `
                    <td>${r.id}</td>
                    <td><input class="form-control form-control-sm pm-lot" type="number" value="${r.lotNumber}" /></td>
                    <td><input class="form-control form-control-sm pm-wt" type="number" step="0.01" value="${r.weightLbs}" /></td>
                    <td><input class="form-control form-control-sm pm-mat" type="text" value="${r.materialCode ?? ''}" /></td>
                    <td>${new Date(r.createdAt).toLocaleString()}</td>
                    <td class="d-flex gap-2">
                      <button class="btn btn-sm btn-primary pm-save">Save</button>
                      <button class="btn btn-sm btn-outline-danger pm-del">Delete</button>
                    </td>`;
                  tbody.appendChild(tr);
                });
              });
          });

          modal.querySelector('#powderMixTable').addEventListener('click', function (e) {
            if (e.target.classList.contains('pm-save')) {
              const tr = e.target.closest('tr');
              const id = parseInt(tr.children[0].textContent.trim(), 10);
              const lot = parseInt(tr.querySelector('.pm-lot').value, 10);
              const wt  = parseFloat(tr.querySelector('.pm-wt').value);
              const mat = tr.querySelector('.pm-mat').value;

              fetch('/Schedule/UpdatePowderMix', {
                method:'POST', headers:{'Content-Type':'application/json'},
                body: JSON.stringify({id, lotNumber:lot, weightLbs:wt, materialCode:mat})
              }).then(r=>r.json()).then(res=>{
                if (res.success) Swal.fire({icon:'success', title:'Saved', timer:1200, showConfirmButton:false});
                else Swal.fire({icon:'error', title:'Error', text:res.message||'Failed to save'});
              });
            }

            if (e.target.classList.contains('pm-del')) {
              const tr = e.target.closest('tr');
              const id = parseInt(tr.children[0].textContent.trim(), 10);
              Swal.fire({title:'Delete this entry?', icon:'warning', showCancelButton:true, confirmButtonText:'Delete'})
                .then(res=>{
                  if (!res.isConfirmed) return;
                  fetch('/Schedule/DeletePowderMix', {
                    method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(id)
                  }).then(r=>r.json()).then(out=>{
                    if (out.success) { tr.remove(); Swal.fire({icon:'success', title:'Deleted', timer:1000, showConfirmButton:false}); }
                    else Swal.fire({icon:'error', title:'Error', text: out.message || 'Failed to delete'});
                  });
                });
            }
          });
        });

        // ---------- 7) Part autocomplete on Start Scheduling modal ----------
        $(document).ready(function () {
          $("#queryPart").autocomplete({
            source: function (request, response) {
              $.getJSON('/Schedule/GetPartSuggestions', { term: request.term }, function (data) { response(data); });
            },
            minLength: 1,
            select: function () { $("#queryQuantity").val(1); }
          });
          $('#startSchedulingModal').on('shown.bs.modal', function () { $("#queryQuantity").val(1); });
        });

       </script>

<script>
    /* ===== MIX QR (DOM-ready, resilient, scoped to #createMixQrModal) ===== */
    (function () {
      document.addEventListener('DOMContentLoaded', () => {
        const modal = document.getElementById('createMixQrModal');
        if (!modal) { console.warn('[MixQR] #createMixQrModal not in DOM at ready'); return; }
        console.log('[MixQR] init OK');

        const $  = (sel, root = modal) => root.querySelector(sel);
        const say = (opts) => (window.Swal && Swal.fire) ? Swal.fire(opts)
                     : alert((opts.title||'') + '\n\n' + (opts.text || (opts.html||'').replace(/<[^>]*>/g,'')));
        const payload = (mix, lot, wt, bag) => `ADV;${mix};${lot};${wt};${bag}\n`;
        let labeledImages = []; // [{bag, dataUrl}]

        function setBtnState(enabled) {
          const dl = $('#btnDownloadQr'); if (dl) dl.disabled = !enabled;
          const pr = $('#btnPrintQr');    if (pr) pr.disabled = !enabled;
        }
        function clearPreview() {
          const grid = $('#qrGrid') || $('#qrContainer');
          if (grid) grid.innerHTML = '';
          const prev = $('#qrTextPreview');
          if (prev) prev.value = '';
          setBtnState(false);
          labeledImages = [];
        }
        function downloadDataUrl(filename, dataUrl) {
          const a = document.createElement('a');
          a.href = dataUrl; a.download = filename;
          document.body.appendChild(a); a.click(); a.remove();
        }
        function printImagesViaIframe(dataUrls) {
          const iframe = document.createElement('iframe');
          iframe.style.position='fixed'; iframe.style.right='0'; iframe.style.bottom='0';
          iframe.style.width='0'; iframe.style.height='0'; iframe.style.border='0';
          document.body.appendChild(iframe);
          const doc = iframe.contentDocument || iframe.contentWindow.document;
          const html = `
            <!doctype html><html><head><meta charset="utf-8"><title>Print Sintergy Labels</title></head>
            <body style="margin:16px;">
              ${dataUrls.map(src => `
                <div style="display:inline-block;margin:8px;text-align:center;">
                  <img src="${src}" style="width:360px;height:auto;" />
                </div>`).join('')}
              <script>
                window.onload = function () {
                  setTimeout(function(){
                    window.focus(); window.print();
                    setTimeout(function(){ window.close && window.close(); }, 250);
                  }, 50);
                };
              <\/script>
            </body></html>`;
          doc.open(); doc.write(html); doc.close();
        }
        async function makeQrCanvas(text) {
          if (!window.QRCode) throw new Error('QRCode library not found (qrcode.min.js).');
          const holder = document.createElement('div');
          holder.style.position='absolute'; holder.style.left='-10000px';
          document.body.appendChild(holder);
          new QRCode(holder, { text, width:256, height:256, correctLevel: QRCode.CorrectLevel.M });
          await new Promise(r=>setTimeout(r,60));
          const srcCanvas = holder.querySelector('canvas');
          const srcImg = holder.querySelector('img');

          const out = document.createElement('canvas'); out.width=256; out.height=256;
          const ctx = out.getContext('2d');

          if (srcCanvas) ctx.drawImage(srcCanvas,0,0);
          else if (srcImg) {
            await new Promise((res, rej)=>{
              if (srcImg.complete) { ctx.drawImage(srcImg,0,0,256,256); res(); }
              else { srcImg.onload=()=>{ ctx.drawImage(srcImg,0,0,256,256); res(); };
                     srcImg.onerror=()=>rej(new Error('QR image failed to load')); }
            });
          } else { document.body.removeChild(holder); throw new Error('QR code did not render'); }
          document.body.removeChild(holder);
          return out;
        }
        async function makeLabeledImage({ mix, lot, wt, bag }) {
          const QR_SIZE=256, W=360, headerH=44, padTop=12, padBetween=14, padBottom=18, lineH=22;
          const qr = await makeQrCanvas(payload(mix, lot, wt, bag));
          const lines = [`Mix Code: ${mix}`, `Lot #: ${lot}`, `Weight: ${wt}`, `Bag: ${bag}`];
          const textH = lines.length * lineH;
          const H = headerH + padTop + QR_SIZE + padBetween + textH + padBottom;

          const cx = document.createElement('canvas'); cx.width=W; cx.height=H;
          const ctx = cx.getContext('2d');

          ctx.fillStyle='#FFF'; ctx.fillRect(0,0,W,H);
          ctx.fillStyle='#000'; ctx.font='bold 22px sans-serif'; ctx.textAlign='center'; ctx.textBaseline='middle';
          ctx.fillText('Sintergy', W/2, headerH/2);

          const qrX = Math.round((W - QR_SIZE)/2), qrY = headerH + padTop;
          ctx.drawImage(qr, qrX, qrY, QR_SIZE, QR_SIZE);
          ctx.lineWidth=2; ctx.strokeStyle='#000'; ctx.strokeRect(qrX-1, qrY-1, QR_SIZE+2, QR_SIZE+2);

          ctx.font='16px sans-serif'; ctx.textAlign='center'; ctx.textBaseline='top';
          let y = qrY + QR_SIZE + padBetween;
          for (const line of lines) { ctx.fillText(line, W/2, y); y += lineH; }

          return cx.toDataURL('image/png');
        }
        function showFirstPreview({ mix, lot, wt, bag, dataUrl }) {
          const grid = $('#qrGrid') || $('#qrContainer'); if (!grid) return;
          grid.innerHTML = '';
          const head = document.createElement('div'); head.className='text-center fw-bold mb-2'; head.textContent='Sintergy';
          const wrap = document.createElement('div'); wrap.style.display='flex'; wrap.style.justifyContent='center'; wrap.style.alignItems='center'; wrap.style.padding='8px';
          const img = document.createElement('img'); img.src=dataUrl; img.style.width='360px'; img.style.height='auto'; img.alt='Mix QR label'; wrap.appendChild(img);
          const info = document.createElement('div'); info.className='text-center mt-2';
          info.innerHTML = `<div>Mix Code: <b>${mix}</b></div><div>Lot #: <b>${lot}</b></div><div>Weight: <b>${wt}</b></div><div>Bag: <b>${bag}</b></div>`;
          grid.appendChild(head); grid.appendChild(wrap); grid.appendChild(info);
        }

        // Reset each time the modal is opened
        modal.addEventListener('shown.bs.modal', () => {
          clearPreview();
          const startBag = $('#startBagNo'); if (startBag && !startBag.value) startBag.value = 1;
          $('#mixCode')?.focus();
          console.log('[MixQR] modal shown');
        });

        // Delegated clicks inside modal (works even if buttons are re-rendered)
        modal.addEventListener('click', async (e) => {
          const id = e.target?.id;
          if (!id) return;

          

          if (id === 'btnDownloadQr') {
            console.log('[MixQR] download clicked; images=', labeledImages.length);
            if (!labeledImages.length) { say({icon:'warning', title:'Nothing to download'}); return; }
            downloadDataUrl(`sintergy-label-bag-${labeledImages[0].bag}.png`, labeledImages[0].dataUrl);
          }

          if (id === 'btnPrintQr') {
            console.log('[MixQR] print clicked; images=', labeledImages.length);
            if (!labeledImages.length) { say({icon:'warning', title:'Nothing to print'}); return; }
            printImagesViaIframe(labeledImages.map(x => x.dataUrl));
          }
        });

        // EXTRA: direct listeners (in case something stops event bubbling)
        const btnDl = $('#btnDownloadQr');
        const btnPr = $('#btnPrintQr');
        if (btnDl) btnDl.addEventListener('click', (e) => {
          if (e.currentTarget.disabled) return;
          if (!labeledImages.length) return;
          downloadDataUrl(`sintergy-label-bag-${labeledImages[0].bag}.png`, labeledImages[0].dataUrl);
        });
        if (btnPr) btnPr.addEventListener('click', (e) => {
          if (e.currentTarget.disabled) return;
          if (!labeledImages.length) return;
          printImagesViaIframe(labeledImages.map(x => x.dataUrl));
        });
      });
    })();
</script>

@section Scripts {
    <script>
        /* ========= Helpers (one place) ========= */
        (function(){
          // Avoid double-wiring across hot reloads
          if (window.__SINTERGY_SCRIPTS_WIRED__) return;
          window.__SINTERGY_SCRIPTS_WIRED__ = true;

          // Clean any stray modal backdrops (the “transparent black screen”)
          window.__cleanBackdrops = function () {
            document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
            document.body.classList.remove('modal-open');
            document.body.style.removeProperty('padding-right');
            document.body.style.removeProperty('overflow');
          };

          // jQuery UI Autocomplete (works for dynamically injected inputs in the modal)
          window.__initMaterialAutocomplete = function (root) {
            try {
              if (!window.jQuery || !jQuery.fn.autocomplete) return;
              const $root = root ? jQuery(root) : jQuery(document);
              $root.find('.material-input').each(function () {
                const $input = jQuery(this);
                // Prevent re-binding
                if ($input.data('ui-autocomplete')) return;

                $input.autocomplete({
                  source: function (request, response) {
                    jQuery.getJSON('/Schedule/GetMaterialSuggestions', {
                      part: $input.data('partcode'),
                      comp: $input.data('component'),
                      term: request.term
                    }, response);
                  },
                  minLength: 1,
                  // Force menu to live inside the modal so it appears above the backdrop
                  appendTo: '#queryResultsModal',
                  // Tweak menu positioning relative to the input
                  position: { my: "left top", at: "left bottom", of: $input }
                });
              });
            } catch (e) {
              console.warn('initMaterialAutocomplete error', e);
            }
          };

          // Make the suggestions menu sit above Bootstrap modal
          const style = document.createElement('style');
          style.textContent = `
            .ui-autocomplete { z-index: 2000 !important; }
          `;
          document.head.appendChild(style);
        })();
    </script>

    <script>
        /* ========= Start Scheduling -> Query (single handler; no spurious error) ========= */
        (function () {
          const byId = (id) => document.getElementById(id);

          document.addEventListener('click', async (e) => {
            if (e.target?.id !== 'queryButtonModal') return;

            // Stop any legacy/duplicate listeners
            e.preventDefault();
            e.stopImmediatePropagation();

            const startEl = byId('startSchedulingModal');
            const resultsEl = byId('queryResultsModal');
            const resultsBodySel = '#queryResultsContent';

            try {
              // Read + normalize
              const partEl = byId('queryPart');
              const qtyEl  = byId('queryQuantity');
              let part = (partEl?.value || '').trim();
              const quantity = (qtyEl?.value || '').trim();

              if (!part || !quantity) {
                return window.Swal?.fire
                  ? Swal.fire({icon:'warning', title:'Missing', text:'Enter part and quantity.'})
                  : alert('Enter part and quantity.');
              }

              part = part.toUpperCase();
              if (partEl) partEl.value = part;

              // Close the first modal (even if no instance yet)
              if (startEl) bootstrap.Modal.getOrCreateInstance(startEl).hide();

              // Fetch partial
              const url = `/Schedule/GetComponents?part=${encodeURIComponent(part)}&quantity=${encodeURIComponent(quantity)}`;
              const r = await fetch(url, { cache: 'no-store' });

              // We only show an error toast if the response is *actually* bad and we
              // cannot show anything. If it's OK-ish, continue quietly.
              let htmlText = '';
              try { htmlText = await r.text(); } catch { htmlText = '<p class="text-center text-danger">Failed to read response.</p>'; }

              // Inject HTML safely if target exists
              const tgt = document.querySelector(resultsBodySel);
              if (tgt) tgt.innerHTML = htmlText;

              // Wire autocomplete *inside* the results modal
              window.__initMaterialAutocomplete(resultsEl);

              // Show results modal
              if (resultsEl) {
                const m = new bootstrap.Modal(resultsEl);
                // When it closes, ensure no backdrop lingers
                resultsEl.addEventListener('hidden.bs.modal', window.__cleanBackdrops, { once: true });
                m.show();
              }

              // Do NOT show the generic “could not load components” unless response was NOT ok and target missing
              if (!r.ok && !tgt) {
                window.Swal?.fire?.({icon:'error', title:'Error', text:'Could not load components.'});
              }
            } catch (err) {
              console.error('[Schedule] Query error:', err);
              // Only alert if we truly couldn’t display anything
              window.Swal?.fire?.({icon:'error', title:'Error', text:'Could not load components.'});
            }
          }, true);

          // Global safety: if any modal hides, clean stray backdrops
          document.addEventListener('hidden.bs.modal', window.__cleanBackdrops);
        })();
    </script>

    <script>
        /* ========= MIX QR: multiple labels; download all (ZIP) or one; print all ========= */
        (function () {
          function setBtnState(enabled) {
            const dl = document.getElementById('btnDownloadQr');
            const pr = document.getElementById('btnPrintQr');
            if (dl) dl.disabled = !enabled;
            if (pr) pr.disabled = !enabled;
          }
          function clearPreview() {
            const grid = document.getElementById('qrGrid') || document.getElementById('qrContainer');
            if (grid) grid.innerHTML = '';
            const prev = document.getElementById('qrTextPreview');
            if (prev) prev.value = '';
            setBtnState(false);
          }

          async function makeQrCanvas(text) {
            if (!window.QRCode) throw new Error('QRCode library not found.');
            const holder = document.createElement('div');
            holder.style.position = 'absolute';
            holder.style.left = '-10000px';
            document.body.appendChild(holder);

            new QRCode(holder, { text, width:256, height:256, correctLevel: QRCode.CorrectLevel.M });
            await new Promise(r => setTimeout(r, 60));

            const srcCanvas = holder.querySelector('canvas');
            const srcImg = holder.querySelector('img');

            const out = document.createElement('canvas'); out.width=256; out.height=256;
            const ctx = out.getContext('2d');

            if (srcCanvas) ctx.drawImage(srcCanvas, 0, 0);
            else if (srcImg) {
              await new Promise((res, rej) => {
                if (srcImg.complete) { ctx.drawImage(srcImg, 0, 0, 256, 256); res(); }
                else { srcImg.onload=()=>{ ctx.drawImage(srcImg, 0, 0, 256, 256); res(); };
                       srcImg.onerror=()=>rej(new Error('QR image failed to load')); }
              });
            } else {
              document.body.removeChild(holder);
              throw new Error('QR did not render');
            }
            document.body.removeChild(holder);
            return out;
          }

          async function makeLabeledImage({ mix, lot, wt, bag }) {
            const QR_SIZE=256, W=360, headerH=44, padTop=12, padBetween=14, padBottom=18, lineH=22;
            const payload = `ADV;${mix};${lot};${wt};${bag}\n`;

            const qr = await makeQrCanvas(payload);
            const cx = document.createElement('canvas'); cx.width=W; cx.height=headerH + padTop + QR_SIZE + padBetween + (4 * lineH) + padBottom;
            const ctx = cx.getContext('2d');

            ctx.fillStyle='#FFF'; ctx.fillRect(0,0,cx.width,cx.height);

            // Header (inside image)
            ctx.fillStyle='#000'; ctx.font='bold 22px sans-serif'; ctx.textAlign='center'; ctx.textBaseline='middle';
            ctx.fillText('Sintergy', W/2, headerH/2);

            // QR
            const qrX = Math.round((W - QR_SIZE)/2), qrY = headerH + padTop;
            ctx.drawImage(qr, qrX, qrY, QR_SIZE, QR_SIZE);
            ctx.lineWidth=2; ctx.strokeStyle='#000'; ctx.strokeRect(qrX-1, qrY-1, QR_SIZE+2, QR_SIZE+2);

            // Info (inside image)
            ctx.font='16px sans-serif'; ctx.textAlign='center'; ctx.textBaseline='top';
            let y = qrY + QR_SIZE + padBetween;
            ctx.fillText(`Mix Code: ${mix}`, W/2, y); y += lineH;
            ctx.fillText(`Lot #: ${lot}`, W/2, y);    y += lineH;
            ctx.fillText(`Weight: ${wt}`, W/2, y);    y += lineH;
            ctx.fillText(`Bag: ${bag}`, W/2, y);

            return { dataUrl: cx.toDataURL('image/png'), payload };
          }

          function printDataUrls(urls) {
            if (!urls.length) return;
            const w = window.open('', '_blank');
            if (!w) { alert('Pop-up blocked. Allow pop-ups to print.'); return; }
            w.document.write(
              '<!doctype html><html><head><meta charset="utf-8"><title>Print Sintergy Labels</title></head>' +
              '<body style="margin:16px;text-align:center;">' +
              urls.map(u => `<img src="${u}" style="width:360px;height:auto;display:inline-block;margin:8px;" />`).join('') +
              '<script>window.onload=function(){setTimeout(function(){window.focus();window.print();window.close();},100);};<\/script>' +
              '</body></html>'
            );
            w.document.close();
          }

          async function ensureJSZip() {
            if (window.JSZip) return;
            await new Promise((resolve, reject) => {
              const s = document.createElement('script');
              s.src = 'https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js';
              s.onload = resolve; s.onerror = () => reject(new Error('Failed to load JSZip'));
              document.head.appendChild(s);
            });
          }

          // Reset on modal open / tidy on close
          document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('createMixQrModal');
            if (!modal) return;

            modal.addEventListener('shown.bs.modal', () => {
              clearPreview();
              const startBag = document.getElementById('startBagNo');
              if (startBag && !startBag.value) startBag.value = 1;
              document.getElementById('mixCode')?.focus();
            });
            modal.addEventListener('hidden.bs.modal', window.__cleanBackdrops);
          });

          // Generate labels (N images, no extra DOM header/footer outside the image)
          document.addEventListener('click', async (e) => {
            if (e.target?.id !== 'btnGenerateQr') return;

            e.preventDefault();
            e.stopImmediatePropagation();

            try {
              const mix   = (document.getElementById('mixCode')?.value || '').trim();
              const lot   = (document.getElementById('lotNumber')?.value || '').trim();
              const wt    = (document.getElementById('weightPerBag')?.value || '').trim();
              const start = document.getElementById('startBagNo') ? parseInt(document.getElementById('startBagNo').value || '1', 10) : 1;
              const qtyEl = document.getElementById('labelQty') || document.getElementById('totalQty');
              const qty   = qtyEl ? parseInt(qtyEl.value || '1', 10) : 1;

              const problems = [];
              if (!mix) problems.push('Mix Code');
              if (!lot) problems.push('Lot Number');
              if (!wt)  problems.push('Weight per Bag/Drum');
              if (!Number.isFinite(start) || start < 1) problems.push('Starting Bag # ≥ 1');
              if (!Number.isFinite(qty)   || qty < 1)   problems.push('Number of labels ≥ 1');
              if (problems.length) {
                window.Swal?.fire
                  ? Swal.fire({icon:'warning', title:'Missing or invalid', html:`<ul class="text-start"><li>${problems.join('</li><li>')}</li></ul>`})
                  : alert('Missing/invalid: ' + problems.join(', '));
                return;
              }

              const grid = document.getElementById('qrGrid') || document.getElementById('qrContainer');
              if (!grid) return;

              clearPreview();
              const urls = [];
              let firstPayload = null;

              for (let i = 0; i < qty; i++) {
                const bag = start + i;
                const { dataUrl, payload } = await makeLabeledImage({ mix, lot, wt, bag });
                if (!firstPayload) firstPayload = payload;
                urls.push({ bag, dataUrl });

                const col = document.createElement('div');
                col.className = 'col-auto d-flex justify-content-center';
                const img = document.createElement('img');
                img.src = dataUrl;
                img.alt = `Label for bag ${bag}`;
                img.style.width = '360px';
                img.style.height = 'auto';
                img.className = 'mixqr-label-img';
                img.dataset.bag = String(bag);
                col.appendChild(img);
                grid.appendChild(col);
              }

              const prev = document.getElementById('qrTextPreview');
              if (prev && firstPayload) prev.value = firstPayload.replace(/\n$/, '');
              setBtnState(true);
            } catch (err) {
              console.error('[MixQR] generate error:', err);
              window.Swal?.fire?.({icon:'error', title:'Error generating labels', text: err?.message || String(err)});
            }
          }, true);

          // Download (single -> PNG; multiple -> ZIP) & Print (all)
          document.addEventListener('click', async (e) => {
            const id = e.target?.id;

            if (id === 'btnDownloadQr') {
              e.preventDefault();

              const imgs = Array.from(document.querySelectorAll('#qrGrid img.mixqr-label-img, #qrContainer img.mixqr-label-img'));
              if (!imgs.length) { window.Swal?.fire?.({icon:'warning', title:'Nothing to download'}); return; }

              if (imgs.length === 1) {
                const src = imgs[0].currentSrc || imgs[0].src;
                const a = document.createElement('a');
                a.href = src;
                a.download = `sintergy-label-bag-${imgs[0].dataset.bag || '1'}.png`;
                document.body.appendChild(a); a.click(); a.remove();
                return;
              }

              try {
                await ensureJSZip();
                const zip = new JSZip();
                imgs.forEach((img, idx) => {
                  const dataUrl = img.currentSrc || img.src;
                  const base64 = dataUrl.split(',')[1];
                  const bag = img.dataset.bag || (idx + 1);
                  zip.file(`sintergy-label-bag-${bag}.png`, base64, { base64: true });
                });
                const blob = await zip.generateAsync({ type: 'blob' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url; a.download = 'sintergy-labels.zip';
                document.body.appendChild(a); a.click(); a.remove();
                setTimeout(() => URL.revokeObjectURL(url), 2000);
              } catch (zipErr) {
                console.error('ZIP error', zipErr);
                window.Swal?.fire?.({icon:'error', title:'Download error', text:'Could not create ZIP. Try printing instead.'});
              }
            }

            if (id === 'btnPrintQr') {
              e.preventDefault();
              const imgs = Array.from(document.querySelectorAll('#qrGrid img.mixqr-label-img, #qrContainer img.mixqr-label-img'));
              if (!imgs.length) { window.Swal?.fire?.({icon:'warning', title:'Nothing to print'}); return; }
              const urls = imgs.map(img => img.currentSrc || img.src).filter(Boolean);
              printDataUrls(urls);
            }
          }, true);
        })();
    </script>
}


