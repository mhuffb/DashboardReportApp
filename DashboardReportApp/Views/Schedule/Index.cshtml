@model DashboardReportApp.Models.ScheduleModel
@using System.Text.Json;
<style>
    /* Make query results modal wider */
    .modal-dialog.modal-xxl {
        max-width: 90% !important; /* Change width as desired */
    }

</style>
<div class="container mt-4">
    <h1 class="text-center mb-4">Schedule Parts</h1>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <!-- Success and Error Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <!-- Start Scheduling Button -->
    <div class="text-center">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#startSchedulingModal">
            Start Scheduling
        </button>
        <!-- Receive Powder Button -->
        <button type="button" class="btn btn-secondary ms-2" data-bs-toggle="modal" data-bs-target="#receivePowderModal">
            Receive Powder
        </button>
        <button type="button" class="btn btn-outline-secondary ms-2" data-bs-toggle="modal" data-bs-target="#powderMixModal">
            Show Received Powder
        </button>
        <button type="button" class="btn btn-success ms-2" data-bs-toggle="modal" data-bs-target="#createMixQrModal">
            Create Mix QR Code
        </button>

    </div>

    <!-- Table of All Scheduled Parts -->
    <h3 class="mt-4 text-center">Parts Scheduled</h3>
    @if (Model.AllParts == null || !Model.AllParts.Any())
    {
        <p class="text-center text-muted">No open parts found.</p>
    }
    else
    {
        <div class="table-responsive">
            <table id="scheduledPartsTable" class="custom-table table-striped table-bordered shadow-sm">
                <thead class="table-dark">
                    <tr>
                        <th class="sortable" data-label="Date">Date</th>
                        <th class="sortable" data-label="Part">Part</th>
                        <th class="sortable" data-label="Component">Component</th>
                        <th class="sortable" data-label="MaterialCode">Material Code</th>

                        <th class="sortable" data-label="Quantity">Quantity</th>
                        <th class="sortable" data-label="ProdNumber">Production Number</th>
                        <th class="sortable" data-label="Run">Run</th>
                        <th class="sortable" data-label="Open">Open</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.AllParts.Count; i++)
                    {
                        var partUpper = Model.AllParts[i].MasterId?.ToUpper();
                        <tr data-index="@i"
                            data-date="@(Model.AllParts[i].Date?.ToString("yyyy-MM-dd"))"
                            data-masterid="@partUpper"
                            data-component="@Model.AllParts[i].Component"
                            data-qty="@Model.AllParts[i].QtyToSchedule"
                            data-prodnumber="@Model.AllParts[i].ProdNumber"
                            data-run="@Model.AllParts[i].Run"
                            data-id="@Model.AllParts[i].Id"
                            data-open="@Model.AllParts[i].Open"
                            data-material="@Model.AllParts[i].MaterialCode">
                            
                            <td>@Model.AllParts[i].Date?.ToString("yyyy-MM-dd")</td>
                            <td>@partUpper</td>
                            <td>@Model.AllParts[i].Component</td>
                            <td>@Model.AllParts[i].MaterialCode</td>

                            <td>@Model.AllParts[i].QtyToSchedule</td>
                            <td>@Model.AllParts[i].ProdNumber</td>
                            <td>@Model.AllParts[i].Run</td>
                            <td>@(Model.AllParts[i].Open == 1 ? "Yes" : "No")</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-primary edit-btn" data-index="@i">Edit</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal 1: Start Scheduling (Query Input) -->
<div class="modal fade" id="startSchedulingModal" tabindex="-1" aria-labelledby="startSchedulingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="queryFormModal">
                <div class="modal-header">
                    <h5 class="modal-title" id="startSchedulingModalLabel">Enter Part and Quantity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="queryPart" class="form-label">Part Number</label>
                        <input type="text" class="form-control" id="queryPart" placeholder="Enter Part Number" required />
                    </div>
                    <div class="mb-3">
                        <label for="queryQuantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="queryQuantity" placeholder="Enter Quantity" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- Query Button triggers AJAX call -->
                    <button type="button" id="queryButtonModal" class="btn btn-primary">Query</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal 2: Query Results & Scheduling -->
<div class="modal fade" id="queryResultsModal" tabindex="-1" aria-labelledby="queryResultsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xxl">

        <div class="modal-content">
            <form asp-action="ScheduleComponents" method="post" id="scheduleComponentsForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="queryResultsModalLabel">Query Results - Adjust Quantity to Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Partial view content will be injected here via AJAX -->
                    <div id="queryResultsContent">
                        <p class="text-center">No components found.</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- Schedule Button inside modal -->
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-calendar-check"></i> Schedule
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="UpdatePart" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Part</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Hidden field to pass the record's ID -->
                    <input type="hidden" id="editId" name="Id" />
                    <div class="mb-3">
                        <label for="editDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="editDate" name="Date" />
                    </div>
                    <div class="mb-3">
                        <label for="editMasterId" class="form-label">Part</label>
                        <input type="text" class="form-control" id="editMasterId" name="MasterId" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="editComponent" class="form-label">Component</label>
                        <input type="text" class="form-control" id="editComponent" name="Component" />
                    </div>
                    <div class="mb-3">
                        <label for="editMaterialCode" class="form-label">Material Code</label>
                        <input type="text" class="form-control" id="editMaterialCode" name="MaterialCode" />
                    </div>

                    <div class="mb-3">
                        <label for="editQtyToSchedule" class="form-label">Qty to Schedule</label>
                        <input type="number" class="form-control" id="editQtyToSchedule" name="QtyToSchedule" />
                    </div>
                    <div class="mb-3">
                        <label for="editProdNumber" class="form-label">Production Number</label>
                        <input type="text" class="form-control" id="editProdNumber" name="ProdNumber" />
                    </div>
                    <div class="mb-3">
                        <label for="editRun" class="form-label">Run</label>
                        <input type="text" class="form-control" id="editRun" name="Run" />
                    </div>
                    <div class="mb-3">
                        <label for="editOpen" class="form-label">Open</label>
                        <select class="form-control" id="editOpen" name="Open">
                            <option value="1">Yes</option>
                            <option value="0">No</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal: Receive Powder -->
<div class="modal fade" id="receivePowderModal" tabindex="-1" aria-labelledby="receivePowderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form id="receivePowderForm" enctype="multipart/form-data">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="receivePowderModalLabel">Upload Powder PDF</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="file" name="pdf" accept=".pdf" required class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="modal fade" id="powderMixModal" tabindex="-1" aria-labelledby="powderMixModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="powderMixModalLabel">Powder Mix History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="custom-table table-striped table-bordered shadow-sm" id="powderMixTable">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Lot #</th>
                                <th>Weight (lbs)</th>
                                <th>Material Code</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- rows injected via JS -->
                        </tbody>
                    </table>
                </div>
                <small class="text-muted">Click <em>Edit</em> to modify a row; then click <em>Save</em>.</small>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal: Create Mix QR Code -->
<div class="modal fade" id="createMixQrModal" tabindex="-1" aria-labelledby="createMixQrModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="mixQrForm" onsubmit="return false;">
                <div class="modal-header">
                    <h5 class="modal-title" id="createMixQrModalLabel">Create Mix QR Code</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-sm-6">
                            <label class="form-label">Sintergy Mix Code</label>
                            <input type="text" class="form-control" id="mixCode" placeholder="e.g., STY-211" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Lot Number</label>
                            <input type="number" class="form-control" id="lotNumber" placeholder="e.g., 123456" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Weight per Bag/Drum (lbs)</label>
                            <input type="number" step="0.01" class="form-control" id="weightPerBag" placeholder="e.g., 50" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Total Quantity of Bags/Drums</label>
                            <input type="number" class="form-control" id="totalQty" placeholder="e.g., 20" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Starting Bag #</label>
                            <input type="number" class="form-control" id="startBagNo" placeholder="e.g., 1" value="1" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Number of Bags/Drums/Containers</label>
                            <input type="number" class="form-control" id="labelQty" placeholder="e.g., 20" required>
                        </div>

                       

                        <div class="col-12">
                           
                            <div class="mt-2">
                                <label class="form-label">Payload Preview (first label)</label>
                                <input type="text" readonly class="form-control" id="qrTextPreview">
                            </div>

                        </div>

                        <div class="col-12 mt-3">
                            <div id="qrGrid" class="row g-3"></div>
                        </div>

                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" id="btnGenerateQr" class="btn btn-primary">Generate</button>
                    <button type="button" id="btnDownloadQr" class="btn btn-outline-secondary" disabled>Download PNG</button>
                    <button type="button" id="btnPrintQr" class="btn btn-outline-dark" disabled>Print</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .ui-autocomplete {
        z-index: 2000 !important;
    }
</style>

@section Scripts {
    <!-- Vendor libraries (keep these above all custom scripts) -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js"></script>

    <script>
        // ---------- Utilities ----------
        const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));
        const $  = (id) => document.getElementById(id);

        const swalOK  = (title, html) => Swal.fire({icon:'success', title, html, confirmButtonText:'OK'});
        const swalW   = (title, html) => Swal.fire({icon:'warning', title, html, confirmButtonText:'OK'});
        const swalErr = (title, html) => Swal.fire({icon:'error',   title, html, confirmButtonText:'OK'});

        // ---------- 1) Material autocomplete used in components partial ----------
        function initMaterialAutocomplete() {
          $(".material-input").each(function () {
            const $input = $(this);
            $input.autocomplete({
              source: function (request, response) {
                $.getJSON('/Schedule/GetMaterialSuggestions', {
                  part: $input.data('partcode'),
                  comp: $input.data('component'),
                  term: request.term
                }, function (data) { response(data); });
              },
              minLength: 1
            });
          });
        }

        // ---------- 2) Start Scheduling -> Query components ----------
        document.addEventListener("DOMContentLoaded", function () {
          const btnQuery = document.getElementById("queryButtonModal");
          if (btnQuery) {
            btnQuery.addEventListener("click", function () {
              let part = $("#queryPart").val();
              const quantity = $("#queryQuantity").val();
              if (!part || !quantity) { Swal.fire({icon:'warning', title:'Missing', text:'Enter part and quantity.'}); return; }

              part = part.toUpperCase();
              $("#queryPart").val(part);

              const startModalEl = document.getElementById('startSchedulingModal');
              const startModal   = bootstrap.Modal.getInstance(startModalEl);
              startModal && startModal.hide();

              fetch('/Schedule/GetComponents?part=' + encodeURIComponent(part) + '&quantity=' + encodeURIComponent(quantity))
                .then(r => r.text())
                .then(html => {
                  $("#queryResultsContent").html(html);
                  initMaterialAutocomplete(); // new rows get autocomplete
                  new bootstrap.Modal(document.getElementById('queryResultsModal')).show();
                })
                .catch(err => {
                  console.error(err);
                  Swal.fire({icon:'error', title:'Error', text:'Could not load components.'});
                });
            });
          }
        });

        // ---------- 3) Edit modal population for scheduled parts ----------
        document.addEventListener('DOMContentLoaded', function () {
          $$('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function () {
              const row = btn.closest('tr');
              if (!row) return;
              $('#editId').val(row.getAttribute('data-id'));
              $('#editDate').val(row.getAttribute('data-date'));
              $('#editMasterId').val(row.getAttribute('data-masterid'));
              $('#editComponent').val(row.getAttribute('data-component'));
              $('#editQtyToSchedule').val(row.getAttribute('data-qty'));
              $('#editProdNumber').val(row.getAttribute('data-prodnumber'));
              $('#editRun').val(row.getAttribute('data-run'));
              $('#editOpen').val(row.getAttribute('data-open'));
              $('#editMaterialCode').val(row.getAttribute('data-material') || '');
              new bootstrap.Modal(document.getElementById('editModal')).show();
            });
          });
        });

        // ---------- 4) Receive Powder: upload, confirm, insert ----------
        document.addEventListener('DOMContentLoaded', function () {
          const form = document.getElementById("receivePowderForm");
          if (!form) return;

          form.addEventListener("submit", function (e) {
            e.preventDefault(); e.stopPropagation();
            const formData = new FormData(form);

            fetch('/Schedule/ReceivePowder', { method: 'POST', body: formData })
              .then(r => r.json())
              .then(data => {
                if (!data.success) { Swal.fire({icon:'error', title:'Error', text:data.message}); return; }

                Swal.fire({
                  title: 'Confirm Powder Info',
                  html: `<b>Lot Number:</b> ${data.lotNumber}<br><b>Weight (lbs):</b> ${data.weight}<br><b>Material Code:</b> ${data.material}<br><br>Is this correct?`,
                  icon: 'question', showCancelButton: true, confirmButtonText: 'Yes, Save', cancelButtonText: 'No'
                }).then((res) => {
                  if (res.isConfirmed) {
                    confirmInsert(data.lotNumber, data.weight, data.material);
                  } else {
                    bootstrap.Modal.getInstance(document.getElementById('receivePowderModal'))?.hide();
                    Swal.fire({
                      title: 'Correct Info',
                      html:
                        '<input id="lotInput" type="text" class="swal2-input" placeholder="Lot Number" value="' + data.lotNumber + '">' +
                        '<input id="weightInput" type="text" class="swal2-input" placeholder="Weight (lbs)" value="' + data.weight + '">' +
                        '<input id="materialInput" type="text" class="swal2-input" placeholder="Material Code" value="' + data.material + '">',
                      showCancelButton: true, confirmButtonText: 'Save', cancelButtonText: 'Cancel',
                      focusConfirm: false, preConfirm: () => ({
                        lotNumber: document.getElementById('lotInput').value,
                        weight: document.getElementById('weightInput').value,
                        material: document.getElementById('materialInput').value
                      })
                    }).then((editRes) => {
                      if (editRes.isConfirmed) {
                        confirmInsert(editRes.value.lotNumber, editRes.value.weight, editRes.value.material);
                      }
                    });
                  }
                });

                function confirmInsert(lot, weight, material) {
                  const url = `/Schedule/ReceivePowder?confirm=true&lot=${lot}&weight=${weight}&material=${encodeURIComponent(material)}`;
                  fetch(url, { method: 'POST', body: formData })
                    .then(r => r.json())
                    .then(final => {
                      if (final.success) {
                        Swal.fire({icon:'success', title:'Saved!', text:final.message}).then(()=>location.reload());
                      } else {
                        Swal.fire({icon:'error', title:'Error', text:final.message});
                      }
                    });
                }
              });
          });
        });

        // ---------- 5) “Select Powder” button inside components list ----------
        $(function () {
          let activeIndex = null;

          $(document).on('click', '.select-powder-btn', function () {
            activeIndex = $(this).data('index');
            $.getJSON('/Schedule/GetPowderList', function (data) {
              const tbody = $('#powderTable tbody');
              tbody.empty();
              data.forEach(p => {
                tbody.append(`
                  <tr>
                    <td>${p.lotNumber}</td>
                    <td>${p.weightLbs}</td>
                    <td>${p.materialCode}</td>
                    <td>
                      <button type="button" class="btn btn-sm btn-primary choose-powder" data-mat="${p.materialCode}">Use</button>
                    </td>
                  </tr>
                `);
              });
              new bootstrap.Modal(document.getElementById('powderSelectModal')).show();
            });
          });

          $(document).on('click', '.choose-powder', function () {
            const mat = $(this).data('mat');
            if (activeIndex === null) return;
            $(`input[name='AllComponents[${activeIndex}].MaterialCode']`).val(mat);
            bootstrap.Modal.getInstance(document.getElementById('powderSelectModal'))?.hide();
          });
        });

        // ---------- 6) Powder Mix History modal (load + inline edit/delete) ----------
        document.addEventListener('DOMContentLoaded', function () {
          const modal = document.getElementById('powderMixModal');
          if (!modal) return;

          modal.addEventListener('shown.bs.modal', function () {
            fetch('/Schedule/GetPowderList')
              .then(r => r.json())
              .then(data => {
                const tbody = modal.querySelector('#powderMixTable tbody');
                tbody.innerHTML = '';
                data.forEach(r => {
                  const tr = document.createElement('tr');
                  tr.innerHTML = `
                    <td>${r.id}</td>
                    <td><input class="form-control form-control-sm pm-lot" type="number" value="${r.lotNumber}" /></td>
                    <td><input class="form-control form-control-sm pm-wt" type="number" step="0.01" value="${r.weightLbs}" /></td>
                    <td><input class="form-control form-control-sm pm-mat" type="text" value="${r.materialCode ?? ''}" /></td>
                    <td>${new Date(r.createdAt).toLocaleString()}</td>
                    <td class="d-flex gap-2">
                      <button class="btn btn-sm btn-primary pm-save">Save</button>
                      <button class="btn btn-sm btn-outline-danger pm-del">Delete</button>
                    </td>`;
                  tbody.appendChild(tr);
                });
              });
          });

          modal.querySelector('#powderMixTable').addEventListener('click', function (e) {
            if (e.target.classList.contains('pm-save')) {
              const tr = e.target.closest('tr');
              const id = parseInt(tr.children[0].textContent.trim(), 10);
              const lot = parseInt(tr.querySelector('.pm-lot').value, 10);
              const wt  = parseFloat(tr.querySelector('.pm-wt').value);
              const mat = tr.querySelector('.pm-mat').value;

              fetch('/Schedule/UpdatePowderMix', {
                method:'POST', headers:{'Content-Type':'application/json'},
                body: JSON.stringify({id, lotNumber:lot, weightLbs:wt, materialCode:mat})
              }).then(r=>r.json()).then(res=>{
                if (res.success) Swal.fire({icon:'success', title:'Saved', timer:1200, showConfirmButton:false});
                else Swal.fire({icon:'error', title:'Error', text:res.message||'Failed to save'});
              });
            }

            if (e.target.classList.contains('pm-del')) {
              const tr = e.target.closest('tr');
              const id = parseInt(tr.children[0].textContent.trim(), 10);
              Swal.fire({title:'Delete this entry?', icon:'warning', showCancelButton:true, confirmButtonText:'Delete'})
                .then(res=>{
                  if (!res.isConfirmed) return;
                  fetch('/Schedule/DeletePowderMix', {
                    method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(id)
                  }).then(r=>r.json()).then(out=>{
                    if (out.success) { tr.remove(); Swal.fire({icon:'success', title:'Deleted', timer:1000, showConfirmButton:false}); }
                    else Swal.fire({icon:'error', title:'Error', text: out.message || 'Failed to delete'});
                  });
                });
            }
          });
        });

        // ---------- 7) Part autocomplete on Start Scheduling modal ----------
        $(document).ready(function () {
          $("#queryPart").autocomplete({
            source: function (request, response) {
              $.getJSON('/Schedule/GetPartSuggestions', { term: request.term }, function (data) { response(data); });
            },
            minLength: 1,
            select: function () { $("#queryQuantity").val(1); }
          });
          $('#startSchedulingModal').on('shown.bs.modal', function () { $("#queryQuantity").val(1); });
        });

        // ---------- 8) MIX QR: multi-label generation with SweetAlert ----------
        (function () {
          // Supports: #mixCode, #lotNumber, #weightPerBag, #startBagNo, #labelQty (or legacy #totalQty), #qrGrid (or legacy #qrContainer)
          const getQtyEl = () => $('labelQty') || $('totalQty');
          const getCont  = () => $('qrGrid') || $('qrContainer');
          const isMulti  = () => !!$('qrGrid');
          const payload  = (mat,lot,wt,bag) => `ADV;${mat};${lot};${wt};${bag}\n`;

          function clearQr() {
            const c = getCont();
            if (c) c.innerHTML = '';
            if ($('qrTextPreview')) $('qrTextPreview').value = '';
            if ($('btnDownloadQr')) $('btnDownloadQr').disabled = true;
            if ($('btnPrintQr'))    $('btnPrintQr').disabled = true;
          }
          function collectImages() {
            const c = getCont();
            if (!c) return [];
            return Array.from(c.querySelectorAll('canvas,img'))
              .map(el => el.tagName === 'CANVAS' ? el.toDataURL('image/png') : (el.src || null))
              .filter(Boolean);
          }
          function renderOne(holder, text) {
            if (!window.QRCode) throw new Error('QRCode library not found (qrcode.min.js).');
            new QRCode(holder, { text, width:256, height:256, correctLevel: QRCode.CorrectLevel.M });
          }

          // Reset when modal opens
          document.getElementById('createMixQrModal')?.addEventListener('shown.bs.modal', () => {
            clearQr();
            if ($('startBagNo') && !$('startBagNo').value) $('startBagNo').value = 1;
            $('mixCode')?.focus();
            Swal.fire({icon:'info', title:'Ready', text:'Fill the fields then click Generate.', timer:900, showConfirmButton:false});
          });

          // Event delegation for Generate / Download / Print
          document.addEventListener('click', (e) => {
            // Generate
            if (e.target?.id === 'btnGenerateQr') {
              Swal.fire({ title:'Generating…', didOpen:()=>Swal.showLoading(), allowOutsideClick:false, allowEscapeKey:false });

              const missing = [];
              ['mixCode','lotNumber','weightPerBag','btnGenerateQr'].forEach(id => !$(id) && missing.push(id));
              if (!getQtyEl())  missing.push('labelQty or totalQty');
              if (!getCont())   missing.push('qrGrid or qrContainer');

              if (missing.length) { Swal.close(); return swalErr('Missing elements', `<div class="text-start"><code>${missing.join('</code><br><code>')}</code></div>`); }
              if (!window.QRCode) { Swal.close(); return swalErr('QR library not found', 'Include <code>https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js</code> above this block.'); }

              const mat = $('mixCode').value.trim();
              const lot = $('lotNumber').value.trim();
              const wt  = $('weightPerBag').value.trim();
              const start = $('startBagNo') ? parseInt(($('startBagNo').value || '1'), 10) : 1;
              const qty = parseInt((getQtyEl().value || '1'), 10);

              const problems = [];
              if (!mat) problems.push('Sintergy Mix Code / Material Code');
              if (!lot) problems.push('Lot Number');
              if (!wt)  problems.push('Weight');
              if (!Number.isFinite(start) || start < 1) problems.push('Starting Bag # must be ≥ 1');
              if (!Number.isFinite(qty)   || qty < 1)   problems.push('Label Quantity must be ≥ 1');

              if (problems.length) { Swal.close(); return swalW('Missing or invalid fields', `<ul class="text-start"><li>${problems.join('</li><li>')}</li></ul>`); }

              clearQr();
              const container = getCont();
              const firstPayload = payload(mat, lot, wt, start).replace(/\n$/, '');
              let rendered = 0;

              if (!isMulti() && qty > 1) {
                const holder = document.createElement('div');
                holder.style.width='256px'; holder.style.height='256px';
                holder.className='d-flex align-items-center justify-content-center';
                container.appendChild(holder);
                renderOne(holder, firstPayload + '\n');
                rendered = 1;
                if ($('qrTextPreview')) $('qrTextPreview').value = firstPayload;

                const imgs = collectImages();
                if (imgs.length) { if ($('btnDownloadQr')) $('btnDownloadQr').disabled=false; if ($('btnPrintQr')) $('btnPrintQr').disabled=false; }
                Swal.close();
                return swalW('Generated 1 label (single container)',
                  `Add a grid container <code>#qrGrid</code> to render all ${qty} labels.<br><br>First payload:<br><code>${firstPayload}</code>`);
              }

              if (isMulti()) {
                for (let i=0;i<qty;i++){
                  const bag = start + i;
                  const p   = payload(mat, lot, wt, bag);

                  const col  = document.createElement('div'); col.className='col-12 col-sm-6 col-md-4 col-lg-3';
                  const card = document.createElement('div'); card.className='border rounded p-3 h-100 d-flex flex-column align-items-center justify-content-between';
                  const holder = document.createElement('div'); holder.style.width='256px'; holder.style.height='256px'; holder.className='d-flex align-items-center justify-content-center';
                  const cap = document.createElement('div'); cap.className='mt-2 small text-center'; cap.textContent = `Material ${mat} • Lot ${lot} • Wt ${wt} • Bag ${bag}`;

                  card.appendChild(holder); card.appendChild(cap); col.appendChild(card); container.appendChild(col);
                  renderOne(holder, p);
                  if (i===0 && $('qrTextPreview')) $('qrTextPreview').value = p.replace(/\n$/,'');
                  rendered++;
                }
                const imgs = collectImages();
                if (imgs.length) { if ($('btnDownloadQr')) $('btnDownloadQr').disabled=false; if ($('btnPrintQr')) $('btnPrintQr').disabled=false; }
                Swal.close();
                return swalOK(`Generated ${rendered} label${rendered>1?'s':''}`,
                  `<div class="text-start">
                     <div><b>Material:</b> ${mat}</div>
                     <div><b>Lot:</b> ${lot}</div>
                     <div><b>Weight:</b> ${wt}</div>
                     <div><b>Bags:</b> ${start} → ${start + rendered - 1}</div>
                     <hr class="my-2">
                     <div><b>First payload:</b><br><code>${firstPayload}</code></div>
                   </div>`);
              }

              Swal.close();
              swalErr('No container found', 'Add <code>#qrGrid</code> (preferred) or <code>#qrContainer</code>.');
            }

            // Download first
            if (e.target?.id === 'btnDownloadQr') {
              const imgs = collectImages();
              if (!imgs.length) return swalW('Nothing to download', 'Generate a QR first.');
              const a = document.createElement('a'); a.href = imgs[0]; a.download = 'mix-qr.png';
              document.body.appendChild(a); a.click(); document.body.removeChild(a);
            }

            // Print all
            if (e.target?.id === 'btnPrintQr') {
              const imgs = collectImages();
              if (!imgs.length) return swalW('Nothing to print', 'Generate at least one QR first.');
              const w = window.open('', '_blank');
              const html = imgs.map(src => `<div style="display:inline-block;margin:8px;text-align:center;"><img src="${src}" style="width:256px;height:256px;" /></div>`).join('');
              w.document.write(`<html><head><title>Print Mix QR Sheet</title></head><body style="margin:16px;">${html}</body></html>`);
              w.document.close(); w.focus(); w.print();
            }
          });
        })();
    </script>

    <script>
        (() => {
          // ---- minimal notifier (only for errors/warnings) ----
          function say(opts) {
            if (window.Swal && Swal.fire) Swal.fire(opts);
            else alert(`${opts.title || ''}\n\n${(opts.text || opts.html || '').replace(/<[^>]*>/g,'')}`);
          }
          const warn=(t,h)=>say({icon:'warning',title:t,html:h});
          const err =(t,h)=>say({icon:'error',  title:t,html:h});

          const $      = (id) => document.getElementById(id);
          const qtyEl  = () => $('labelQty') || $('totalQty');           // support either id
          const cont   = () => $('qrGrid')   || $('qrContainer');         // support either container
          const payload= (mix,lot,wt,bag) => `ADV;${mix};${lot};${wt};${bag}\n`;

          // store labeled images for print/download
          let labeledImages = [];

          function clearPreview() {
            const c = cont();
            if (c) c.innerHTML='';
            if ($('qrTextPreview')) $('qrTextPreview').value='';
            if ($('btnDownloadQr')) $('btnDownloadQr').disabled=true;
            if ($('btnPrintQr'))    $('btnPrintQr').disabled=true;
            labeledImages = [];
          }

          // ---- make raw QR as a CANVAS (off-DOM) ----
          async function makeQrCanvas(text) {
            const holder = document.createElement('div');
            holder.style.position='absolute';
            holder.style.left='-10000px';
            document.body.appendChild(holder);

            new QRCode(holder, { text, width:256, height:256, correctLevel: QRCode.CorrectLevel.M });
            await new Promise(r=>setTimeout(r,60)); // allow rendering

            const canvas = holder.querySelector('canvas');
            const img    = holder.querySelector('img');

            const out = document.createElement('canvas');
            out.width = 256; out.height = 256;
            const ctx = out.getContext('2d');

            if (canvas) {
              ctx.drawImage(canvas, 0, 0);
            } else if (img) {
              await new Promise((res, rej) => {
                if (img.complete) { ctx.drawImage(img, 0, 0, 256, 256); res(); }
                else { img.onload = () => { ctx.drawImage(img, 0, 0, 256, 256); res(); };
                       img.onerror= () => rej(new Error('QR image failed to load')); }
              });
            } else {
              document.body.removeChild(holder);
              throw new Error('QRCode library did not produce canvas or img.');
            }

            document.body.removeChild(holder);
            return out;
          }

          // ---- make labeled image (centered text, proper QR border) ----
          async function makeLabeledImage({mix, lot, wt, bag}) {
            const QR_SIZE = 256;
            const W = 360;                 // total image width
            const headerH = 44;            // header band height
            const padTop = 12;
            const padBetween = 14;         // gap between QR and text
            const padBottom = 18;
            const lineH = 22;

            const qr = await makeQrCanvas(payload(mix, lot, wt, bag));

            const lines = [
              `Mix Code: ${mix}`,
              `Lot #: ${lot}`,
              `Weight: ${wt}`,
              `Bag: ${bag}`
            ];
            const textBlockH = lines.length * lineH;
            const H = headerH + padTop + QR_SIZE + padBetween + textBlockH + padBottom;

            const cx = document.createElement('canvas');
            cx.width = W; cx.height = H;
            const ctx = cx.getContext('2d');

            // background
            ctx.fillStyle = '#FFFFFF';
            ctx.fillRect(0,0,W,H);

            // header text
            ctx.fillStyle = '#000000';
            ctx.font = 'bold 22px sans-serif';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText('Sintergy', W/2, headerH/2);

            // QR centered
            const qrX = Math.round((W - QR_SIZE)/2);
            const qrY = headerH + padTop;
            ctx.drawImage(qr, qrX, qrY, QR_SIZE, QR_SIZE);

            // crisp border around the QR area (not through the middle)
            ctx.lineWidth = 2;
            ctx.strokeStyle = '#000000';
            ctx.strokeRect(qrX - 1, qrY - 1, QR_SIZE + 2, QR_SIZE + 2);

            // info text under QR (centered)
            ctx.font = '16px sans-serif';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'top';
            let y = qrY + QR_SIZE + padBetween;
            for (const line of lines) {
              ctx.fillText(line, W/2, y);
              y += lineH;
            }

            return cx.toDataURL('image/png');
          }

          // ---- PREVIEW: only the first image, centered; no duplicate caption, no borders/cards ----
          function showFirstPreview(dataUrl) {
            const c = cont();
            if (!c) return;
            c.innerHTML = '';

            const wrap = document.createElement('div');
            wrap.style.display = 'flex';
            wrap.style.justifyContent = 'center';
            wrap.style.alignItems = 'center';
            wrap.style.padding = '8px';

            const img = document.createElement('img');
            img.src = dataUrl;
            img.style.width  = '360px';
            img.style.height = 'auto';
            img.style.display= 'block';

            wrap.appendChild(img);
            c.appendChild(wrap);
          }

          // ---- modal open: reset & focus ----
          document.getElementById('createMixQrModal')?.addEventListener('shown.bs.modal', () => {
            clearPreview();
            if ($('startBagNo') && !$('startBagNo').value) $('startBagNo').value = 1;
            $('mixCode')?.focus();
          });

          // ---- master click handler ----
          document.addEventListener('click', async (e) => {
            const id = e.target?.id;

            // Generate
            if (id === 'btnGenerateQr') {
              if (!window.QRCode) return err('QR library not loaded',
                `Include <code>https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js</code> above this script.`);
              if (!($('mixCode') && $('lotNumber') && $('weightPerBag') && qtyEl() && cont())) {
                return err('Missing elements',
                  'Need #mixCode, #lotNumber, #weightPerBag, #labelQty (or #totalQty), and #qrGrid (or #qrContainer).');
              }

              const mix = $('mixCode').value.trim();
              const lot = $('lotNumber').value.trim();
              const wt  = $('weightPerBag').value.trim();
              const start = $('startBagNo') ? parseInt(($('startBagNo').value || '1'), 10) : 1;
              const qty   = parseInt((qtyEl().value || '1'), 10);

              const problems=[];
              if (!mix) problems.push('Mix Code');
              if (!lot) problems.push('Lot Number');
              if (!wt)  problems.push('Weight');
              if (!Number.isFinite(start) || start < 1) problems.push('Starting Bag # must be ≥ 1');
              if (!Number.isFinite(qty)   || qty < 1)   problems.push('Label Quantity must be ≥ 1');
              if (problems.length) return warn('Missing or invalid fields', `<ul class="text-start"><li>${problems.join('</li><li>')}</li></ul>`);

              clearPreview();

              try {
                for (let i=0;i<qty;i++){
                  const bag = start + i;
                  const dataUrl = await makeLabeledImage({mix, lot, wt, bag});
                  labeledImages.push({bag, dataUrl});
                  if (i===0) {
                    // preview just the first one
                    if ($('qrTextPreview')) $('qrTextPreview').value = payload(mix, lot, wt, bag).replace(/\n$/,'');
                    showFirstPreview(dataUrl);
                  }
                }

                if (labeledImages.length) {
                  if ($('btnDownloadQr')) $('btnDownloadQr').disabled=false;
                  if ($('btnPrintQr'))    $('btnPrintQr').disabled=false;
                }
                // NOTE: No success SweetAlert here (per your request).

              } catch (ex) {
                err('Error generating labels', `<pre style="white-space:pre-wrap">${ex?.message || ex}</pre>`);
              }
            }

            // Download (first labeled image)
            if (id === 'btnDownloadQr') {
              if (!labeledImages.length) return warn('Nothing to download', 'Generate a label first.');
              const a = document.createElement('a');
              a.href = labeledImages[0].dataUrl;
              a.download = `sintergy-label-bag-${labeledImages[0].bag}.png`;
              document.body.appendChild(a); a.click(); document.body.removeChild(a);
            }

            // Print (all labeled images)
            if (id === 'btnPrintQr') {
              if (!labeledImages.length) return warn('Nothing to print', 'Generate at least one label first.');
              const w = window.open('', '_blank');
              const html = labeledImages.map(({bag, dataUrl}) =>
                `<div style="display:inline-block;margin:8px;text-align:center;">
                   <img src="${dataUrl}" style="width:360px;height:auto;" alt="label ${bag}">
                 </div>`).join('');
              w.document.write(`<html><head><title>Print Sintergy Labels</title></head><body style="margin:16px;">${html}</body></html>`);
              w.document.close(); w.focus(); w.print();
            }
          });
        })();
    </script>



}
