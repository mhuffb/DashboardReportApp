@model DashboardReportApp.Models.ScheduleModel
@using System.Text.Json;
<style>
    /* Make query results modal wider */
    .modal-dialog.modal-xxl {
        max-width: 90% !important; /* Change width as desired */
    }

</style>
<div class="container mt-4">
    <h1 class="text-center mb-4">Schedule Parts</h1>
    <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger mb-3">Logout</a>

    <!-- Success and Error Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade show" role="alert">
            @TempData["Success"]
        </div>
    }

    <!-- Start Scheduling Button -->
    <div class="text-center">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#startSchedulingModal">
            Start Scheduling
        </button>
        <!-- Receive Powder Button -->
        <button type="button" class="btn btn-secondary ms-2" data-bs-toggle="modal" data-bs-target="#receivePowderModal">
            Receive Powder
        </button>
        <button type="button" class="btn btn-outline-secondary ms-2" data-bs-toggle="modal" data-bs-target="#powderMixModal">
            Show Received Powder
        </button>
        <button type="button" class="btn btn-success ms-2" data-bs-toggle="modal" data-bs-target="#createMixQrModal">
            Create Mix QR Code
        </button>

    </div>

    <!-- Table of All Scheduled Parts -->
    <h3 class="mt-4 text-center">Parts Scheduled</h3>
    @if (Model.AllParts == null || !Model.AllParts.Any())
    {
        <p class="text-center text-muted">No open parts found.</p>
    }
    else
    {
        <div class="table-responsive">
            <table id="scheduledPartsTable" class="custom-table table-striped table-bordered shadow-sm">
                <thead class="table-dark">
                    <tr>
                        <th class="sortable" data-label="Date">Date</th>
                        <th class="sortable" data-label="Part">Part</th>
                        <th class="sortable" data-label="Component">Component</th>
                        <th class="sortable" data-label="MaterialCode">Material Code</th>

                        <th class="sortable" data-label="Quantity">Quantity</th>
                        <th class="sortable" data-label="ProdNumber">Production Number</th>
                        <th class="sortable" data-label="Run">Run</th>
                        <th class="sortable" data-label="Open">Open</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.AllParts.Count; i++)
                    {
                        var partUpper = Model.AllParts[i].MasterId?.ToUpper();
                        <tr data-index="@i"
                            data-date="@(Model.AllParts[i].Date?.ToString("yyyy-MM-dd"))"
                            data-masterid="@partUpper"
                            data-component="@Model.AllParts[i].Component"
                            data-qty="@Model.AllParts[i].QtyToSchedule"
                            data-prodnumber="@Model.AllParts[i].ProdNumber"
                            data-run="@Model.AllParts[i].Run"
                            data-id="@Model.AllParts[i].Id"
                            data-open="@Model.AllParts[i].Open"
                            data-material="@Model.AllParts[i].MaterialCode">
                            
                            <td>@Model.AllParts[i].Date?.ToString("yyyy-MM-dd")</td>
                            <td>@partUpper</td>
                            <td>@Model.AllParts[i].Component</td>
                            <td>@Model.AllParts[i].MaterialCode</td>

                            <td>@Model.AllParts[i].QtyToSchedule</td>
                            <td>@Model.AllParts[i].ProdNumber</td>
                            <td>@Model.AllParts[i].Run</td>
                            <td>@(Model.AllParts[i].Open == 1 ? "Yes" : "No")</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-primary edit-btn" data-index="@i">Edit</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal 1: Start Scheduling (Query Input) -->
<div class="modal fade" id="startSchedulingModal" tabindex="-1" aria-labelledby="startSchedulingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="queryFormModal">
                <div class="modal-header">
                    <h5 class="modal-title" id="startSchedulingModalLabel">Enter Part and Quantity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="queryPart" class="form-label">Part Number</label>
                        <input type="text" class="form-control" id="queryPart" placeholder="Enter Part Number" required />
                    </div>
                    <div class="mb-3">
                        <label for="queryQuantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="queryQuantity" placeholder="Enter Quantity" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- Query Button triggers AJAX call -->
                    <button type="button" id="queryButtonModal" class="btn btn-primary">Query</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal 2: Query Results & Scheduling -->
<div class="modal fade" id="queryResultsModal" tabindex="-1" aria-labelledby="queryResultsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xxl">

        <div class="modal-content">
            <form asp-action="ScheduleComponents" method="post" id="scheduleComponentsForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="queryResultsModalLabel">Query Results - Adjust Quantity to Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Partial view content will be injected here via AJAX -->
                    <div id="queryResultsContent">
                        <p class="text-center">No components found.</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- Schedule Button inside modal -->
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-calendar-check"></i> Schedule
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="UpdatePart" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Part</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Hidden field to pass the record's ID -->
                    <input type="hidden" id="editId" name="Id" />
                    <div class="mb-3">
                        <label for="editDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="editDate" name="Date" />
                    </div>
                    <div class="mb-3">
                        <label for="editMasterId" class="form-label">Part</label>
                        <input type="text" class="form-control" id="editMasterId" name="MasterId" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="editComponent" class="form-label">Component</label>
                        <input type="text" class="form-control" id="editComponent" name="Component" />
                    </div>
                    <div class="mb-3">
                        <label for="editMaterialCode" class="form-label">Material Code</label>
                        <input type="text" class="form-control" id="editMaterialCode" name="MaterialCode" />
                    </div>

                    <div class="mb-3">
                        <label for="editQtyToSchedule" class="form-label">Qty to Schedule</label>
                        <input type="number" class="form-control" id="editQtyToSchedule" name="QtyToSchedule" />
                    </div>
                    <div class="mb-3">
                        <label for="editProdNumber" class="form-label">Production Number</label>
                        <input type="text" class="form-control" id="editProdNumber" name="ProdNumber" />
                    </div>
                    <div class="mb-3">
                        <label for="editRun" class="form-label">Run</label>
                        <input type="text" class="form-control" id="editRun" name="Run" />
                    </div>
                    <div class="mb-3">
                        <label for="editOpen" class="form-label">Open</label>
                        <select class="form-control" id="editOpen" name="Open">
                            <option value="1">Yes</option>
                            <option value="0">No</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal: Receive Powder -->
<div class="modal fade" id="receivePowderModal" tabindex="-1" aria-labelledby="receivePowderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form id="receivePowderForm" enctype="multipart/form-data">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="receivePowderModalLabel">Upload Powder PDF</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="file" name="pdf" accept=".pdf" required class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="modal fade" id="powderMixModal" tabindex="-1" aria-labelledby="powderMixModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="powderMixModalLabel">Powder Mix History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="custom-table table-striped table-bordered shadow-sm" id="powderMixTable">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Lot #</th>
                                <th>Weight (lbs)</th>
                                <th>Material Code</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- rows injected via JS -->
                        </tbody>
                    </table>
                </div>
                <small class="text-muted">Click <em>Edit</em> to modify a row; then click <em>Save</em>.</small>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal: Create Mix QR Code -->
<div class="modal fade" id="createMixQrModal" tabindex="-1" aria-labelledby="createMixQrModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="mixQrForm" onsubmit="return false;">
                <div class="modal-header">
                    <h5 class="modal-title" id="createMixQrModalLabel">Create Mix QR Code</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-sm-6">
                            <label class="form-label">Sintergy Mix Code</label>
                            <input type="text" class="form-control" id="mixCode" placeholder="e.g., STY-211" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Lot Number</label>
                            <input type="number" class="form-control" id="lotNumber" placeholder="e.g., 123456" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Weight per Bag/Drum (lbs)</label>
                            <input type="number" step="0.01" class="form-control" id="weightPerBag" placeholder="e.g., 50" required>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">Total Quantity of Bags/Drums</label>
                            <input type="number" class="form-control" id="totalQty" placeholder="e.g., 20" required>
                        </div>

                        <div class="col-12">
                            <small class="text-muted">
                                Payload format: <code>MixCode;LotNumber;WeightPerBag;TotalQty</code> + newline (to simulate “Enter” on scan)
                            </small>
                            <div class="mt-2">
                                <label class="form-label">Payload Preview</label>
                                <input type="text" readonly class="form-control" id="qrTextPreview">
                            </div>
                        </div>

                        <div class="col-12 mt-3 d-flex flex-column align-items-center">
                            <div id="qrContainer" class="border rounded p-3"></div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" id="btnGenerateQr" class="btn btn-primary">Generate</button>
                    <button type="button" id="btnDownloadQr" class="btn btn-outline-secondary" disabled>Download PNG</button>
                    <button type="button" id="btnPrintQr" class="btn btn-outline-dark" disabled>Print</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .ui-autocomplete {
        z-index: 2000 !important;
    }
</style>

@section Scripts {

    <script>
               function initMaterialAutocomplete() {
            $(".material-input").each(function () {
                var $input = $(this);
                $input.autocomplete({
                    source: function (request, response) {
                        console.log("AJAX:", {
                            part: $input.data('partcode'),
                            comp: $input.data('component'),
                            term: request.term
                        });

                        $.getJSON('/Schedule/GetMaterialSuggestions', {
                            part: $input.data('partcode'),
                            comp: $input.data('component'),
                            term: request.term
                        }, function (data) {
                            console.log("Response data:", data);
                            response(data);
                        });
                    },
                    minLength: 1
                });
            });
        }

    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // When the Query button in Modal 1 is clicked...
            document.getElementById("queryButtonModal").addEventListener("click", function () {
                var part = document.getElementById("queryPart").value;
                var quantity = document.getElementById("queryQuantity").value;
                if (!part || !quantity) {
                    alert("Please enter both part number and quantity.");
                    return;
                }

                // Force uppercase on the part value
                part = part.toUpperCase();
                document.getElementById("queryPart").value = part;

                // Hide the first modal (Start Scheduling)
                var startModalEl = document.getElementById('startSchedulingModal');
                var startModal = bootstrap.Modal.getInstance(startModalEl);
                startModal.hide();

                // Make an AJAX call to fetch the components partial view.
                fetch('/Schedule/GetComponents?part=' + encodeURIComponent(part) + '&quantity=' + encodeURIComponent(quantity))
                    .then(response => response.text())
                    .then(html => {
                        // Inject returned HTML into the query results modal body.
                        document.getElementById("queryResultsContent").innerHTML = html;
                        initMaterialAutocomplete();   

                        // Open the Query Results modal.
                        var queryResultsModal = new bootstrap.Modal(document.getElementById('queryResultsModal'));
                        queryResultsModal.show();
                    })
                            .catch(error => {
            console.error("Error fetching HTML:", error);
            console.log("HTML =", error.responseText);
            alert("An error occurred while fetching components.");
        });

            });
        });
    </script>

    <!-- Script to handle Edit Modal population -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var editButtons = document.querySelectorAll('.edit-btn');
            editButtons.forEach(function(btn) {
                btn.addEventListener('click', function() {
                    var row = btn.closest('tr');
                    var date = row.getAttribute('data-date');
                    var masterId = row.getAttribute('data-masterid');
                    var component = row.getAttribute('data-component');
                    var qty = row.getAttribute('data-qty');
                    var prodnumber = row.getAttribute('data-prodnumber');
                    var run = row.getAttribute('data-run');
                    var open = row.getAttribute('data-open');
                    var id = row.getAttribute('data-id');
                    var material = row.getAttribute('data-material'); // NEW

                    document.getElementById('editId').value = id;
                    document.getElementById('editDate').value = date;
                    document.getElementById('editMasterId').value = masterId;
                    document.getElementById('editComponent').value = component;
                    document.getElementById('editQtyToSchedule').value = qty;
                    document.getElementById('editProdNumber').value = prodnumber;
                    document.getElementById('editRun').value = run;
                    document.getElementById('editOpen').value = open;
                    document.getElementById('editMaterialCode').value = material || ""; // NEW

                    var myModal = new bootstrap.Modal(document.getElementById('editModal'));
                    myModal.show();
                });
            });
        });
    </script>

    <script>
        document.getElementById("receivePowderForm").addEventListener("submit", function (e) {
            e.preventDefault();
            e.stopPropagation();
            var formData = new FormData(this);

            // First call to parse only
            fetch('/Schedule/ReceivePowder', {
                method: 'POST',
                body: formData
            })
            .then(r => r.json())
            .then(data => {
                if (!data.success) {
                    Swal.fire({ icon: 'error', title: 'Error', text: data.message });
                    return;
                }

                // Preview confirmation
                Swal.fire({
                    title: 'Confirm Powder Info',
                    html:
                        `<b>Lot Number:</b> ${data.lotNumber}<br>` +
                        `<b>Weight (lbs):</b> ${data.weight}<br>` +
                        `<b>Material Code:</b> ${data.material}<br><br>` +
                        `Is this correct?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, Save',
                    cancelButtonText: 'No'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Go straight to insert with parsed values
                        confirmInsert(data.lotNumber, data.weight, data.material);
                    } else {
                                // Show editable form – close modal so SweetAlert can take keyboard focus
        bootstrap.Modal.getInstance(document.getElementById('receivePowderModal')).hide();

        Swal.fire({
            title: 'Correct Info',
            html:

                '<input id="lotInput" type="text" class="swal2-input" placeholder="Lot Number" value="' + data.lotNumber + '">' +
                '<input id="weightInput" type="text" class="swal2-input" placeholder="Weight (lbs)" value="' + data.weight + '">' +
                '<input id="materialInput" type="text" class="swal2-input" placeholder="Material Code" value="' + data.material + '">',
            showCancelButton: true,
            confirmButtonText: 'Save',
            cancelButtonText: 'Cancel',
            focusConfirm: false,
            preConfirm: () => {
                return {
                    lotNumber: document.getElementById('lotInput').value,
                    weight: document.getElementById('weightInput').value,
                    material: document.getElementById('materialInput').value
                }
            }
        }).then((editResult) => {
            if (editResult.isConfirmed) {
                confirmInsert(editResult.value.lotNumber, editResult.value.weight, editResult.value.material);
            }
        });

                    }
                });
            });

            // second call to confirm=true with values passed in querystring
            function confirmInsert(lotNumber, weight, material) {
                var url = `/Schedule/ReceivePowder?confirm=true&lot=${lotNumber}&weight=${weight}&material=${encodeURIComponent(material)}`;
                fetch(url, {
                    method: 'POST',
                    body: formData // same file
                })
                .then(r => r.json())
                .then(final => {
                    if (final.success) {
                        Swal.fire({ icon: 'success', title: 'Saved!', text: final.message }).then(() => location.reload());
                    } else {
                        Swal.fire({ icon: 'error', title: 'Error', text: final.message });
                    }
                });
            }
        });
    </script>


      <!-- jQuery UI for autocomplete -->

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>

    <script>
               $(function () {
            $(".material-input").each(function () {
                var $input = $(this);
                $input.autocomplete({
                    source: function (request, response) {
                        console.log("AJAX:", {
                            part: $input.data('partcode'),
                            comp: $input.data('component'),
                            term: request.term
                        });

                        $.getJSON('/Schedule/GetMaterialSuggestions', {
                            part: $input.data('partcode'),
                            comp: $input.data('component'),
                            term: request.term
                        }, function (data) {
                            console.log("Response data:", data);
                            response(data);
                        });
                    },
                    minLength: 1
                });
            });
        });

    </script>

    <script>
        $(document).ready(function () {
            // --- 1) Autocomplete for Parts using existing schedule history
            $("#queryPart").autocomplete({
                source: function (request, response) {
                    $.getJSON('/Schedule/GetPartSuggestions', {
                        term: request.term
                    }, function (data) {
                        response(data);
                    });
                },
                minLength: 1,
                select: function (event, ui) {
                    // when user picks a part, set quantity to 1 automatically
                    $("#queryQuantity").val(1);
                }
            });

            // --- 2) Force quantity default to 1 whenever modal opens
            $('#startSchedulingModal').on('shown.bs.modal', function () {
                $("#queryQuantity").val(1);
            });
        });
    </script>

   
    <script>
        $(function () {
            console.log("powder script ready");

            let activeIndex = null;

            $(document).on('click', '.select-powder-btn', function () {
                activeIndex = $(this).data('index');
                console.log("Powder button clicked. Index:", activeIndex);

                $.getJSON('/Schedule/GetPowderList', function (data) {
                    const tbody = $('#powderTable tbody');
                    tbody.empty();

                    data.forEach(function (p) {
                        tbody.append(`
                            <tr>
                                <td>${p.lotNumber}</td>
                                <td>${p.weightLbs}</td>
                                <td>${p.materialCode}</td>
                                <td>
                                    <button type="button"
                                            class="btn btn-sm btn-primary choose-powder"
                                            data-mat="${p.materialCode}">
                                        Use
                                    </button>
                                </td>
                            </tr>
                        `);
                    });

                    new bootstrap.Modal(document.getElementById('powderSelectModal')).show();
                });
            });

            $(document).on('click', '.choose-powder', function () {
                const mat = $(this).data('mat');
                $(`input[name='AllComponents[${activeIndex}].MaterialCode']`).val(mat);
                bootstrap.Modal.getInstance(document.getElementById('powderSelectModal')).hide();
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
          // Load data every time the modal is shown
          document.getElementById('powderMixModal').addEventListener('shown.bs.modal', function () {
            fetch('/Schedule/GetPowderList')
              .then(r => r.json())
              .then(data => {
                const tbody = document.querySelector('#powderMixTable tbody');
                tbody.innerHTML = '';
                data.forEach(r => {
                  const tr = document.createElement('tr');
                  tr.innerHTML = `
                    <td>${r.id}</td>
                    <td><input class="form-control form-control-sm pm-lot" type="number" value="${r.lotNumber}" /></td>
                    <td><input class="form-control form-control-sm pm-wt" type="number" step="0.01" value="${r.weightLbs}" /></td>
                    <td><input class="form-control form-control-sm pm-mat" type="text" value="${r.materialCode ?? ''}" /></td>
                    <td>${new Date(r.createdAt).toLocaleString()}</td>
                    <td class="d-flex gap-2">
                      <button class="btn btn-sm btn-primary pm-save">Save</button>
                      <button class="btn btn-sm btn-outline-danger pm-del">Delete</button>
                    </td>
                  `;
                  tbody.appendChild(tr);
                });
              });
          });

          // Save handler
          document.querySelector('#powderMixTable').addEventListener('click', function (e) {
            if (e.target.classList.contains('pm-save')) {
              const tr = e.target.closest('tr');
              const id = parseInt(tr.children[0].textContent.trim(), 10);
              const lot = parseInt(tr.querySelector('.pm-lot').value, 10);
              const wt = parseFloat(tr.querySelector('.pm-wt').value);
              const mat = tr.querySelector('.pm-mat').value;

              fetch('/Schedule/UpdatePowderMix', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id, lotNumber: lot, weightLbs: wt, materialCode: mat })
              })
              .then(r => r.json())
              .then(res => {
                if (res.success) {
                  Swal.fire({ icon: 'success', title: 'Saved', timer: 1500, showConfirmButton: false });
                } else {
                  Swal.fire({ icon: 'error', title: 'Error', text: res.message || 'Failed to save' });
                }
              });
            }

            if (e.target.classList.contains('pm-del')) {
              const tr = e.target.closest('tr');
              const id = parseInt(tr.children[0].textContent.trim(), 10);
              Swal.fire({
                title: 'Delete this entry?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Delete'
              }).then(res => {
                if (!res.isConfirmed) return;
                fetch('/Schedule/DeletePowderMix', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(id)
                })
                .then(r => r.json())
                .then(out => {
                  if (out.success) {
                    tr.remove();
                    Swal.fire({ icon: 'success', title: 'Deleted', timer: 1200, showConfirmButton: false });
                  } else {
                    Swal.fire({ icon: 'error', title: 'Error', text: out.message || 'Failed to delete' });
                  }
                });
              });
            }
          });
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js"></script>
    <script>


        (function () {
          let qr; // will hold QRCode instance

          function buildPayload() {
            const mix = (document.getElementById('mixCode').value || '').trim();
            const lot = (document.getElementById('lotNumber').value || '').trim();
            const wt  = (document.getElementById('weightPerBag').value || '').trim();
            const qty = (document.getElementById('totalQty').value || '').trim();

            if (!mix || !lot || !wt || !qty) return null;

            // Order: MixCode;LotNumber;WeightPerBag;TotalQty
            // Add newline at the end so scanners that paste into inputs will "submit/enter"
            return `${mix};${lot};${wt};${qty}\n`;
          }

          function clearQr() {
            const container = document.getElementById('qrContainer');
            container.innerHTML = '';
            qr = null;
            document.getElementById('btnDownloadQr').disabled = true;
            document.getElementById('btnPrintQr').disabled = true;
            document.getElementById('qrTextPreview').value = '';
          }

          // Reset form whenever modal opens
          document.getElementById('createMixQrModal')
            .addEventListener('shown.bs.modal', function () {
              document.getElementById('mixQrForm').reset();
              clearQr();
              document.getElementById('mixCode').focus();
            });

          // Generate QR
          document.getElementById('btnGenerateQr').addEventListener('click', function () {
            const payload = buildPayload();
            if (!payload) {
              Swal && Swal.fire ? Swal.fire({icon:'warning', title:'Missing fields', text:'Please fill all fields.'})
                                : alert('Please fill all fields.');
              return;
            }

            document.getElementById('qrTextPreview').value = payload.replace(/\n$/, ''); // show without the trailing newline in the preview

            const container = document.getElementById('qrContainer');
            container.innerHTML = '';

            // Create QR at ~256px (tweak as needed)
            qr = new QRCode(container, {
              text: payload,
              width: 256,
              height: 256,
              correctLevel: QRCode.CorrectLevel.M
            });

            // Enable actions after first render
            setTimeout(() => {
              document.getElementById('btnDownloadQr').disabled = false;
              document.getElementById('btnPrintQr').disabled = false;
            }, 200);
          });

          // Download PNG
          document.getElementById('btnDownloadQr').addEventListener('click', function () {
            if (!qr) return;

            // qrcode.js renders a <img> by default; if it renders <canvas> you can handle both:
            const container = document.getElementById('qrContainer');
            const img = container.querySelector('img');
            const canvas = container.querySelector('canvas');

            let dataUrl = null;
            if (canvas) {
              dataUrl = canvas.toDataURL('image/png');
            } else if (img) {
              dataUrl = img.src;
            }

            if (!dataUrl) return;

            const a = document.createElement('a');
            a.href = dataUrl;
            a.download = 'mix-qr.png';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          });

          // Print QR (opens a minimal window with the QR image)
          document.getElementById('btnPrintQr').addEventListener('click', function () {
            if (!qr) return;

            const container = document.getElementById('qrContainer');
            const img = container.querySelector('img');
            const canvas = container.querySelector('canvas');

            let dataUrl = null;
            if (canvas) {
              dataUrl = canvas.toDataURL('image/png');
            } else if (img) {
              dataUrl = img.src;
            }
            if (!dataUrl) return;

            const w = window.open('', '_blank');
            w.document.write(`
              <html>
                <head><title>Print Mix QR</title></head>
                <body style="margin:0; display:flex; align-items:center; justify-content:center; height:100vh;">
                  <img src="${dataUrl}" style="width:256px; height:256px;" />
                </body>
              </html>
            `);
            w.document.close();
            w.focus();
            w.print();
          });
        })();
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
          // ---- quick sanity logs
          console.log('[MixQR] DOM ready');
          const modalEl = document.getElementById('createMixQrModal');
          const btnGen  = document.getElementById('btnGenerateQr');
          const btnDl   = document.getElementById('btnDownloadQr');
          const btnPr   = document.getElementById('btnPrintQr');

          if (!modalEl)  console.warn('[MixQR] #createMixQrModal not found');
          if (!btnGen)   console.warn('[MixQR] #btnGenerateQr not found');
          if (!btnDl)    console.warn('[MixQR] #btnDownloadQr not found');
          if (!btnPr)    console.warn('[MixQR] #btnPrintQr not found');
          if (!window.QRCode) console.error('[MixQR] QRCode library missing. Make sure qrcode.min.js is loaded above this script.');

          let qrInstance = null;

          function clearQr() {
            const container = document.getElementById('qrContainer');
            if (container) container.innerHTML = '';
            qrInstance = null;
            if (btnDl) btnDl.disabled = true;
            if (btnPr) btnPr.disabled = true;
            const prev = document.getElementById('qrTextPreview');
            if (prev) prev.value = '';
          }

          function buildPayload() {
            const mix = (document.getElementById('mixCode')?.value || '').trim();
            const lot = (document.getElementById('lotNumber')?.value || '').trim();
            const wt  = (document.getElementById('weightPerBag')?.value || '').trim();
            const qty = (document.getElementById('totalQty')?.value || '').trim();
            if (!mix || !lot || !wt || !qty) return null;
            // order: MixCode;LotNumber;WeightPerBag;TotalQty + newline to "press enter"
            return `${mix};${lot};${wt};${qty};\n`;
          }

          // Reset fields every time modal opens
          modalEl?.addEventListener('shown.bs.modal', function () {
            console.log('[MixQR] Modal shown');
            document.getElementById('mixQrForm')?.reset();
            clearQr();
            document.getElementById('mixCode')?.focus();
          });

          // Generate
          btnGen?.addEventListener('click', function () {
            console.log('[MixQR] Generate clicked');
            if (!window.QRCode) {
              alert('QR library not loaded. Check the qrcode.min.js script tag.');
              return;
            }

            const payload = buildPayload();
            if (!payload) {
              if (window.Swal?.fire) Swal.fire({icon:'warning', title:'Missing fields', text:'Please fill all fields.'});
              else alert('Please fill all fields.');
              return;
            }

            const container = document.getElementById('qrContainer');
            if (!container) {
              console.error('[MixQR] #qrContainer not found');
              return;
            }

            container.innerHTML = '';
            qrInstance = new QRCode(container, {
              text: payload,
              width: 256,
              height: 256,
              correctLevel: QRCode.CorrectLevel.M
            });

            const prev = document.getElementById('qrTextPreview');
            if (prev) prev.value = payload.replace(/\n$/, ''); // hide newline in preview

            // Enable actions shortly after render
            setTimeout(() => {
              if (btnDl) btnDl.disabled = false;
              if (btnPr) btnPr.disabled = false;
            }, 150);
          });

          // Download PNG
          btnDl?.addEventListener('click', function () {
            if (!qrInstance) return;
            const container = document.getElementById('qrContainer');
            const img = container?.querySelector('img');
            const canvas = container?.querySelector('canvas');
            let dataUrl = canvas ? canvas.toDataURL('image/png') : (img ? img.src : null);
            if (!dataUrl) return;

            const a = document.createElement('a');
            a.href = dataUrl;
            a.download = 'mix-qr.png';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          });

          // Print
          btnPr?.addEventListener('click', function () {
            if (!qrInstance) return;
            const container = document.getElementById('qrContainer');
            const img = container?.querySelector('img');
            const canvas = container?.querySelector('canvas');
            let dataUrl = canvas ? canvas.toDataURL('image/png') : (img ? img.src : null);
            if (!dataUrl) return;

            const w = window.open('', '_blank');
            w.document.write(`
              <html>
                <head><title>Print Mix QR</title></head>
                <body style="margin:0; display:flex; align-items:center; justify-content:center; height:100vh;">
                  <img src="${dataUrl}" style="width:256px; height:256px;" />
                </body>
              </html>
            `);
            w.document.close();
            w.focus();
            w.print();
          });
        });
    </script>

}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
