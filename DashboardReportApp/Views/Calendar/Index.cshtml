@model DashboardReportApp.Models.CalendarIndexViewModel

@{
    var sorted = Model.Employees
                      .OrderBy(e => e.LastName)
                      .ThenBy(e => e.FirstName)
                      .ToList();
    ViewData["Title"] = "Service Record Calendar";
}


<!-- ─────────────────────────── VENDOR CSS ─────────────────────────── -->
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" />
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

<style>
    .is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 3px #dc3545
    }

    .btn-swal {
        margin: 0 .4rem
    }

    #calendar {
        height: "auto",
    }
</style>
<style>
    .admin-only.d-none {
        display: none !important;
    }
</style>

<div class="container mt-4">
    <h2 class="text-center mb-4">@ViewData["Title"]</h2>

    <div class="d-flex justify-content-center mb-3">
        <button class="btn btn-primary me-2"
                data-bs-toggle="modal" data-bs-target="#serviceModal">
            Time-Off Request
        </button>
        <button class="btn btn-info"
                data-bs-toggle="modal" data-bs-target="#eventModal">
            Schedule Event
        </button>
    </div>
    <div class="d-flex justify-content-center gap-2 mb-3">
        <button class="btn btn-outline-dark" id="btnAdminUnlock">
            🔓 Admin Unlock
        </button>
        <span id="adminUnlockedBadge" class="badge bg-success align-self-center d-none">Unlocked</span>
    </div>

    <div id="calendar" class="p-3 bg-light border rounded shadow-sm"></div>
    <div class="admin-only d-none">
    <hr class="my-5">

    <h3 class="text-center">Vacation-day usage by employee / date range</h3>

    <div class="row gy-3 justify-content-center">
        <div class="col-md-3">
            <label class="form-label">Employee</label>
            <select id="reportEmp" class="form-select">
                <option value="">— Select —</option>
                @foreach (var emp in sorted)
                {
                    <option value="@emp.FirstName|@emp.LastName">
                        @emp.LastName, @emp.FirstName
                    </option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Start</label>
            <input id="reportStart" type="date" class="form-control">
        </div>
        <div class="col-md-2">
            <label class="form-label">End</label>
            <input id="reportEnd" type="date" class="form-control">
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button id="btnRunReport" class="btn btn-primary w-100">
                Run&nbsp;Report
            </button>
        </div>
    </div>

    <div id="reportSummary" class="text-center mt-4 fw-bold"></div>
    <div id="reportTableWrapper" class="mt-3"></div>
    </div>

    <div class="admin-only d-none">
        <hr class="my-5">
        <h3 class="text-center">SEPP Voucher Occurrence Check</h3>
        <div class="row justify-content-center gy-3">
            <div class="col-md-2">
                <label class="form-label">Fiscal Year</label>
                <input id="seppYear" type="number" class="form-control" value="2025">
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button onclick="checkSepp()" class="btn btn-danger w-100">Check</button>
            </div>
        </div>

        <div id="seppResult" class="text-center fw-bold mt-3"></div>
        <div id="seppTable" class="mt-3"></div>
    </div>





    <!-- ────────────────────────── REACT TABLE  ────────────────────────── -->
    <div class="admin-only d-none">
        <h3 class="text-center mt-5">All Time-Off Service Records</h3>
        <div class="card shadow mb-4">
            <div class="card-body">
                <!-- NEW toolbar -->
                <div class="d-flex flex-wrap gap-2 mb-3" id="allRecordsToolbar">
                    <input id="allSearch" class="form-control" placeholder="Search…" style="max-width:320px" />
                    <select id="allPageSize" class="form-select" style="width:110px">
                        <option>25</option>
                        <option selected>50</option>
                        <option>100</option>
                        <option>200</option>
                    </select>
                    <div class="ms-auto d-flex align-items-center gap-2">
                        <button id="allPrev" class="btn btn-outline-secondary btn-sm">Prev</button>
                        <span id="allPageInfo" class="small text-muted">Page 1 / 1</span>
                        <button id="allNext" class="btn btn-outline-secondary btn-sm">Next</button>
                    </div>
                </div>

                <div id="myReactCalendarTableRoot"
                     data-records='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ServiceRecords))'>
                </div>
            </div>
        </div>
    </div>


    <!-- ─────────────────────────────────────────────────────────────────── -->

    

    <!-- antiforgery token holder -->
    <form asp-antiforgery="true" style="display:none"></form>
</div>

<!-- ===================================================================
     TIME-OFF MODAL
     =================================================================== -->
<div class="modal fade" id="serviceModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="mainForm" asp-action="Submit" method="post" asp-antiforgery="true">
                <div class="modal-header">
                    <h5 class="modal-title">New Time-Off Request</h5>
                    <button class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    <div class="row g-3">
                        <!-- employee -->
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Employee</label>
                            <select id="employeeSelect" class="form-select" required>
                                <option value="">Select…</option>
                                @for (int i = 0; i < sorted.Count; i++)
                                {
                                    <option value="@i">@sorted[i].LastName, @sorted[i].FirstName</option>
                                }
                            </select>
                            <input type="hidden" name="FirstName" />
                        </div>
                        <!-- department -->
                        <div class="col-md-6">
                            <label class="form-label">Department</label>
                            <select name="Department" class="form-select" required>
                                <option value="">Select…</option>
                                <option>Admin</option>
                                <option>GreenAssembly</option>
                                <option>Maintenance</option>
                                <option>Molding</option>
                                <option>Packing</option>
                                <option>QC</option>
                                <option>Secondary</option>
                                <option>Sintering</option>
                            </select>
                        </div>
                        <!-- shift / schedule -->
                        <div class="col-md-4">
                            <label class="form-label">Shift</label>
                            <select name="Shift" class="form-select" required>
                                <option>1</option>
                                <option>2</option>
                                <option>3</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Schedule</label>
                            <select name="Schedule" class="form-select" required>
                                <option>A</option>
                                <option>B</option>
                                <option>C</option>
                            </select>
                        </div>
                        <!-- type -->
                        <div class="col-md-4">
                            <label class="form-label">Time-Off Type</label>
                            <select name="TimeOffType" class="form-select" required>
                                <option>Paid Vacation</option>
                                <option>Unpaid Time Off</option>
                                <option>Other</option>
                            </select>
                        </div>
                        <!-- attribute -->
                        <div class="col-md-12">
                            <label class="form-label">Attribute <span class="text-muted">(optional)</span></label>
                            <select name="Attribute" class="form-select">
                                <option value="" selected>— None —</option>
                                <option>Reported Late</option>
                                <option>Failed to Report Off</option>
                                <option>Called Off</option>
                                <option>Early Out</option>
                                <option>Lack of Work</option>
                                <option>Disciplinary Action</option>
                            </select>
                        </div>
                        <!-- explanation -->
                        <div class="col-md-12">
                            <label class="form-label">Explanation</label>
                            <textarea name="Explanation" rows="2" class="form-control"></textarea>
                        </div>
                        <!-- dates -->
                        <div class="col-md-12">
                            <label class="form-label fw-bold">Dates Requested</label>
                            <input id="datesRequestedInput" name="DatesRequested" class="form-control datepicker" required>
                        </div>
                        <!-- hidden -->
                        <input type="hidden" id="lname" name="LastName" />
                        <input type="hidden" id="date_employed" name="DateEmployed" />
                        <input type="hidden" id="active_status" name="ActiveStatus" />
                        <input type="hidden" id="email" name="Email" />
                        <input type="hidden" id="vac_balance" name="VacationBalance" />
                        <input type="hidden" id="currBal" />
                        <input type="hidden" id="afterBal" />
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-success" type="submit">Submit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        Cancel
                    </button>

                </div>
            </form>
        </div>
    </div>
</div>

<!-- ===================================================================
     SCHEDULE-EVENT MODAL
     =================================================================== -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="eventForm" asp-action="ScheduleEvent" method="post" asp-antiforgery="true">
                <div class="modal-header">
                    <h5 class="modal-title">Schedule Event</h5>
                    <button class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    <label class="form-label fw-bold">Event Name</label>
                    <input name="Title" class="form-control mb-2" required>

                    <label class="form-label">Scheduler</label>
                    <select name="Scheduler" class="form-select mb-2" required>
                        <option disabled selected value="">Select…</option>
                        @foreach (var e in sorted)
                        {
                            <option>@e.FirstName @e.LastName</option>
                        }
                    </select>

                    <label class="form-label">Location</label>
                    <select name="Location" class="form-select mb-2" required>
                        <option disabled selected value="">Select…</option>
                        <option>Conference Room</option>
                        <option>Lunch Room</option>
                        <option>Other</option>
                    </select>

                    <label class="form-label">Description</label>
                    <textarea name="Description" class="form-control mb-2"></textarea>

                    <label class="form-label fw-bold">Date</label>
                    <input name="Date" class="form-control single-date mb-2" required>

                    <div class="row g-2">
                        <div class="col"><label class="form-label">Start</label><input name="StartTime" class="form-control timepick" required></div>
                        <div class="col"><label class="form-label">End</label><input name="EndTime" class="form-control timepick" required></div>
                    </div>

                    <hr>
                    <div class="row g-2">
                        <div class="col-md-6">
                            <label class="form-label">Repeat</label>
                            <select name="Recur" class="form-select">
                                <option value="\">None</option>
                                <option>Daily</option>
                                <option>Weekly</option>
                                <option>Monthly</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Until</label>
                            <input name="RecurUntil" class="form-control single-date">
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-success" type="submit">Save</button>
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- ─────────────────────────── VENDOR JS ─────────────────────────── -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@section Scripts
{
<script>

            // ─── Admin Unlock State ───────────────────────────────────────────────
        window.__adminPin = null;       // holds the verified PIN
        window.__adminUnlocked = false; // UI gate

              function setAdminUnlocked(on) {
          window.__adminUnlocked = !!on;
          document.querySelectorAll('.admin-only').forEach(el => {
            el.classList.toggle('d-none', !on);
          });
          document.getElementById('adminUnlockedBadge')?.classList.toggle('d-none', !on);

          if (on) {
            // Render the paginated/searchable table when the section shows
            initAllRecordsTable();
          }
        }


        async function doAdminUnlock() {
          const { value: pin, isConfirmed } = await Swal.fire({
            title: 'Admin PIN',
            input: 'password',
            inputLabel: 'Enter Admin PIN to view reports',
            inputAttributes: { autocapitalize: 'off', autocomplete: 'one-time-code' },
            showCancelButton: true,
            confirmButtonText: 'Unlock'
          });
          if (!isConfirmed || !pin) return;

          const res = await fetch(`/Calendar/VerifyAdminPin?pin=${encodeURIComponent(pin)}`);
          if (!res.ok) {
            Swal.fire('Denied', 'Incorrect PIN', 'error');
            return;
          }

          window.__adminPin = pin;
          setAdminUnlocked(true);
          Swal.fire({ icon: 'success', title: 'Unlocked', timer: 1200, showConfirmButton: false });
        }

        document.addEventListener('DOMContentLoaded', () => {
          document.getElementById('btnAdminUnlock')?.addEventListener('click', doAdminUnlock);
        });




    /* ===== helpers =================================================== */
    const empData  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(sorted));
    const antiF    = o => ({...o,__RequestVerificationToken:document.querySelector('input[name=\"__RequestVerificationToken\"]').value});
    const fmt      = d => d.toLocaleString(undefined,{dateStyle:'medium',timeStyle:'short'});
            /* Declare these at top-level so all functions can see them */
        let fpMulti;
    /* ===== init ====================================================== */
    document.addEventListener('DOMContentLoaded',() => {
                 /* ─── FullCalendar ─── */
                 // put this at a higher scope in your script file
        window.__calendar = null;

        // later in DOMContentLoaded:
        window.__calendar = new FullCalendar.Calendar(
          document.getElementById('calendar'),
          {
            initialView: 'dayGridMonth',
            height: 'auto',
            headerToolbar: {
              left: 'prev,next today', center: 'title', right: 'dayGridMonth,listMonth'
            },
            events: '/Calendar/GetEvents',
            eventClick: handleEventClick
          }
        );
        window.__calendar.render();


          /* ─── Date/time pickers ─── */
          fpMulti = flatpickr('.datepicker', {
            mode:'multiple',
            dateFormat:'m/d/Y',
            onChange:updateAfter   // this updates after-balance AND clears red border
          });
          flatpickr('.single-date',{ dateFormat:'m/d/Y' });
          flatpickr('.timepick',   { enableTime:true, noCalendar:true, dateFormat:'H:i' });

          /* ─── current vs after-balance preview ─── */
          document.querySelector('[name="TimeOffType"]')
                  .addEventListener('change', updateAfter);

          function updateAfter(){
            const bal     = parseFloat(document.getElementById('currBal').value || 0);
            const deduct  = document.querySelector('[name="TimeOffType"]')
                                     .value.startsWith('Paid');
            document.getElementById('afterBal').value =
              (deduct ? bal - fpMulti.selectedDates.length : bal).toFixed(2);
          }

          /* ─── employee dropdown auto-fill (unchanged) ─── */
          document.getElementById('employeeSelect')
                  .addEventListener('change', e => {
            const emp = empData[+e.target.value]; if (!emp) return;
            document.querySelector('input[name="FirstName"]').value = emp.firstName || emp.FirstName;
            document.getElementById('lname').value       = emp.lastName       || emp.LastName;
            document.getElementById('vac_balance').value = emp.vacationBalance|| emp.VacationBalance;
            document.getElementById('currBal').value     = parseFloat(emp.vacationBalance||emp.VacationBalance).toFixed(2);
            document.getElementById('email').value       = emp.Email         || '';
            document.getElementById('active_status').value= emp.ActiveStatus || '';
            document.getElementById('date_employed').value=
                emp.DateEmployed ? new Date(emp.DateEmployed).toISOString().split('T')[0] : '';
            updateAfter();
          });

          /* ─── attach form handlers *after* fpMulti exists ─── */
          wireFormWithSpinner('mainForm',  '/Calendar/Submit');
          wireFormWithSpinner('eventForm', '/Calendar/ScheduleEvent');
        });

        /* ========== wire-up with validation ================================= */
               /** Wire a form with spinner + optional validators */
        function wireFormWithSpinner(id, url, opts = {}) {
          const f = document.getElementById(id);
          if (!f) return;

          const {
            requireMultiDates = false,   // only true for the time-off form
            eventForm = false            // true for the blue “Schedule Event” form
          } = opts;

          f.addEventListener('submit', e => {
            e.preventDefault();
            if (f.dataset.submitted === 'true') return;
            f.dataset.submitted = 'true';

            // ── A) Time-off form: must have ≥1 date in fpMulti ───────────────
            if (requireMultiDates) {
              const dateInput = document.getElementById('datesRequestedInput');
              if (!window.fpMulti || !Array.isArray(fpMulti.selectedDates) || fpMulti.selectedDates.length === 0) {
                Swal.fire('Missing dates','Please choose at least one “Dates Requested” entry.','warning');
                dateInput?.classList.add('is-invalid');
                f.dataset.submitted = 'false';
                return;
              }
              dateInput?.classList.remove('is-invalid');
            }

            // ── B) Event form: basic checks for single date + times ───────────
            if (eventForm) {
              const d  = f.querySelector('[name="Date"]')?.value?.trim();
              const st = f.querySelector('[name="StartTime"]')?.value?.trim();
              const et = f.querySelector('[name="EndTime"]')?.value?.trim();
              const title = f.querySelector('[name="Title"]')?.value?.trim();

              if (!title || !d || !st || !et) {
                Swal.fire('Missing info','Please fill Title, Date, Start and End time.','warning');
                f.dataset.submitted = 'false';
                return;
              }
              // optional: ensure End >= Start
              try {
                const t = (s)=>{ const [h,m]=s.split(':').map(Number); return h*60+m; };
                if (t(et) < t(st)) {
                  Swal.fire('Time range','End time must be after start time.','warning');
                  f.dataset.submitted = 'false';
                  return;
                }
              } catch {}
            }

            const data = new URLSearchParams(new FormData(f));
            fetchWithSpinner(url, { method:'POST', body:data })
              .then(r => r.ok
                ? Swal.fire('Saved','Success','success').then(() => location.reload())
                : Swal.fire('Error','Save failed','error'))
              .finally(() => { f.dataset.submitted = 'false'; });
          });
        }

        // ── Call these once, after flatpickr is created ───────────────────────
        document.addEventListener('DOMContentLoaded', () => {
          // (keep your existing fpMulti init above)
          wireFormWithSpinner('mainForm',  '/Calendar/Submit',        { requireMultiDates:true });
          wireFormWithSpinner('eventForm', '/Calendar/ScheduleEvent', { eventForm:true });
        });

    /* ===== event click ============================================== */
    function handleEventClick(info){
        const ev=info.event;
        ev.id.startsWith('EV') ? showBlueOptions(ev) : showServiceOptions(ev);
    }

            function showBlueOptions(ev){
          const start = ev.start ? fmt(ev.start) : '', end = ev.end ? fmt(ev.end) : '';
          const sid = ev.extendedProps?.seriesId || null;
          const pivotDate = ev.extendedProps?.occurDate || (ev.start ? ev.start.toISOString().slice(0,10) : '');

          const seriesBtns = sid ? `
            <hr>
            <div class='small text-muted text-center mb-1'>Series actions</div>
            <button id='evEditSeries'   class='btn btn-outline-primary btn-swal'>Edit Series</button>
            <button id='evDelSeriesAll' class='btn btn-outline-danger  btn-swal'>Delete Series</button>
            <button id='evDelSeriesFut' class='btn btn-outline-danger  btn-swal'>Delete Future</button>
          ` : '';

          Swal.fire({
            title: ev.title,
            html: `${start?`<b>${start} – ${end}</b><hr>`:''}
                  <div class='text-center'>
                    <button id='evEdit'   class='btn btn-primary btn-swal'>Edit This</button>
                    <button id='evDelete' class='btn btn-danger  btn-swal'>Delete This</button>
                    ${seriesBtns}
                  </div>`,
            showConfirmButton:false,
            willOpen:p=>{
              p.querySelector('#evEdit')?.addEventListener('click',()=>showEditEventModal(ev.id));
              p.querySelector('#evDelete')?.addEventListener('click',()=>confirmDeleteEvent(ev.id));

              if (sid){
                p.querySelector('#evEditSeries')?.addEventListener('click',()=>showEditEventSeriesModal(sid, ev));
                p.querySelector('#evDelSeriesAll')?.addEventListener('click',()=>confirmDeleteSeriesAll(sid));
                p.querySelector('#evDelSeriesFut')?.addEventListener('click',()=>confirmDeleteSeriesFuture(sid, pivotDate));
              }
            }
          });
        }


    function showServiceOptions(ev){
        const approved=ev.backgroundColor==='#28a745';
        const explanation=ev.extendedProps.explanation||'(none)';
        Swal.fire({
            title:'Request Options',
            html:`<b>${ev.title}</b><hr>
                  Status: <b>${approved?'Approved':'Waiting'}</b><br>
                  Explanation: <i>${explanation}</i><br>
                  <div class='text-center'>
                     <button id='swApprove' class='btn btn-success btn-swal'>Approve</button>
                     <button id='swEdit'    class='btn btn-primary btn-swal'>Edit</button>
                     <button id='swDelete'  class='btn btn-danger  btn-swal'>Delete</button>
                  </div>`,
            showConfirmButton:false,
            willOpen:p=>{
                p.querySelector('#swApprove').addEventListener('click',()=>doApprove(ev));
                p.querySelector('#swEdit')   .addEventListener('click',()=>adminGate(()=>showEditModal(ev.id)));
                p.querySelector('#swDelete') .addEventListener('click',()=>adminGate(()=>confirmDelete(ev.id)));
            }
        });
    }

    /* ===== approve =================================================== */
    function doApprove(ev){
        Swal.fire({
            title:'Approval',
            html:`<input id='pinBox' class='form-control mb-2' type='password' placeholder='PIN'>
                  <label>Disciplinary Occurrence</label>
                  <select id='occ' class='form-select'>
                     <option>No occurrence</option>
                     <option>SEPP occurrence</option>
                     <option>Profit share occurrence</option>
                         <option>SEPP Voucher required</option>
                  </select>`,
            showCancelButton:true,confirmButtonText:'Approve'
        }).then(r=>{
            if(!r.isConfirmed) return;
            const payload=antiF({id:ev.id.replace('SR',''),pin:document.getElementById('pinBox').value,occ:document.getElementById('occ').value});
                console.log('PIN:', payload.pin);

            fetchWithSpinner('/Calendar/Approve',{method:'POST',body:new URLSearchParams(payload)})
                      .then(resp => {
          if (!resp.ok) {
            Swal.fire('Error','Invalid PIN','error');
            return;
          }

          // Make every date for this service record green in the current view
          const cal = window.__calendar;
          if (cal) {
            // Your service-record events all use the same id like "SR{Id}"
            const sameRecord = cal.getEvents().filter(e => e.id === ev.id);
            sameRecord.forEach(e => {
              e.setProp('backgroundColor', '#28a745');
              e.setProp('borderColor', '#28a745');
            });
          }

          Swal.fire('Approved','Please enter record into TA and Employee Tracking.','success');
        })

        });
    }

    /* ===== admin gate ================================================ */
    function adminGate(cb){
        Swal.fire({title:'Admin PIN',input:'password',showCancelButton:true,confirmButtonText:'Verify'})
          .then(r=>{
              if(!r.isConfirmed) return;
              fetch(`/Calendar/VerifyAdminPin?pin=${encodeURIComponent(r.value)}`)
                .then(res=>res.ok?cb():Swal.fire('Denied','Incorrect PIN','error'));
          });
    }

    /* ===== blue events edit/delete =================================== */
    function showEditEventModal(id){
        fetch(`/Calendar/GetCalendarEvent?id=${id.replace('EV','')}`)
          .then(r=>r.json())
          .then(d=>{
              Swal.fire({
                  title:'Edit Event',
                  html:`<label>Title</label><input id='evTitle' class='form-control mb-2' value='${d.title||''}'>
                        <label>Location</label>
                        <select id='evLoc' class='form-select mb-2'>
                          ${['Conference Room','Lunch Room','Other']
                             .map(l=>`<option ${l===d.location?'selected':''}>${l}</option>`).join('')}
                        </select>
                        <label>Description</label>
                        <textarea id='evDesc' class='form-control mb-2'>${d.description||''}</textarea>
                        <label>Date</label><input id='evDate' class='form-control mb-2'>
                        <div class='row g-2'>
                            <div class='col'><label>Start</label><input id='evStart' class='form-control timepick'></div>
                            <div class='col'><label>End</label><input id='evEnd' class='form-control timepick'></div>
                        </div>`,
                  didOpen:p=>{
                      flatpickr(p.querySelector('#evDate'),{dateFormat:'m/d/Y',defaultDate:new Date(d.date)});
                      const s=p.querySelector('#evStart'),e=p.querySelector('#evEnd');
                      s.value=(d.startTime||'00:00').substring(0,5);
                      e.value=(d.endTime  ||'00:00').substring(0,5);
                      flatpickr([s,e],{enableTime:true,noCalendar:true,dateFormat:'H:i'});
                  },
                  showCancelButton:true,confirmButtonText:'Save'
              }).then(res=>{
                  if(!res.isConfirmed) return;
                  const payload=antiF({
                      Id:d.id,Title:document.getElementById('evTitle').value,
                      Location:document.getElementById('evLoc').value,
                      Description:document.getElementById('evDesc').value,
                      Date:document.getElementById('evDate').value,
                      StartTime:document.getElementById('evStart').value,
                      EndTime:document.getElementById('evEnd').value
                  });
                  fetchWithSpinner('/Calendar/EditCalendarEvent',{method:'POST',body:new URLSearchParams(payload)})
                    .then(r=>r.ok?Swal.fire('Saved','Event updated','success').then(()=>location.reload())
                                  :Swal.fire('Error','Save failed','error'));
              });
          });
    }

    function confirmDeleteEvent(id){
        Swal.fire({title:'Delete event?',icon:'warning',showCancelButton:true,confirmButtonText:'Delete'})
          .then(r=>{
              if(!r.isConfirmed) return;
              fetchWithSpinner('/Calendar/DeleteCalendarEvent',{
                  method:'POST',
                  body:new URLSearchParams(antiF({id:id.replace('EV','')}))
              }).then(resp=>resp.ok?Swal.fire('Deleted','Event removed','success').then(()=>location.reload())
                                    :Swal.fire('Error','Delete failed','error'));
          });
    }

    /* ===== service-record edit/delete ================================= */
    function showEditModal(id){
        const num=id.replace('SR','');
        fetch(`/Calendar/GetRecord?id=${num}`).then(r=>r.json()).then(data=>{
            Swal.fire({
                title:'Edit Request',
                html:`<label>Time-Off Type</label>
                      <select id='edType' class='form-select mb-2'>
                        <option ${data.timeOffType==='Paid Vacation'?'selected':''}>Paid Vacation</option>
                        <option ${data.timeOffType==='Unpaid Time Off'?'selected':''}>Unpaid Time Off</option>
                        <option ${data.timeOffType==='Other'?'selected':''}>Other</option>
                      </select>
                      <label>Shift</label>
                      <select id='edShift' class='form-select mb-2'>
                        <option ${data.shift==='1'?'selected':''}>1</option>
                        <option ${data.shift==='2'?'selected':''}>2</option>
                        <option ${data.shift==='3'?'selected':''}>3</option>
                      </select>
                      <label>Explanation</label>
                      <textarea id='edExp' class='form-control mb-2'>${data.explanation||''}</textarea>
                      <label>Dates</label>
                      <input id='edDates' class='form-control mb-2'>`,
                didOpen:() => flatpickr('#edDates',{mode:'multiple',dateFormat:'m/d/Y',defaultDate:data.dates||[]}),
                showCancelButton:true,confirmButtonText:'Save'
            }).then(r=>{
                if(!r.isConfirmed) return;
                fetchWithSpinner('/Calendar/EditRecord',{
                    method:'POST',
                    body:new URLSearchParams(antiF({
                        id:num,
                        type:document.getElementById('edType').value,
                        shift:document.getElementById('edShift').value,
                        explanation:document.getElementById('edExp').value,
                        dates:document.getElementById('edDates').value
                    }))
                }).then(resp=>resp.ok?Swal.fire('Saved','Changes applied','success').then(()=>location.reload())
                                     :Swal.fire('Error','Save failed','error'));
            });
        });
    }

    function confirmDelete(id){
        Swal.fire({title:'Delete request?',icon:'warning',showCancelButton:true,confirmButtonText:'Delete'})
          .then(r=>{
              if(!r.isConfirmed) return;
              fetchWithSpinner('/Calendar/DeleteRecord',{
                  method:'POST',
                  body:new URLSearchParams(antiF({id:id.replace('SR','')}))
              }).then(resp=>resp.ok?Swal.fire('Deleted','Request removed','success').then(()=>location.reload())
                                    :Swal.fire('Error','Delete failed','error'));
          });
    }

            /* ===== React table for all service-records ========================= */
               // === All Records: paginated + searchable =============================
        let __allRecordsInit = false;

        function initAllRecordsTable() {
          if (__allRecordsInit) return; // avoid double init on repeated unlocks
          __allRecordsInit = true;

          const holder = document.getElementById('myReactCalendarTableRoot');
          if (!holder || !window.renderMyDataTable) return;

          const raw  = holder.getAttribute('data-records') ?? '[]';
          const data = JSON.parse(raw);

          // Precompute display fields (Dates, Submitted) like before
          data.forEach(r => {
            r.Dates = (r.DatesRequested || [])
              .map(d => new Date(d).toLocaleDateString())
              .join(', ');
            if (r.SubmittedOn) r.Submitted = new Date(r.SubmittedOn).toLocaleString();
          });

          const columns = [
            { key: 'Id',          label: 'ID' },
            { key: 'FirstName',   label: 'First' },
            { key: 'LastName',    label: 'Last' },
            { key: 'Department',  label: 'Dept' },
            { key: 'Shift',       label: 'Shift' },
            { key: 'Schedule',    label: 'Sched' },
            { key: 'TimeOffType', label: 'Type' },
            { key: 'Attribute',   label: 'Attribute' },
            { key: 'Dates',       label: 'Dates' },
            { key: 'Status',      label: 'Status' },
            { key: 'Submitted',   label: 'Submitted' },
            { key: 'ApprovedBy',  label: 'Approved By' }
          ];

          // --- State
          let pageSize = parseInt(document.getElementById('allPageSize')?.value || '50', 10);
          let page     = 1;
          let q        = '';

          const searchBox  = document.getElementById('allSearch');
          const pageSizeEl = document.getElementById('allPageSize');
          const prevBtn    = document.getElementById('allPrev');
          const nextBtn    = document.getElementById('allNext');
          const pageInfo   = document.getElementById('allPageInfo');

          function filterData() {
            if (!q) return data;
            const needle = q.toLowerCase();
            return data.filter(r => {
              // Build a simple searchable string (add/remove fields as you like)
              const hay = [
                r.Id, r.FirstName, r.LastName, r.Department, r.Shift, r.Schedule,
                r.TimeOffType, r.Attribute, r.Dates, r.Status, r.Submitted, r.ApprovedBy
              ].join(' ').toLowerCase();
              return hay.includes(needle);
            });
          }

          function clamp(n, lo, hi) { return Math.max(lo, Math.min(hi, n)); }

          function render() {
            const filtered = filterData();
            const totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
            page = clamp(page, 1, totalPages);

            const start = (page - 1) * pageSize;
            const pageRows = filtered.slice(start, start + pageSize);

            // Render current page
            window.renderMyDataTable('myReactCalendarTableRoot', pageRows, columns, false);

            // Update pager
            if (pageInfo) pageInfo.textContent = `Page ${page} / ${totalPages} • ${filtered.length} rows`;
            if (prevBtn)  prevBtn.disabled = (page <= 1);
            if (nextBtn)  nextBtn.disabled = (page >= totalPages);
          }

          // Wire UI
          if (searchBox)  searchBox.addEventListener('input',  () => { q = searchBox.value.trim(); page = 1; render(); });
          if (pageSizeEl) pageSizeEl.addEventListener('change', () => { pageSize = parseInt(pageSizeEl.value, 10) || 50; page = 1; render(); });
          if (prevBtn)    prevBtn.addEventListener('click', () => { page = Math.max(1, page - 1); render(); });
          if (nextBtn)    nextBtn.addEventListener('click', () => { page = page + 1; render(); });

          render();
        }




               document.getElementById('btnRunReport').addEventListener('click', () => {
          // 1) read the inputs
          const empVal      = document.getElementById('reportEmp').value;
          const [first, last] = empVal.split('|').map(s => s.trim());
          const startSerial = document.getElementById('reportStart').value; // "YYYY-MM-DD"
          const endSerial   = document.getElementById('reportEnd').value;   // "YYYY-MM-DD"

          if (!first || !last || !startSerial || !endSerial) {
            Swal.fire('Missing input','Please pick an employee AND both dates','warning');
            return;
          }
          if (endSerial < startSerial) {
            Swal.fire('Invalid range','End date must be on/after start date','warning');
            return;
          }

          // 2) grab the embedded JSON
          const raw = document
            .getElementById('myReactCalendarTableRoot')
            ?.getAttribute('data-records')
            || '[]';

          let all;
          try {
            all = JSON.parse(raw);
          } catch (err) {
            console.error('❌ JSON parse error:', err, raw);
            Swal.fire('Error','Could not load service records','error');
            return;
          }

          console.log('🔍 ALL records count:', all.length);

          // debug: show keys of first record
          if (all.length) {
            console.log('🔑 Record keys:', Object.keys(all[0]));
          }

          // 3) filter
          const inRange = all.filter(r => {
            // try both PascalCase and camelCase
            const fn = ((r.FirstName || r.firstName)||'').toString().trim().toUpperCase();
            const ln = ((r.LastName  || r.lastName )||'').toString().trim().toUpperCase();

            console.log(`Checking Id=${r.Id || r.id}: Name found [${fn} ${ln}], selected [${first.toUpperCase()} ${last.toUpperCase()}]`);
            if (fn !== first.toUpperCase() || ln !== last.toUpperCase()) {
              return false;
            }

            // pull date array, again both spellings
            const dates = r.DatesRequested || r.datesRequested || [];
            console.log('  DatesRequested raw:', dates);

            // see if any date string (first 10 chars) lies in the window
            return dates.some(dt => {
              const dd = dt.toString().slice(0,10);
              console.log(`    comparing ${dd} to ${startSerial}–${endSerial}`);
              return dd >= startSerial && dd <= endSerial;
            });
          });

          console.log('🔎 inRange count:', inRange.length, inRange);

          // 4) count paid-vacation days
          let vacDays = 0;
          inRange.forEach(r => {
            const type = ((r.TimeOffType||r.timeOffType)||'').toLowerCase();
            if (!type.startsWith('paid')) return;
            (r.DatesRequested||r.datesRequested||[])
              .map(d => d.toString().slice(0,10))
              .forEach(dd => {
                if (dd >= startSerial && dd <= endSerial) vacDays++;
              });
          });

          // 5) show summary
          document.getElementById('reportSummary').textContent =
            `${last}, ${first} used ${vacDays} paid-vacation day${vacDays===1?'':'s'} ` +
            `between ${new Date(startSerial).toLocaleDateString()} ` +
            `and ${new Date(endSerial).toLocaleDateString()}.`;

          // 6) build a small details table
          const tableData = inRange.map(r => ({
            Id:            r.Id      || r.id,
            TimeOffType:   r.TimeOffType || r.timeOffType,
            Attribute:     r.Attribute   || r.attribute,
            DatesRequested: (r.DatesRequested||r.datesRequested||[])
              .filter(dt => {
                const dd = dt.toString().slice(0,10);
                return dd >= startSerial && dd <= endSerial;
              })
              .map(dt => new Date(dt.toString().slice(0,10)).toLocaleDateString())
              .join(', '),
            Status:        r.Status || r.status,
            SubmittedOn:   r.SubmittedOn || r.submittedOn
          }));

          const cols = [
            { key:'Id',            label:'ID'       },
            { key:'TimeOffType',   label:'Type'     },
            { key:'Attribute',     label:'Attr'     },
            { key:'DatesRequested',label:'Dates'    },
            { key:'Status',        label:'Status'   },
            { key:'SubmittedOn',   label:'Submitted'}

          ];

          // 7) render with your React helper
          const wrap = document.getElementById('reportTableWrapper');
          wrap.innerHTML = "<div id='reportTable'></div>";
          window.renderMyDataTable('reportTable', tableData, cols, false);
        });




</script>
    <script>
                   async function checkSepp() {
          if (!window.__adminUnlocked || !window.__adminPin) {
            Swal.fire('Locked', 'Use “Admin Unlock” first.', 'warning');
            return;
          }

          const year = document.getElementById('seppYear').value;
          const pin  = window.__adminPin;

          fetch(`/Calendar/CountSeppVouchers?pin=${encodeURIComponent(pin)}&year=${encodeURIComponent(year)}`)
            .then(r => {
              if (!r.ok) throw 'Invalid PIN or request';
              return r.json();
            })
            .then(res => {
              const wrap = document.getElementById('seppTable');
              wrap.innerHTML = "";

              // Header summary (window + total)
              document.getElementById('seppResult').textContent =
                `Window: ${res.yearStart} – ${res.yearEnd} • Total: ${res.totalOccurrences}`;

              const details = Array.isArray(res.details) ? res.details : [];
              if (!details.length) {
                wrap.innerHTML = "<div class='text-center text-muted'>No SEPP Vouchers found for this period.</div>";
                return;
              }

              // ---- Group detailed rows PER PERSON and collect their dates ----
              const byPerson = new Map();
              for (const d of details) {
                const fn = (d.FirstName || d.fname || d.firstName || '').toString().trim();
                const ln = (d.LastName  || d.lname || d.lastName  || '').toString().trim();
                const dateStr = d.Date || d.date || d.requested_date;


                const key = `${ln}|${fn}`;
                if (!byPerson.has(key)) byPerson.set(key, { FirstName: fn, LastName: ln, _dates: [] });
                if (dateStr) byPerson.get(key)._dates.push(dateStr);
              }

              // Normalize: unique + sort dates, compute Count, flatten to rows
              const rows = Array.from(byPerson.values()).map(p => {
                const uniq = Array.from(new Set(p._dates));
                // sort as dates (MM/DD/YYYY provided by server)
                uniq.sort((a, b) => new Date(a) - new Date(b));
                return {
                  FirstName: p.FirstName,
                  LastName:  p.LastName,
                  Count:     uniq.length,
                  Dates:     uniq.join(', ')
                };
              });

              // Sort by Count desc, then Last, First
              rows.sort((a, b) =>
                (b.Count - a.Count) ||
                a.LastName.localeCompare(b.LastName) ||
                a.FirstName.localeCompare(b.FirstName)
              );

              // Render the single comprehensive table you wanted
              wrap.innerHTML = `
                <div class="card shadow-sm">
                  <div class="card-header fw-semibold">SEPP Voucher Count per Person</div>
                  <div class="card-body p-2">
                    <div id="seppCountTable"></div>
                  </div>
                </div>
              `;

              const cols = [
                { key: 'FirstName', label: 'First Name' },
                { key: 'LastName',  label: 'Last Name'  },
                { key: 'Count',     label: 'Occurrences' },
                { key: 'Dates',     label: 'Dates' }
              ];

              window.renderMyDataTable('seppCountTable', rows, cols, false);
            })
            .catch(err => Swal.fire('Error', String(err), 'error'));
        }


                function showEditEventSeriesModal(seriesId, exampleEv){
          // Load one event to prefill (use the clicked event’s details)
          fetch(`/Calendar/GetCalendarEvent?id=${exampleEv.id.replace('EV','')}`)
            .then(r=>r.json())
            .then(d=>{
              Swal.fire({
                title:'Edit Series',
                html:`<label>Title</label><input id='sevTitle' class='form-control mb-2' value='${d.title||''}'>
                      <label>Location</label>
                      <select id='sevLoc' class='form-select mb-2'>
                        ${['Conference Room','Lunch Room','Other']
                           .map(l=>`<option ${l===d.location?'selected':''}>${l}</option>`).join('')}
                      </select>
                      <label>Description</label>
                      <textarea id='sevDesc' class='form-control mb-2'>${d.description||''}</textarea>
                      <div class='row g-2'>
                        <div class='col'><label>Start</label><input id='sevStart' class='form-control timepick' value='${(d.startTime||'00:00').substring(0,5)}'></div>
                        <div class='col'><label>End</label><input id='sevEnd' class='form-control timepick' value='${(d.endTime||'00:00').substring(0,5)}'></div>
                      </div>`,
                didOpen:p=>{
                  flatpickr([p.querySelector('#sevStart'), p.querySelector('#sevEnd')], { enableTime:true, noCalendar:true, dateFormat:'H:i' });
                },
                showCancelButton:true, confirmButtonText:'Apply to Series'
              }).then(res=>{
                if(!res.isConfirmed) return;
                const payload = antiF({
                  seriesId,
                  Title: document.getElementById('sevTitle').value,
                  Location: document.getElementById('sevLoc').value,
                  Description: document.getElementById('sevDesc').value,
                  StartTime: document.getElementById('sevStart').value,
                  EndTime: document.getElementById('sevEnd').value
                });
                fetchWithSpinner('/Calendar/EditCalendarSeries', { method:'POST', body:new URLSearchParams(payload) })
                  .then(r=>r.ok ? Swal.fire('Saved','Series updated','success').then(()=>location.reload())
                                : Swal.fire('Error','Save failed','error'));
              });
            });
        }

                function confirmDeleteSeriesAll(seriesId){
          Swal.fire({title:'Delete ENTIRE series?', icon:'warning', showCancelButton:true, confirmButtonText:'Delete'})
            .then(r=>{
              if(!r.isConfirmed) return;
              fetchWithSpinner('/Calendar/DeleteCalendarSeries_All', {
                method:'POST',
                body:new URLSearchParams(antiF({ seriesId }))
              }).then(resp=>resp.ok ? Swal.fire('Deleted','Series removed','success').then(()=>location.reload())
                                    : Swal.fire('Error','Delete failed','error'));
            });
        }

        function confirmDeleteSeriesFuture(seriesId, pivotDate){
          Swal.fire({
            title:'Delete future occurrences?',
            text:`Everything on/after ${pivotDate}`,
            icon:'warning',
            showCancelButton:true,
            confirmButtonText:'Delete'
          }).then(r=>{
            if(!r.isConfirmed) return;
            fetchWithSpinner('/Calendar/DeleteCalendarSeries_Future', {
              method:'POST',
              body:new URLSearchParams(antiF({ seriesId, pivotDate }))
            }).then(resp=>resp.ok ? Swal.fire('Deleted','Future occurrences removed','success').then(()=>location.reload())
                                  : Swal.fire('Error','Delete failed','error'));
          });
        }



    </script>
}
@if (TempData["Success"] != null)
{
    <script>
        Swal.fire({icon:'success',title:'Done',text:'@TempData["Success"]',timer:2000,showConfirmButton:false});
    </script>
}
