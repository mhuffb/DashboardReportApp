@model List<DashboardReportApp.Models.SinterRunSkid>
@using System.Text.Json;

@{
    ViewData["Title"] = "Sintering Run Log";

    // 1) Operators from the DB
    var operators = ViewData["Operators"] as List<string> ?? new List<string>();

    // 2) Dictionary of (Part, Run) => Furnace from open skids
    var openParts = ViewData["OpenParts"] as Dictionary<(string, string), string>
                    ?? new Dictionary<(string, string), string>();

    // 3) Open sintering runs (`open = 1`)
    var openRuns = ViewBag.OpenRuns as List<DashboardReportApp.Models.SinterRunSkid>
                   ?? new List<DashboardReportApp.Models.SinterRunSkid>();

    var openSkids = ViewBag.OpenSkids as List<DashboardReportApp.Models.SinterRunSkid>
                   ?? new List<DashboardReportApp.Models.SinterRunSkid>();
}
<div class="container-fluid px-3">
    <h1 class="text-center mb-4">Sintering Run Log</h1>

    <!-- Start Sintering Form -->
    <h2 class="text-center">Start Sintering</h2>
    <div class="card shadow mb-4">
        <div class="card-body">
            <form method="post" action="/SinterRunLog/StartSkid">
                <div class="mb-3">
                    <label for="Operator" class="form-label">Operator</label>
                    <select id="Operator" name="operatorName" class="form-control" required>
                        <option value="">Select an Operator</option>
                        @foreach (var operatorName in operators)
                        {
                            <option value="@operatorName">@operatorName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="Part" class="form-label">Part - Run</label>
                    <select id="Part" name="part" class="form-control" required onchange="updateHiddenRun()">
                        <option value="">Select a Part</option>
                        @foreach (var entry in openParts)
                        {
                            <option value="@entry.Key.Item1"
                                    data-run="@entry.Key.Item2">
                                @entry.Key.Item1 (Run: @entry.Key.Item2)
                            </option>
                        }
                    </select>

                    <input type="hidden" id="RunNumber" name="run" />
                </div>
                <div class="mb-3">
                    <label for="Furnace" class="form-label">Furnace</label>
                    <select id="Furnace" name="furnace" class="form-control" required>
                        <option value="">Select a Furnace</option>
                        @foreach (var furnace in (List<string>)ViewData["Furnaces"])
                        {
                            <option value="@furnace">@furnace</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="Process" class="form-label">Process</label>
                    <select id="Process" name="process" class="form-control" required>
                        <option value="Sinter">Sinter</option>
                        <option value="Anneal">Anneal</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="Notes" class="form-label">Notes</label>
                    <textarea id="Notes" name="notes" class="form-control text-area-large"></textarea>
                </div>

                <button type="submit" class="btn btn-primary w-100">Start Sintering</button>
            </form>
        </div>
    </div>
</div>

<script>
           function updateHiddenRun() {
        const partSelect = document.getElementById("Part");
        const runHidden = document.getElementById("RunNumber");
        const selectedOption = partSelect.options[partSelect.selectedIndex];

        if (!selectedOption) {
            console.error("No option selected!");
            return;
        }

        const selectedRun = selectedOption.getAttribute("data-run") || "";
        runHidden.value = selectedRun; // Ensure correct `run` value is set

        console.log("Selected Run:", selectedRun); // Debugging output
    }


</script>

<!-- Open Sinter Runs -->
<h2 class="text-center mb-4">Open Sinter Runs</h2>
<div class="card shadow mb-4">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-bordered shadow-sm wider-table">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Timestamp</th>
                        <th>Run</th>
                        <th>Part</th>
                        <th>Start Time</th>
                        <th>Operator</th>
                        <th>Furnace</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var run in openSkids)
                    {
                        <tr>
                            <td>@run.Id</td>
                            <td>@run.Timestamp</td>
                            <td>@run.Run</td>
                            <td>@run.Part</td>
                            <td>@run.StartDateTime</td>
                            <td>@run.Operator</td>
                            <td>@run.Machine</td>
                            <td>
                                <button class="btn btn-danger btn-sm"
                                        onclick="openStopSinteringModal('@run.Id', '@run.Part', '@run.Run', '@run.StartDateTime')"
                                        data-bs-toggle="modal" data-bs-target="#stopSinteringModal">
                                    Stop Sintering
                                </button>



                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


    <!-- Full List of Records (React Table) -->
    <h3 class="text-center mt-4">All Sinter Run Records</h3>
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="container-fluid px-3 mt-4">
                <div id="myReactSinterRunTableRoot"
                     data-records='@Html.Raw(JsonSerializer.Serialize(Model))'>
                </div>
            </div>
        </div>
    </div>

    <script src="/js/mydatatable.bundle.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const container = document.getElementById("myReactSinterRunTableRoot");
            if (!container) return;

            // Get JSON data from the Razor model
            const rawData = container.getAttribute("data-records");
            const data = JSON.parse(rawData); // List<PressRunLogModel>

            // Define columns for the table (same as C# PressRunLogModel)
            const columns = [
                { key: "Id", label: "ID" },
                { key: "Timestamp", label: "Timestamp" },
                { key: "Operator", label: "Operator" },
                { key: "Run", label: "Run" },
                { key: "Part", label: "Part" },
                { key: "Machine", label: "Furnace" },
                { key: "Process", label: "Process" },
                { key: "StartDateTime", label: "Start Time" },
                { key: "EndDateTime", label: "End Time" },
                { key: "Notes", label: "Notes" },
                { key: "Open", label: "Open" }
                
                
                
            ];

            // Render the React table
            if (window.renderMyDataTable) {
                window.renderMyDataTable("myReactSinterRunTableRoot", data, columns, true);
            } else {
                console.error("React table render function not found!");
            }
        });
    </script>
<!-- Stop Sintering Modal -->
<div class="modal fade" id="stopSinteringModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Stop Sintering Run</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="stopSinteringForm" method="post" action="/SinterRunLog/CloseSkid">
                    <!-- Hidden Fields for Submission -->
                    <input type="hidden" id="modalRunId" name="run" />
                    <input type="hidden" id="modalStartTime" name="startTime" />

                    <!-- Display Part Number -->
                    <div class="mb-3">
                        <label class="form-label">Part Number</label>
                        <input type="text" id="modalPart" class="form-control" name="part" readonly />
                    </div>

                    <!-- Confirmation Message -->
                    <p class="text-danger">Are you sure you want to stop this sintering run?</p>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Stop Sintering</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function openStopSinteringModal(runId, part, run, startDateTime) {
        if (!confirm(`Are you sure you want to stop sintering for ${part} (Run: ${run}) started at ${startDateTime}?`)) {
            return; // Cancel if the user clicks "No"
        }

        // Debugging output to ensure the correct values are passed
        console.log("Stopping sintering:");
        console.log("Run ID:", runId);
        console.log("Part:", part);
        console.log("Run:", run); // ✅ Check if the correct run value is here
        console.log("Start Time:", startDateTime);

        // Create a form dynamically and submit it
        const form = document.createElement("form");
        form.method = "post";
        form.action = "/SinterRunLog/CloseSkid";

        // Add input fields for the required data
        const partInput = document.createElement("input");
        partInput.type = "hidden";
        partInput.name = "part";
        partInput.value = part;
        form.appendChild(partInput);

        const runInput = document.createElement("input");
        runInput.type = "hidden";
        runInput.name = "run";
        runInput.value = run; // ✅ Ensuring the correct value is passed
        form.appendChild(runInput);

        document.body.appendChild(form);
        form.submit();
    }
</script>

<script>
    function openStopSinteringModal(id, part, run, startTime) {
        document.getElementById("modalPart").value = part;
        document.getElementById("modalRunId").value = run;  // Ensure Run is correct
        document.getElementById("modalStartTime").value = startTime;
    }
</script>


   
